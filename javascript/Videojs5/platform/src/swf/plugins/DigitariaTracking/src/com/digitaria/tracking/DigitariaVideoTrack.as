/************************************************************************ * Copyright (c) 2009  thePlatform for Media, Inc. All Rights Reserved. * ************************************************************************/package com.digitaria.tracking{	import com.omniture.ActionSource;	import com.theplatform.pdk.utils.Debug;import com.theplatform.pdk.utils.PdkStringUtils;import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.utils.Timer;			public class DigitariaVideoTrack	{		public static const AD_PRE_ROLL:String = "pre-roll";		public static const AD_MID_ROLL:String = "mid-roll";		public static const AD_POST_ROLL:String = "post-roll";		public static const AD_IN_VIDEO:String = "in-video";				 // event names and vars		private static var DISTRIBUTE_EVENT:String		=	"event5";  //share/grab/embed code etc.		private static var REPLAY_EVENT :String			=	"event6";		private static var USER_INIT_EVENT:String		=	"event9";		private static var PAUSE_EVENT	:String			=	"event10,event19"		private static var VID_TIME_EVENT:String		=	"event11";		private static var VID_START_EVENT:String		=	"event12";		private static var VID_COMPLETE_EVENT:String 	=	"event13";		private static var MILESTONE_EVENT:String 		=	"event14";		private static var AD_START_EVENT:String		=	"event15";		private static var AD_COMPLETE_EVENT:String		=	"event16";				// eVar names and vars		private static var SUB_SECTION_1_EVAR:String	= 	"eVar1";		private static var SUB_SECTION_2_EVAR:String	= 	"eVar2";		private static var SUB_SECTION_3_EVAR:String	= 	"eVar3";		private static var PAGE_NAME_EVAR:String		= 	"eVar4";		private static var FORM_NAME_EVAR:String 		= 	"eVar8";		private static var VIDEO_VISITS_EVAR:String 	=	"eVar9";//static setting to "video"		private static var HOUR_OF_DAY_EVAR:String 		= 	"eVar11";		private static var DAY_OF_WEEK_EVAR:String		=	"eVar12";		private static var IS_WEEKDAY_EVAR:String		= 	"eVar13";		private static var CUSTOMER_ID_EVAR:String		= 	"eVar14";		private static var WIDGET_NAME_EVAR:String 		= 	"eVar16";		private static var WIDGET_TOPIC_EVAR:String 	= 	"eVar17";		private static var PLAYER_NAME_EVAR:String		= 	"eVar18";		private static var SPONSOR_NAME_EVAR:String		= 	"eVar20";		private static var WIDGET_ASSET_TYPE_EVAR:String= 	"eVar21";		private static var VISITOR_ID_EVAR :String		= 	"eVar25";		private static var VIDEO_GROUP_EVAR:String		= 	"eVar28"; // use VIDEO_GROUP_NAME_ARRAY to set this var;		private static var VIDEO_THRESHOLD:String       =   "eVar29";//use JS script to get sGetVideoThreshold() then set it here  		private static var VIDEO_TOPIC_1_EVAR:String	= 	"eVar35";		private static var VIDEO_TOPIC_2_EVAR:String	= 	"eVar36";		private static var VIDEO_TOPIC_3_EVAR:String	= 	"eVar37";		private static var AD_NAME_EVAR	:String			= 	"eVar38"; // If "promo" preface name with "promo", eg. "promo:chelsea-lately"		private static var VIDEO_NAME_EVAR :String		= 	"eVar39";		private static var AD_POSITION_EVAR:String		= 	"eVar40"; // use AD_POSITION_NAME_ARRAY to set this var;		private static var POINT_LEVEL_EVAR:String		=	"eVar41";		private static var HEAVY_VIDEO_EVAR:String		=	"eVar42"; // use JS script to set sSetHeavyVideo('heavy-video') OR sSetHeavyVideo('low-video')...  Heavy = 3+ vidoes		private static var HEAVY_PHOTO_EVAR:String		= 	"eVar43";		private static var HEAVY_CONTRIBUTOR_EVAR:String=	"eVar44";		private static var AUTHEN_STATUS_EVAR:String	=	"eVar50";			// prop names and vars		private static var SPONSOR_NAME_PROP:String 	= 	"prop20";		private static var VIDEO_NAME_PROP:String 		= 	"prop21"; // "player name:video name"				private static var FORM_META_PROP:String 		= 	"prop24";		private static var FORM_VISITOR_ID_PROP:String 	= 	"prop25";		private static var VIDEO_VISITS_PROP:String		=	"prop29";				//util vars and names to be used with eVars		private static var VIDEO_GROUP_NAME_ARRAY:Array	=["<4-minutes", "4-to-20-minutes", "21-to-30-minutes", "31-to-60-minutes","61-or-more-minutes"] 		private static var VIDEO_GROUP_LIMIT_ARRAY:Array=[0,240,1200,1800,3100] // Keep testing for Greater Than, stop when test fails.						private static  var _instance:DigitariaVideoTrack;		private static var s:ActionSource;		private static var _timeSinceLastTrack:uint = 0;		private static var _lastTrackTimer:Timer;				private static var _timerState:Boolean = false; //true - class timer is on so lets count || false - timer should not be counting now				private var _omnitureAccount:String="";		private var _videoName:String ="";		private var _playerName:String="";		private var _showName:String="";		private var _pageURL:String="";		private var _pageName:String="";		private var _adName:String="";		private var _adLength:Number = 0;		private var _adPosition:String;		private var _vidLength:Number=0;		private var _globalVideoVars:String="";		private var _globalVideoArray:Array;		private var _isOnsite:Boolean=true;		private var _numVideosWatched:uint = 0;		private var _videoGroup:String = "";  // PRIORITY 2 to set these vars		private var _topic1:String = ""; // PRIORITY 3 to set these vars		private var _topic2:String = ""; // PRIORITY 3 to set these vars		private var _topic3:String = ""; // PRIORITY 3 to set these vars		private var _playerSponsor:String = "";		private var _milestoneComplete:Number= 0;		private var _playedVids:Array = [];		private var _heavyVideoState:String="notSet";				private var _minSecondsVideoProgress:Number = 240; //- this is the number of seconds seperating a short from a long video	    private var _videoTrackProgressBool:Boolean = false; //- have we already sent a tracking call for this second - since we're flooring, multiple hits will happen, but we need to only track once	    private var _videoTrackProgress:Number;				public function DigitariaVideoTrack(s:SingletonEnforcer):void		{			// use getInstance();		}				public static function getInstance():DigitariaVideoTrack		{			if (_instance == null)			{				_instance = new DigitariaVideoTrack(new SingletonEnforcer());			}			return _instance;		}						public function configActionSource(account:String, visitorNamespace:String, dc:String, trackingServer:String, debug:Boolean):void		{		 	s = new ActionSource();			s.linkLeaveQueryString = true;			s.charSet = "UTF-8";			s.currencyCode = "USD";			s.trackClickMap = true;			s.autoTrack = true;			s.account = account;			s.visitorNamespace = visitorNamespace;			s.dc = dc;			if (trackingServer != null)			{				s.trackingServer = trackingServer;			}			s.debugTracking = debug; 			s.trackLocal = debug; 					}				public function configPlayer(onsite:Boolean, pageName:String = "", playerName:String = ""):void		{			_isOnsite = onsite;						s.pageName = _pageName = pageName;			if (ExternalInterface.available)			{				try				{					_pageURL = ExternalInterface.call("window.location.href.toString");				}				catch (e:Error)				{					Debug.trace("Error getting page URL: " + e.message, "DigitariaVideoTrack", null, Debug.ERROR);					}			}			setPlayerName(playerName);		}				public function setPlayerName(playerName:String):void		{			if (playerName == null) playerName = "";			_playerName = s[PLAYER_NAME_EVAR] = s.Media.playerName = playerName.split(" ").join("-").split("\"").join("'").split(":").join("_").toLowerCase();						s[VIDEO_NAME_PROP] = _playerName + ":" + _videoName;		}		public function initialize():void		{			_lastTrackTimer = new Timer(1000);			_lastTrackTimer.addEventListener(TimerEvent.TIMER, incrementTimer);		 			_globalVideoArray = new Array();			if(_isOnsite)			{				_globalVideoArray.push(PLAYER_NAME_EVAR);				_globalVideoArray.push(SUB_SECTION_1_EVAR);				_globalVideoArray.push(SUB_SECTION_2_EVAR);				_globalVideoArray.push(SUB_SECTION_3_EVAR);				_globalVideoArray.push(PAGE_NAME_EVAR);				_globalVideoArray.push(DAY_OF_WEEK_EVAR);				_globalVideoArray.push(HOUR_OF_DAY_EVAR);				_globalVideoArray.push(IS_WEEKDAY_EVAR);				_globalVideoArray.push(CUSTOMER_ID_EVAR);				_globalVideoArray.push(VISITOR_ID_EVAR);				_globalVideoArray.push(POINT_LEVEL_EVAR);				_globalVideoArray.push(HEAVY_PHOTO_EVAR);				_globalVideoArray.push(HEAVY_CONTRIBUTOR_EVAR);				_globalVideoArray.push(AUTHEN_STATUS_EVAR);				_globalVideoArray.push(VIDEO_THRESHOLD);				_globalVideoArray.push("products");				_globalVideoArray.push("events");			}			else			{				_globalVideoArray.push(PLAYER_NAME_EVAR);				_globalVideoArray.push("products");				_globalVideoArray.push("events");			}			_globalVideoVars = _globalVideoArray.join(",");					s.Media.autoTrack = false;			callPageValues();		}				private function callPageValues():void		{			if(ExternalInterface.available)			{				try				{					s[SUB_SECTION_1_EVAR] = ExternalInterface.call("function () { return s.eVar1}");					s[SUB_SECTION_2_EVAR] = ExternalInterface.call("function () { return s.eVar2}");					s[SUB_SECTION_3_EVAR] = ExternalInterface.call("function () { return s.eVar3}");					s[PAGE_NAME_EVAR] = ExternalInterface.call("function () { return s.eVar4}");					setPageName(s[PAGE_NAME_EVAR]);					s[HOUR_OF_DAY_EVAR] = ExternalInterface.call("function () { return s.eVar11}");					s[DAY_OF_WEEK_EVAR] = ExternalInterface.call("function () { return s.eVar12}");					s[IS_WEEKDAY_EVAR] = ExternalInterface.call("function () { return s.eVar13}");					s[VISITOR_ID_EVAR] = ExternalInterface.call("function () { return s.eVar25}");					s[POINT_LEVEL_EVAR] = ExternalInterface.call("function () { return s.eVar41}");					s[HEAVY_PHOTO_EVAR] = ExternalInterface.call("function () { return s.eVar43}");					s[HEAVY_CONTRIBUTOR_EVAR] = ExternalInterface.call("function () { return s.eVar44}");					s[AUTHEN_STATUS_EVAR] = ExternalInterface.call("function () { return s.eVar50}");					_heavyVideoState = ExternalInterface.call("sGetHeavyVideo");				}				catch (e:Error)				{					Debug.trace("Error fetching page values: " + e.message, "DigitariaVideoTrack", null, Debug.ERROR);				}			}		}				private static function incrementTimer(e:TimerEvent):void		{			if(_timerState==true) _timeSinceLastTrack++;		}						/***** PRIORITY 1 FUNCTIONS *****/				public function setVideoName(name:String):void		{			if (name == null) name = "";            _videoName = s[VIDEO_NAME_EVAR] = name.split(" ").join("-").toLowerCase().split("\"").join("'").toLowerCase();			s[VIDEO_NAME_PROP] = _playerName + ":" + _videoName;		}				public function trackVideoStart(userInitiated:Boolean, videoID:String):void		{			s.linkTrackVars = _globalVideoVars + "," + VIDEO_NAME_PROP + "," + VIDEO_NAME_EVAR + "," +				VIDEO_GROUP_EVAR + "," + VIDEO_TOPIC_1_EVAR + "," + VIDEO_TOPIC_2_EVAR + "," +				VIDEO_TOPIC_3_EVAR + "," + HEAVY_VIDEO_EVAR + "," + SPONSOR_NAME_EVAR + "," +				SPONSOR_NAME_PROP + "," + VIDEO_VISITS_EVAR + "," + VIDEO_VISITS_PROP;					s[VIDEO_VISITS_EVAR] = s[VIDEO_VISITS_PROP] = "video";			var localEvents:String  = VID_TIME_EVENT + ","+ VID_START_EVENT;			if (userInitiated)			{				localEvents += "," + USER_INIT_EVENT;			}			var replay:Boolean = ( _playedVids.indexOf(videoID) >=0 );			if (!replay)			{				_playedVids.push(videoID);			}			else			{				localEvents += "," + REPLAY_EVENT;			}						setVideoProperties(localEvents, true);						doVideoTrack(_pageURL, "o", "video-start");						s.Media.open(_videoName, _vidLength, s[PLAYER_NAME_EVAR]);			s.Media.play(_videoName, 0);			startTimer();			s[VIDEO_VISITS_EVAR] = s[VIDEO_VISITS_PROP] = "";			s[VIDEO_NAME_PROP] = s[VIDEO_NAME_EVAR] = "";		}				private function setVideoProperties(events:String, setHeavy:Boolean=false):void		{			s.events = s.linkTrackEvents = events;			s[VIDEO_NAME_EVAR] = _videoName;			s[VIDEO_NAME_PROP] = _playerName + ":" + _videoName;				if(_isOnsite)			{				s[VIDEO_GROUP_EVAR] 	= _videoGroup;  // PRIORITY 2 to set these vars				s[VIDEO_TOPIC_1_EVAR] 	= _topic1; // PRIORITY 3 to set these vars				s[VIDEO_TOPIC_2_EVAR] 	= _topic2; // PRIORITY 3 to set these vars				s[VIDEO_TOPIC_3_EVAR] 	= _topic3; // PRIORITY 3 to set these vars				s[HEAVY_VIDEO_EVAR] 	= sGetHeavyVideo(setHeavy); //make js call				s[VIDEO_THRESHOLD]		= sGetVideoThreshold();				s[SPONSOR_NAME_EVAR]	= s[SPONSOR_NAME_PROP] = _playerSponsor;			}		}				private function doVideoTrack(pageURL:String="", arg1:String="", arg2:String="", arg3:Object=null, isMilestone:Boolean = false, seconds:Number = 0):void		{						callPageValues();						s.products =";;;;" + VID_TIME_EVENT + "=" + _timeSinceLastTrack;			if(isMilestone)			{				s.products += "|" + MILESTONE_EVENT + "=" + (_milestoneComplete * 100);			}			if (arg2 == "video-pause")			{				s.products += "|" + PAUSE_EVENT + "=" + seconds;			}				s.trackLink(pageURL, arg1, arg2, arg3);			resetTimeSinceLastTrack();			clearVars();		}			private function clearVars():void		{			s.events = s.products = s.linkTrackVars = s.linkTrackEvents = s[VIDEO_NAME_EVAR] = s[VIDEO_NAME_PROP] = s[VIDEO_GROUP_EVAR] = s[VIDEO_TOPIC_1_EVAR] = s[VIDEO_TOPIC_2_EVAR] = s[VIDEO_TOPIC_3_EVAR] = s[HEAVY_VIDEO_EVAR] = s[SPONSOR_NAME_EVAR] = s[SPONSOR_NAME_PROP] = ""; 			_milestoneComplete = 0;		}				private function sGetHeavyVideo(setHeavy:Boolean = false):String		{					if(PdkStringUtils.isExternalInterfaceAvailable())			{						if(setHeavy==true)				{					_heavyVideoState =	ExternalInterface.call("sGetHeavyVideo");					ExternalInterface.call("sSetHeavyVideo",1,_timeSinceLastTrack);				}				else				{					ExternalInterface.call("sSetHeavyVideo",0,_timeSinceLastTrack);				}			}			return 	_heavyVideoState;		}				private function sGetVideoThreshold():String		{			var returnThreshold:String = "notAvailable";			if(PdkStringUtils.isExternalInterfaceAvailable())			{				returnThreshold =	ExternalInterface.call("sGetVideoThreshold");			}			return returnThreshold;		}		/***** PRIORITY 2 FUNCTIONS *****/				public function setVideoLength(seconds:uint):void		{			_vidLength = seconds;			for (var i:uint = 0; i < VIDEO_GROUP_NAME_ARRAY.length; i++)			{					if (_vidLength < VIDEO_GROUP_LIMIT_ARRAY[i])					{						_videoGroup = s[VIDEO_GROUP_EVAR] = VIDEO_GROUP_NAME_ARRAY[i-1];						return;					}							}			//61 minutes or more would hit here			_videoGroup = s[VIDEO_GROUP_EVAR] = VIDEO_GROUP_NAME_ARRAY[i-1];		}					public function trackVidProgress(currentTime:Number, duration:Number):void		{			var videoOffset:Number = Math.floor(currentTime);            var videoDuration:Number = duration;            var increment:Number = Math.floor(videoDuration / 4);            var videoType:String;			if (this._videoTrackProgress == videoOffset)			{				return;			}			else			{				this._videoTrackProgress = videoOffset;			}						if(videoDuration>0)			{            				if (videoDuration <= _minSecondsVideoProgress)				{	            	//we're below the min for a video track  - so we have a short video					videoType = "short"				}				else				{					videoType = "long";				}			}			//lets see if we're hitting the 25% mark			if (videoOffset == increment && videoType=="long")			{				trackVideoMilestone(.25,false);        			}			else if (videoOffset == Number(increment * 2))			{                    				//lets see if we're at the 50% mark				if (videoType=="long")				{					trackVideoMilestone(.25,false);				}				else				{					trackVideoMilestone(.50,false);				}                             			}			else if (videoType == "long" && videoOffset == Number(increment * 3))			{                trackVideoMilestone(.25,false);			} 		}				public function trackVideoEnd(isComplete:Boolean):void		{			if (isComplete)			{				var milestoneSize:Number = .25;				if (_vidLength < _minSecondsVideoProgress)				{            		             milestoneSize = .50				}				trackVideoMilestone(milestoneSize, isComplete);			}			s.Media.close(_videoName);			stopTimer();					}				private function trackVideoMilestone(milestoneSize:Number = .25, isComplete:Boolean = false):void		{			s.linkTrackVars = s.Media.trackVars = _globalVideoVars + "," + VIDEO_NAME_EVAR + "," + VIDEO_GROUP_EVAR + 			"," + VIDEO_TOPIC_1_EVAR + "," + VIDEO_TOPIC_2_EVAR + "," + VIDEO_TOPIC_3_EVAR + "," + 			HEAVY_VIDEO_EVAR + "," + SPONSOR_NAME_EVAR + "," + SPONSOR_NAME_PROP;						var localEvents:String = VID_TIME_EVENT +","+ MILESTONE_EVENT;			if (isComplete)			{				localEvents += "," + VID_COMPLETE_EVENT;			}					setVideoProperties(localEvents)			_milestoneComplete += milestoneSize;						if(isComplete)			{				doVideoTrack(_pageURL, "o", "video-complete", null, true);			}			else			{				doVideoTrack(_pageURL, "o", "milestone", null, true);			}		}				public  function trackAdStart(adName:String = "", adPosition:String = "", adLength:Number = 0):void		{			if (adName.length > 0) _adName=adName.split(" ").join("-").toLowerCase().split("\"").join("'").toLowerCase();			if (adPosition.length > 0) _adPosition=adPosition;			_adLength = adLength;			 			var	localEvents:String = VID_TIME_EVENT +","+ AD_START_EVENT;			s.linkTrackVars = _globalVideoVars + ","+VID_TIME_EVENT + "," + AD_START_EVENT+ "," + SPONSOR_NAME_EVAR+ "," + AD_NAME_EVAR + "," + AD_POSITION_EVAR + "," + HEAVY_VIDEO_EVAR + "," + SPONSOR_NAME_PROP;			s[AD_NAME_EVAR] = _adName;			s[AD_POSITION_EVAR] = _adPosition;			s[VIDEO_NAME_PROP] = s[VIDEO_NAME_EVAR] = "";						setVideoProperties(localEvents);			doVideoTrack(_pageURL, "o", "ad-start", null, false);						s.Media.open(_adName,_adLength, s[PLAYER_NAME_EVAR]);			s.Media.play(_adName,0);			}		        public function trackAdEnd(isComplete:Boolean):void		{			if (isComplete)			{				s.Media.trackVars = s.linkTrackVars = _globalVideoVars + "," + VID_TIME_EVENT + "," + AD_COMPLETE_EVENT + "," + SPONSOR_NAME_EVAR + "," + AD_NAME_EVAR + "," + AD_POSITION_EVAR + "," + HEAVY_VIDEO_EVAR + "," + SPONSOR_NAME_PROP;								s[HEAVY_VIDEO_EVAR] = sGetHeavyVideo(); //make js call				s.events = s.Media.trackEvents = VID_TIME_EVENT+","+AD_COMPLETE_EVENT				s.products =";;;;" + VID_TIME_EVENT + "=" + _timeSinceLastTrack;					doVideoTrack(_pageURL, "o", "ad-complete", null, false);			}			s.Media.close(s[AD_NAME_EVAR]);			s[AD_NAME_EVAR] = s[AD_POSITION_EVAR] = "";			}				/***** PRIORITY 3 FUNCTIONS *****/        public function setVideoTopics(topic1:String = "", topic2:String = "", topic3:String = null):void		{			s[VIDEO_TOPIC_1_EVAR]	= _topic1 = topic1; // PRIORITY 3 to set these vars			s[VIDEO_TOPIC_2_EVAR] 	= _topic2 = topic2; // PRIORITY 3 to set these vars			s[VIDEO_TOPIC_3_EVAR] 	= _topic3 = topic3; // PRIORITY 3 to set these vars		}		        public function setShowName(name:String):void		{			s[VIDEO_TOPIC_1_EVAR]	= _topic1 = name; // PRIORITY 3 to set these vars		}				        public function setEpisodeName(name:String):void		{			s[VIDEO_TOPIC_2_EVAR] 	= _topic2 = name; // PRIORITY 3 to set these vars		}				public function setPlayerSponsor(name:String = ""):void		{			_playerSponsor = s[SPONSOR_NAME_EVAR] = s[SPONSOR_NAME_PROP] = name;		}   			public function setPageName(pageName:String):void		{			s.pageName = pageName;		}		        public function trackVideoPause(seconds:Number):void		{			s.linkTrackVars =   VIDEO_NAME_EVAR + "," + VIDEO_GROUP_EVAR + "," + HEAVY_VIDEO_EVAR+"," ;// global vars attach in setVideoProperties									s[HEAVY_VIDEO_EVAR] = sGetHeavyVideo(); //make js call			s[VIDEO_NAME_EVAR] = _videoName;			s[VIDEO_NAME_PROP] = _playerName + ":" + _videoName;			var	localEvents:String = VID_TIME_EVENT +","+ PAUSE_EVENT;									setVideoProperties(localEvents);							doVideoTrack(_pageURL, "o", "video-pause", null, false, Math.round(seconds));			s.Media.stop(_videoName,seconds);			stopTimer();			}		        public function trackVideoResume(seconds:Number):void		{ 			s.Media.play(_videoName, seconds);			resetTimeSinceLastTrack();			startTimer();		}				private function addProduct(product:String):void		{			s.products += ";" + product;		}				private function removeProduct(product:String):void		{			var productString:String = s.products;			var productIndex:uint = productString.indexOf(product, 0);			var newProduct:String = productString.slice(0, productIndex);				}				/*		private function setVideoTimeEvent(sec:Number):void		{			var otherProducts:String = "";			var origProducts:String = s.products;			var indexOf11:Number = origProducts.indexOf(";;;;" + VID_TIME_EVENT + "=") + 13;			var lenOfProducts:Number = origProducts.length;			if(indexOf11 > -1)			{								otherProducts =  origProducts.substring(indexOf11, lenOfProducts);			}			s.products = ";;;;" + VID_TIME_EVENT + "=" + Math.floor(sec) + otherProducts;		}		*/				private function resetTimeSinceLastTrack():void		{			_timeSinceLastTrack = 0;			}				private function startTimer():void		{			_timerState = true;			_lastTrackTimer.reset();			_lastTrackTimer.start();						}				private function stopTimer():void		{			_timerState = false;			_lastTrackTimer.stop();		}	}}class SingletonEnforcer {} 