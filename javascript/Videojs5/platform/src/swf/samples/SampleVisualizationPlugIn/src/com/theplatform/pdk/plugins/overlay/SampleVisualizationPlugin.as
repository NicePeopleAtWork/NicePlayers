package com.theplatform.pdk.plugins.overlay{	import com.theplatform.pdk.controllers.PlayerController;	import com.theplatform.pdk.data.LoadObject;	import com.theplatform.pdk.events.PdkBaseEvent;	import com.theplatform.pdk.events.PdkEvent;	import com.theplatform.pdk.events.PlayerEvent;	import com.theplatform.pdk.plugins.IPlugIn;		import flash.display.CapsStyle;	import flash.display.Graphics;	import flash.display.JointStyle;	import flash.display.Sprite;	import flash.display.LineScaleMode;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.media.SoundMixer;	import flash.system.Security;	import flash.utils.ByteArray;	import flash.utils.Timer;	public class SampleVisualizationPlugin extends Sprite implements IPlugIn	{		private var _controller:PlayerController;		private var _isPlaying:Boolean = false;		private var _isMuted:Boolean = false;		private var _soundLevel:int = 0;		private var _timer:Timer;				// to get access to the audio bytes, you need to explicitly load a policy		// file that's on the same server as the file.  E.g., if you're on a CDN, you		// need to load a policy file from that CDN.  So update the path below to match		// where your files are stored		private static const policyFileUrl:String = "http://ne.edgecastcdn.net/crossdomain.xml";				public function SampleVisualizationPlugin()		{			super();        	Security.loadPolicyFile(policyFileUrl);       	}				public function initialize(lo:LoadObject):void		{			_controller = (lo.controller as PlayerController);			_controller.addEventListener(PdkEvent.OnPlugInsComplete, finalize);		}				private function finalize(e:PdkEvent):void		{			_controller.removeEventListener(PdkEvent.OnPlugInsComplete, finalize);						_controller.setPlugInsAboveControls(false);						_isMuted = _controller.getMuteState();			_soundLevel = _controller.getSoundLevel();						_controller.addEventListener(PlayerEvent.OnMediaAreaChanged, redraw);			_controller.addEventListener(PdkEvent.OnMediaStart, mediaPlay);			_controller.addEventListener(PdkEvent.OnMediaUnpause, mediaPlay);			_controller.addEventListener(PdkEvent.OnMediaPause, mediaPause);			_controller.addEventListener(PdkEvent.OnMediaEnd, mediaPause);			_controller.addEventListener(PdkEvent.OnMute, mute);			_controller.addEventListener(PdkEvent.OnSetVolume, setVolume);						_timer = new Timer(50);			_timer.addEventListener(TimerEvent.TIMER, updateVisuals);			_timer.start();		}				private function mediaPlay(e:PdkEvent):void		{			_isPlaying = true;		}				private function mediaPause(e:PdkEvent):void		{			_isPlaying = false;		}				private function redraw(e:PdkBaseEvent):void		{			updateVisuals();		}				private function mute(e:PdkEvent):void		{			_isMuted = e.data as Boolean;		}				private function setVolume(e:PdkEvent):void		{			_soundLevel = e.data as Number;		}						private function updateVisuals(e:TimerEvent = null):void		{            var g:Graphics = this.graphics;            g.clear();            if (_isPlaying && !_isMuted && _soundLevel > 0)            {				var ma:Rectangle = _controller.getMediaArea();				var bytes:ByteArray = new ByteArray();				SoundMixer.computeSpectrum(bytes);		        g.lineStyle(1, 0xff0000, 1, true, LineScaleMode.NORMAL, CapsStyle.SQUARE, JointStyle.MITER);		        g.beginFill(0xff0000, _soundLevel / 100);		        g.moveTo(ma.x + 0.5, ma.y + ma.height - 0.5);				        for (var i:uint = 0; i < 256; i++)		        { 		            var lev:Number = bytes.readFloat();		            var x:Number = Math.round(ma.x + ((ma.width / 256) * i)) + 0.5;		            var y:Number = Math.round(ma.y + (ma.height / 2) + ((ma.height / 2) * lev)) + 0.5;		            g.lineTo(x, y);		        }		        g.lineTo(ma.x + ma.width - 0.5, ma.y + (ma.height / 2) + 0.5);		        g.lineTo(ma.x + ma.width - 0.5, ma.y + ma.height - 0.5);		        g.lineTo(ma.x + 0.5, ma.y + ma.height - 0.5);		        g.endFill();            }		}	}}