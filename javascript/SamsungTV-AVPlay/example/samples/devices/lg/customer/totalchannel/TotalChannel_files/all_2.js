(function() {
    function c(o, q) {
        var p = o[0],
            n = o[1],
            s = o[2],
            r = o[3];
        p = a(p, n, s, r, q[0], 7, -680876936);
        r = a(r, p, n, s, q[1], 12, -389564586);
        s = a(s, r, p, n, q[2], 17, 606105819);
        n = a(n, s, r, p, q[3], 22, -1044525330);
        p = a(p, n, s, r, q[4], 7, -176418897);
        r = a(r, p, n, s, q[5], 12, 1200080426);
        s = a(s, r, p, n, q[6], 17, -1473231341);
        n = a(n, s, r, p, q[7], 22, -45705983);
        p = a(p, n, s, r, q[8], 7, 1770035416);
        r = a(r, p, n, s, q[9], 12, -1958414417);
        s = a(s, r, p, n, q[10], 17, -42063);
        n = a(n, s, r, p, q[11], 22, -1990404162);
        p = a(p, n, s, r, q[12], 7, 1804603682);
        r = a(r, p, n, s, q[13], 12, -40341101);
        s = a(s, r, p, n, q[14], 17, -1502002290);
        n = a(n, s, r, p, q[15], 22, 1236535329);
        p = i(p, n, s, r, q[1], 5, -165796510);
        r = i(r, p, n, s, q[6], 9, -1069501632);
        s = i(s, r, p, n, q[11], 14, 643717713);
        n = i(n, s, r, p, q[0], 20, -373897302);
        p = i(p, n, s, r, q[5], 5, -701558691);
        r = i(r, p, n, s, q[10], 9, 38016083);
        s = i(s, r, p, n, q[15], 14, -660478335);
        n = i(n, s, r, p, q[4], 20, -405537848);
        p = i(p, n, s, r, q[9], 5, 568446438);
        r = i(r, p, n, s, q[14], 9, -1019803690);
        s = i(s, r, p, n, q[3], 14, -187363961);
        n = i(n, s, r, p, q[8], 20, 1163531501);
        p = i(p, n, s, r, q[13], 5, -1444681467);
        r = i(r, p, n, s, q[2], 9, -51403784);
        s = i(s, r, p, n, q[7], 14, 1735328473);
        n = i(n, s, r, p, q[12], 20, -1926607734);
        p = e(p, n, s, r, q[5], 4, -378558);
        r = e(r, p, n, s, q[8], 11, -2022574463);
        s = e(s, r, p, n, q[11], 16, 1839030562);
        n = e(n, s, r, p, q[14], 23, -35309556);
        p = e(p, n, s, r, q[1], 4, -1530992060);
        r = e(r, p, n, s, q[4], 11, 1272893353);
        s = e(s, r, p, n, q[7], 16, -155497632);
        n = e(n, s, r, p, q[10], 23, -1094730640);
        p = e(p, n, s, r, q[13], 4, 681279174);
        r = e(r, p, n, s, q[0], 11, -358537222);
        s = e(s, r, p, n, q[3], 16, -722521979);
        n = e(n, s, r, p, q[6], 23, 76029189);
        p = e(p, n, s, r, q[9], 4, -640364487);
        r = e(r, p, n, s, q[12], 11, -421815835);
        s = e(s, r, p, n, q[15], 16, 530742520);
        n = e(n, s, r, p, q[2], 23, -995338651);
        p = l(p, n, s, r, q[0], 6, -198630844);
        r = l(r, p, n, s, q[7], 10, 1126891415);
        s = l(s, r, p, n, q[14], 15, -1416354905);
        n = l(n, s, r, p, q[5], 21, -57434055);
        p = l(p, n, s, r, q[12], 6, 1700485571);
        r = l(r, p, n, s, q[3], 10, -1894986606);
        s = l(s, r, p, n, q[10], 15, -1051523);
        n = l(n, s, r, p, q[1], 21, -2054922799);
        p = l(p, n, s, r, q[8], 6, 1873313359);
        r = l(r, p, n, s, q[15], 10, -30611744);
        s = l(s, r, p, n, q[6], 15, -1560198380);
        n = l(n, s, r, p, q[13], 21, 1309151649);
        p = l(p, n, s, r, q[4], 6, -145523070);
        r = l(r, p, n, s, q[11], 10, -1120210379);
        s = l(s, r, p, n, q[2], 15, 718787259);
        n = l(n, s, r, p, q[9], 21, -343485551);
        o[0] = d(p, o[0]);
        o[1] = d(n, o[1]);
        o[2] = d(s, o[2]);
        o[3] = d(r, o[3])
    }

    function k(v, p, o, n, u, r) {
        p = d(d(p, v), d(n, r));
        return d((p << u) | (p >>> (32 - u)), o)
    }

    function a(p, o, v, u, n, r, q) {
        return k((o & v) | ((~o) & u), p, o, n, r, q)
    }

    function i(p, o, v, u, n, r, q) {
        return k((o & u) | (v & (~u)), p, o, n, r, q)
    }

    function e(p, o, v, u, n, r, q) {
        return k(o ^ v ^ u, p, o, n, r, q)
    }

    function l(p, o, v, u, n, r, q) {
        return k(v ^ (o | (~u)), p, o, n, r, q)
    }

    function j(q) {
        txt = "";
        var t = q.length,
            r = [1732584193, -271733879, -1732584194, 271733878],
            p;
        for (p = 64; p <= q.length; p += 64) {
            c(r, m(q.substring(p - 64, p)))
        }
        q = q.substring(p - 64);
        var o = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (p = 0; p < q.length; p++) {
            o[p >> 2] |= q.charCodeAt(p) << ((p % 4) << 3)
        }
        o[p >> 2] |= 128 << ((p % 4) << 3);
        if (p > 55) {
            c(r, o);
            for (p = 0; p < 16; p++) {
                o[p] = 0
            }
        }
        o[14] = t * 8;
        c(r, o);
        return r
    }

    function m(o) {
        var p = [],
            n;
        for (n = 0; n < 64; n += 4) {
            p[n >> 2] = o.charCodeAt(n) + (o.charCodeAt(n + 1) << 8) + (o.charCodeAt(n + 2) << 16) + (o.charCodeAt(n + 3) << 24)
        }
        return p
    }
    var h = "0123456789abcdef".split("");

    function f(q) {
        var p = "",
            o = 0;
        for (; o < 4; o++) {
            p += h[(q >> (o * 8 + 4)) & 15] + h[(q >> (o * 8)) & 15]
        }
        return p
    }

    function b(n) {
        for (var o = 0; o < n.length; o++) {
            n[o] = f(n[o])
        }
        return n.join("")
    }

    function g(n) {
        return b(j(n))
    }

    function d(o, n) {
        return (o + n) & 4294967295
    }
    if (g("hello") != "5d41402abc4b2a76b9719d911017c592") {
        function d(n, q) {
            var p = (n & 65535) + (q & 65535),
                o = (n >> 16) + (q >> 16) + (p >> 16);
            return (o << 16) | (p & 65535)
        }
    }
    window.md5 = g;
    testmd5 = function() {}
}());
/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function(window, undefined) {

    // Can't do this because several apps including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    // Support: Firefox 18+
    //"use strict";
    var
    // The deferred used on DOM ready
        readyList,

        // A central reference to the root jQuery(document)
        rootjQuery,

        // Support: IE<9
        // For `typeof node.method` instead of `node.method !== undefined`
        core_strundefined = typeof undefined,

        // Use the correct document accordingly with window argument (sandbox)
        document = window.document,
        location = window.location,

        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
        _$ = window.$,

        // [[Class]] -> type pairs
        class2type = {},

        // List of deleted data cache ids, so we can reuse them
        core_deletedIds = [],

        core_version = "1.9.1",

        // Save a reference to some core methods
        core_concat = core_deletedIds.concat,
        core_push = core_deletedIds.push,
        core_slice = core_deletedIds.slice,
        core_indexOf = core_deletedIds.indexOf,
        core_toString = class2type.toString,
        core_hasOwn = class2type.hasOwnProperty,
        core_trim = core_version.trim,

        // Define a local copy of jQuery
        jQuery = function(selector, context) {
            // The jQuery object is actually just the init constructor 'enhanced'
            return new jQuery.fn.init(selector, context, rootjQuery);
        },

        // Used for matching numbers
        core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

        // Used for splitting on whitespace
        core_rnotwhite = /\S+/g,

        // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

        // Match a standalone tag
        rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

        // JSON RegExp
        rvalidchars = /^[\],:{}\s]*$/,
        rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
        rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,

        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function(all, letter) {
            return letter.toUpperCase();
        },

        // The ready event handler
        completed = function(event) {

            // readyState === "complete" is good enough for us to call the dom ready in oldIE
            if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
                detach();
                jQuery.ready();
            }
        },
        // Clean-up method for dom ready events
        detach = function() {
            if (document.addEventListener) {
                document.removeEventListener("DOMContentLoaded", completed, false);
                window.removeEventListener("load", completed, false);

            } else {
                document.detachEvent("onreadystatechange", completed);
                window.detachEvent("onload", completed);
            }
        };

    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: core_version,

        constructor: jQuery,
        init: function(selector, context, rootjQuery) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
                return this;
            }

            // Handle HTML strings
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];

                } else {
                    match = rquickExpr.exec(selector);
                }

                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {

                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;

                        // scripts is true for back-compat
                        jQuery.merge(this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ));

                        // HANDLE: $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                // Properties of context are called as methods if possible
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);

                                    // ...and otherwise set as attributes
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }

                        return this;

                        // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById(match[2]);

                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        if (elem && elem.parentNode) {
                            // Handle the case where IE and Opera return items
                            // by name instead of ID
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector);
                            }

                            // Otherwise, we inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }

                        this.context = document;
                        this.selector = selector;
                        return this;
                    }

                    // HANDLE: $(expr, $(...))
                } else if (!context || context.jquery) {
                    return (context || rootjQuery).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor(context).find(selector);
                }

                // HANDLE: $(DOMElement)
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
            } else if (jQuery.isFunction(selector)) {
                return rootjQuery.ready(selector);
            }

            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }

            return jQuery.makeArray(selector, this);
        },

        // Start with an empty selector
        selector: "",

        // The default length of a jQuery object is 0
        length: 0,

        // The number of elements contained in the matched element set
        size: function() {
            return this.length;
        },

        toArray: function() {
            return core_slice.call(this);
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            return num == null ?

                // Return a 'clean' array
                this.toArray() :

                // Return just the object
                (num < 0 ? this[this.length + num] : this[num]);
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function(callback, args) {
            return jQuery.each(this, callback, args);
        },

        ready: function(fn) {
            // Add the callback
            jQuery.ready.promise().done(fn);

            return this;
        },

        slice: function() {
            return this.pushStack(core_slice.apply(this, arguments));
        },

        first: function() {
            return this.eq(0);
        },

        last: function() {
            return this.eq(-1);
        },

        eq: function(i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },

        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },

        end: function() {
            return this.prevObject || this.constructor(null);
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };

    // Give the init function the jQuery prototype for later instantiation
    jQuery.fn.init.prototype = jQuery.fn;

    jQuery.extend = jQuery.fn.extend = function() {
        var src, copyIsArray, copy, name, options, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }

        // extend jQuery itself if only one argument is passed
        if (length === i) {
            target = this;
            --i;
        }

        for (; i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];

                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);

                        // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };

    jQuery.extend({
        noConflict: function(deep) {
            if (window.$ === jQuery) {
                window.$ = _$;
            }

            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
            }

            return jQuery;
        },

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Hold (or release) the ready event
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },

        // Handle when the DOM is ready
        ready: function(wait) {

            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }

            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);

            // Trigger any bound ready events
            if (jQuery.fn.trigger) {
                jQuery(document).trigger("ready").off("ready");
            }
        },

        // See test/unit/core.js for details concerning isFunction.
        // Since version 1.3, DOM methods and functions like alert
        // aren't supported. They return false on IE (#2968).
        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },

        isArray: Array.isArray || function(obj) {
            return jQuery.type(obj) === "array";
        },

        isWindow: function(obj) {
            return obj != null && obj == obj.window;
        },

        isNumeric: function(obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },

        type: function(obj) {
            if (obj == null) {
                return String(obj);
            }
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[core_toString.call(obj)] || "object" :
                typeof obj;
        },

        isPlainObject: function(obj) {
            // Must be an Object.
            // Because of IE, we also have to check the presence of the constructor property.
            // Make sure that DOM nodes and window objects don't pass through, as well
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }

            try {
                // Not own constructor property must be Object
                if (obj.constructor &&
                    !core_hasOwn.call(obj, "constructor") &&
                    !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
            } catch (e) {
                // IE8,9 Will throw exceptions on certain host objects #9897
                return false;
            }

            // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.

            var key;
            for (key in obj) {}

            return key === undefined || core_hasOwn.call(obj, key);
        },

        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },

        error: function(msg) {
            throw new Error(msg);
        },

        // data: string of html
        // context (optional): If specified, the fragment will be created in this context, defaults to document
        // keepScripts (optional): If true, will include scripts passed in the html string
        parseHTML: function(data, context, keepScripts) {
            if (!data || typeof data !== "string") {
                return null;
            }
            if (typeof context === "boolean") {
                keepScripts = context;
                context = false;
            }
            context = context || document;

            var parsed = rsingleTag.exec(data),
                scripts = !keepScripts && [];

            // Single tag
            if (parsed) {
                return [context.createElement(parsed[1])];
            }

            parsed = jQuery.buildFragment([data], context, scripts);
            if (scripts) {
                jQuery(scripts).remove();
            }
            return jQuery.merge([], parsed.childNodes);
        },

        parseJSON: function(data) {

            if (data === null) {
                return data;
            }

            // Attempt to parse using the native JSON parser first
            if (window.JSON && window.JSON.parse) {
                try {
                    return window.JSON.parse(data);
                } catch (e) {
                    return null;
                }
            }

            if (typeof data === "string") {

                // Make sure leading/trailing whitespace is removed (IE can't handle it)
                data = jQuery.trim(data);

                if (data) {
                    // Make sure the incoming data is actual JSON
                    // Logic borrowed from http://json.org/json2.js
                    if (rvalidchars.test(data.replace(rvalidescape, "@")
                            .replace(rvalidtokens, "]")
                            .replace(rvalidbraces, ""))) {

                        return (new Function("return " + data))();
                    }
                }
            }

            jQuery.error("Invalid JSON: " + data);
        },

        // Cross-browser xml parsing
        parseXML: function(data) {
            var xml, tmp;
            if (!data || typeof data !== "string") {
                return null;
            }
            try {
                if (window.DOMParser) { // Standard
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, "text/xml");
                } else { // IE
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = "false";
                    xml.loadXML(data);
                }
            } catch (e) {
                xml = undefined;
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                jQuery.error("Invalid XML: " + data);
            }
            return xml;
        },

        noop: function() {},

        // Evaluates a script in a global context
        // Workarounds based on findings by Jim Driscoll
        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
        globalEval: function(data) {
            if (data && jQuery.trim(data)) {
                // We use execScript on Internet Explorer
                // We use an anonymous function so that context is window
                // rather than jQuery in Firefox
                (window.execScript || function(data) {
                    window["eval"].call(window, data);
                })(data);
            }
        },

        // Convert dashed to camelCase; used by the css and data modules
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },

        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },

        // args is for internal usage only
        each: function(obj, callback, args) {
            var value,
                i = 0,
                length = obj.length,
                isArray = isArraylike(obj);

            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);

                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);

                        if (value === false) {
                            break;
                        }
                    }
                }

                // A special, fast, case for the most common use of each
            } else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);

                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);

                        if (value === false) {
                            break;
                        }
                    }
                }
            }

            return obj;
        },

        // Use native String.trim function wherever possible
        trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
            function(text) {
                return text == null ?
                    "" :
                    core_trim.call(text);
            } :

            // Otherwise use our own trimming functionality
            function(text) {
                return text == null ?
                    "" :
                    (text + "").replace(rtrim, "");
            },

        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret,
                        typeof arr === "string" ? [arr] : arr
                    );
                } else {
                    core_push.call(ret, arr);
                }
            }

            return ret;
        },

        inArray: function(elem, arr, i) {
            var len;

            if (arr) {
                if (core_indexOf) {
                    return core_indexOf.call(arr, elem, i);
                }

                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

                for (; i < len; i++) {
                    // Skip accessing in sparse arrays
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }

            return -1;
        },

        merge: function(first, second) {
            var l = second.length,
                i = first.length,
                j = 0;

            if (typeof l === "number") {
                for (; j < l; j++) {
                    first[i++] = second[j];
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }

            first.length = i;

            return first;
        },

        grep: function(elems, callback, inv) {
            var retVal,
                ret = [],
                i = 0,
                length = elems.length;
            inv = !!inv;

            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i]);
                }
            }

            return ret;
        },

        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var value,
                i = 0,
                length = elems.length,
                isArray = isArraylike(elems),
                ret = [];

            // Go through the array, translating each of the items to their
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }

                // Go through every key on the object,
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            }

            // Flatten any nested arrays
            return core_concat.apply([], ret);
        },

        // A global GUID counter for objects
        guid: 1,

        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function(fn, context) {
            var args, proxy, tmp;

            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }

            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }

            // Simulated bind
            args = core_slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };

            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
        },

        // Multifunctional method to get and set values of a collection
        // The value/s can optionally be executed if it's a function
        access: function(elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0,
                length = elems.length,
                bulk = key == null;

            // Sets many values
            if (jQuery.type(key) === "object") {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                }

                // Sets one value
            } else if (value !== undefined) {
                chainable = true;

                if (!jQuery.isFunction(value)) {
                    raw = true;
                }

                if (bulk) {
                    // Bulk operations run against the entire set
                    if (raw) {
                        fn.call(elems, value);
                        fn = null;

                        // ...except when executing function values
                    } else {
                        bulk = fn;
                        fn = function(elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        };
                    }
                }

                if (fn) {
                    for (; i < length; i++) {
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }

            return chainable ?
                elems :

                // Gets
                bulk ?
                fn.call(elems) :
                length ? fn(elems[0], key) : emptyGet;
        },

        now: function() {
            return (new Date()).getTime();
        }
    });

    jQuery.ready.promise = function(obj) {
        if (!readyList) {

            readyList = jQuery.Deferred();

            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // we once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if (document.readyState === "complete") {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout(jQuery.ready);

                // Standards-based browsers support DOMContentLoaded
            } else if (document.addEventListener) {
                // Use the handy event callback
                document.addEventListener("DOMContentLoaded", completed, false);

                // A fallback to window.onload, that will always work
                window.addEventListener("load", completed, false);

                // If IE event model is used
            } else {
                // Ensure firing before onload, maybe late but safe also for iframes
                document.attachEvent("onreadystatechange", completed);

                // A fallback to window.onload, that will always work
                window.attachEvent("onload", completed);

                // If IE and not a frame
                // continually check to see if the document is ready
                var top = false;

                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {}

                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {

                            try {
                                // Use the trick by Diego Perini
                                // http://javascript.nwbox.com/IEContentLoaded/
                                top.doScroll("left");
                            } catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }

                            // detach all dom ready events
                            detach();

                            // and execute any waiting functions
                            jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    };

    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
    });

    function isArraylike(obj) {
        var length = obj.length,
            type = jQuery.type(obj);

        if (jQuery.isWindow(obj)) {
            return false;
        }

        if (obj.nodeType === 1 && length) {
            return true;
        }

        return type === "array" || type !== "function" &&
            (length === 0 ||
                typeof length === "number" && length > 0 && (length - 1) in obj);
    }

    // All jQuery objects should point back to these
    rootjQuery = jQuery(document);
    // String to Object options format cache
    var optionsCache = {};

    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function(options) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            (optionsCache[options] || createOptions(options)) :
            jQuery.extend({}, options);

        var // Flag to know if list is currently firing
            firing,
            // Last fire value (for non-forgettable lists)
            memory,
            // Flag to know if list was already fired
            fired,
            // End of the loop when firing
            firingLength,
            // Index of currently firing callback (modified by remove if needed)
            firingIndex,
            // First callback to fire (used internally by add and fireWith)
            firingStart,
            // Actual callback list
            list = [],
            // Stack of fire calls for repeatable lists
            stack = !options.once && [],
            // Fire callbacks
            fire = function(data) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for (; list && firingIndex < firingLength; firingIndex++) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false; // To prevent further calls using add
                        break;
                    }
                }
                firing = false;
                if (list) {
                    if (stack) {
                        if (stack.length) {
                            fire(stack.shift());
                        }
                    } else if (memory) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            },
            // Actual Callbacks object
            self = {
                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if (list) {
                        // First, we save the current length
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function(_, arg) {
                                var type = jQuery.type(arg);
                                if (type === "function") {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && type !== "string") {
                                    // Inspect recursively
                                    add(arg);
                                }
                            });
                        })(arguments);
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if (firing) {
                            firingLength = list.length;
                            // With memory, if we're not firing then
                            // we should call right away
                        } else if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                    return this;
                },
                // Remove a callback from the list
                remove: function() {
                    if (list) {
                        jQuery.each(arguments, function(_, arg) {
                            var index;
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1);
                                // Handle firing indexes
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function(fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
                },
                // Remove all callbacks from the list
                empty: function() {
                    list = [];
                    return this;
                },
                // Have the list do nothing anymore
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                // Is it disabled?
                disabled: function() {
                    return !list;
                },
                // Lock the list in its current state
                lock: function() {
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                // Is it locked?
                locked: function() {
                    return !stack;
                },
                // Call all callbacks with the given context and arguments
                fireWith: function(context, args) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    if (list && (!fired || stack)) {
                        if (firing) {
                            stack.push(args);
                        } else {
                            fire(args);
                        }
                    }
                    return this;
                },
                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith(this, arguments);
                    return this;
                },
                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };

        return self;
    };
    jQuery.extend({

        Deferred: function(func) {
            var tuples = [
                    // action, add listener, listener list, final state
                    ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", jQuery.Callbacks("memory")]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function(newDefer) {
                            jQuery.each(tuples, function(i, tuple) {
                                var action = tuple[0],
                                    fn = jQuery.isFunction(fns[i]) && fns[i];
                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[tuple[1]](function() {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise()
                                            .done(newDefer.resolve)
                                            .fail(newDefer.reject)
                                            .progress(newDefer.notify);
                                    } else {
                                        newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function(obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                },
                deferred = {};

            // Keep pipe for back-compat
            promise.pipe = promise.then;

            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2],
                    stateString = tuple[3];

                // promise[ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;

                        // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }

                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });

            // Make the deferred a promise
            promise.promise(deferred);

            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function(subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = core_slice.call(arguments),
                length = resolveValues.length,

                // the count of uncompleted subordinates
                remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,

                // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

                // Update function for both resolve and progress values
                updateFunc = function(i, contexts, values) {
                    return function(value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!(--remaining)) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                },

                progressValues, progressContexts, resolveContexts;

            // add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise()
                            .done(updateFunc(i, resolveContexts, resolveValues))
                            .fail(deferred.reject)
                            .progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }

            // if we're not waiting on anything, resolve the master
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }

            return deferred.promise();
        }
    });
    jQuery.support = (function() {

        var support, all, a,
            input, select, fragment,
            opt, eventName, isSupported, i,
            div = document.createElement("div");

        // Setup
        div.setAttribute("className", "t");
        TVA.putInnerHTML(div, "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>");

        // Support tests won't run in some limited or non-browser environments
        all = div.getElementsByTagName("*");
        a = div.getElementsByTagName("a")[0];
        if (!all || !a || !all.length) {
            return {};
        }

        // First batch of tests
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];

        a.style.cssText = "top:1px;float:left;opacity:.5";
        support = {
            // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
            getSetAttribute: div.className !== "t",

            // IE strips leading whitespace when .innerHTML is used
            leadingWhitespace: div.firstChild.nodeType === 3,

            // Make sure that tbody elements aren't automatically inserted
            // IE will insert them into empty tables
            tbody: !div.getElementsByTagName("tbody").length,

            // Make sure that link elements get serialized correctly by innerHTML
            // This requires a wrapper element in IE
            htmlSerialize: !!div.getElementsByTagName("link").length,

            // Get the style information from getAttribute
            // (IE uses .cssText instead)
            style: /top/.test(a.getAttribute("style")),

            // Make sure that URLs aren't manipulated
            // (IE normalizes it by default)
            hrefNormalized: a.getAttribute("href") === "/a",

            // Make sure that element opacity exists
            // (IE uses filter instead)
            // Use a regex to work around a WebKit issue. See #5145
            opacity: /^0.5/.test(a.style.opacity),

            // Verify style float existence
            // (IE uses styleFloat instead of cssFloat)
            cssFloat: !!a.style.cssFloat,

            // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
            checkOn: !!input.value,

            // Make sure that a selected-by-default option has a working selected property.
            // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
            optSelected: opt.selected,

            // Tests for enctype support on a form (#6743)
            enctype: !!document.createElement("form").enctype,

            // Makes sure cloning an html5 element does not cause problems
            // Where outerHTML is undefined, this still works
            html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",

            // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
            boxModel: document.compatMode === "CSS1Compat",

            // Will be defined later
            deleteExpando: true,
            noCloneEvent: true,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableMarginRight: true,
            boxSizingReliable: true,
            pixelPosition: false
        };

        // Make sure checked status is properly cloned
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;

        // Make sure that the options inside disabled selects aren't marked as disabled
        // (WebKit marks them as disabled)
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE<9
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }

        // Check if we can trust getAttribute("value")
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";

        // Check if an input maintains its value after becoming a radio
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";

        // #11217 - WebKit loses check when the name is after the checked attribute
        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");

        fragment = document.createDocumentFragment();
        fragment.appendChild(input);

        // Check if a disconnected checkbox will retain its checked
        // value of true after appended to the DOM (IE6/7)
        support.appendChecked = input.checked;

        // WebKit doesn't clone checked state correctly in fragments
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE<9
        // Opera does not clone events (and typeof div.attachEvent === undefined).
        // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
        if (div.attachEvent) {
            div.attachEvent("onclick", function() {
                support.noCloneEvent = false;
            });

            div.cloneNode(true).click();
        }

        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
        for (i in {
                submit: true,
                change: true,
                focusin: true
            }) {
            div.setAttribute(eventName = "on" + i, "t");

            support[i + "Bubbles"] = eventName in window || div.attributes[eventName].expando === false;
        }

        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        // Run tests that need a body at doc ready
        jQuery(function() {
            var container, marginDiv, tds,
                divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
                body = document.getElementsByTagName("body")[0];

            if (!body) {
                // Return for frameset docs that don't have a body
                return;
            }

            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

            body.appendChild(container).appendChild(div);

            // Support: IE8
            // Check if table cells still have offsetWidth/Height when they are set
            // to display:none and there are still other visible table cells in a
            // table row; if so, offsetWidth/Height are not reliable for use when
            // determining if an element has been hidden directly using
            // display:none (it is still safe to use offsets if a parent element is
            // hidden; don safety goggles and see bug #4512 for more information).
            TVA.putInnerHTML(div, "<table><tr><td></td><td>t</td></tr></table>");
            tds = div.getElementsByTagName("td");
            tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = (tds[0].offsetHeight === 0);

            tds[0].style.display = "";
            tds[1].style.display = "none";

            // Support: IE8
            // Check if empty table cells still have offsetWidth/Height
            support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);

            // Check box-sizing and margin behavior
            TVA.putInnerHTML(div, "");
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            support.boxSizing = (div.offsetWidth === 4);
            support.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== 1);

            // Use window.getComputedStyle because jsdom on node.js will break without it.
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                support.boxSizingReliable = (window.getComputedStyle(div, null) || {
                    width: "4px"
                }).width === "4px";

                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // Fails in WebKit before Feb 2011 nightlies
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";

                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
            }

            if (typeof div.style.zoom !== core_strundefined) {
                // Support: IE<8
                // Check if natively block-level elements act like inline-block
                // elements when setting their display to 'inline' and giving
                // them layout
                TVA.putInnerHTML(div, "");
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = (div.offsetWidth === 3);

                // Support: IE6
                // Check if elements with layout shrink-wrap their children
                div.style.display = "block";
                TVA.putInnerHTML(div, "<div></div>");
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = (div.offsetWidth !== 3);

                if (support.inlineBlockNeedsLayout) {
                    // Prevent IE 6 from affecting layout for positioned elements #11048
                    // Prevent IE from shrinking the body in IE 7 mode #12869
                    // Support: IE<8
                    body.style.zoom = 1;
                }
            }

            var jleak = body.removeChild(container);

            // Null elements to avoid leaks in IE
            container = div = tds = marginDiv = null;
        });

        // Null elements to avoid leaks in IE
        all = select = fragment = opt = a = input = null;

        return support;
    })();

    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        rmultiDash = /([A-Z])/g;

    function internalData(elem, name, data, pvt /* Internal Use Only */ ) {
        if (!jQuery.acceptData(elem)) {
            return;
        }

        var thisCache, ret,
            internalKey = jQuery.expando,
            getByName = typeof name === "string",

            // We have to handle DOM nodes and JS objects differently because IE6-7
            // can't GC object references properly across the DOM-JS boundary
            isNode = elem.nodeType,

            // Only DOM nodes need the global jQuery cache; JS object data is
            // attached directly to the object so GC can occur automatically
            cache = isNode ? jQuery.cache : elem,

            // Only defining an ID for JS objects if its cache already exists allows
            // the code to shortcut on the same path as a DOM node with no cache
            id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

        // Avoid doing any more work than we need to when trying to get data on an
        // object that has no data at all
        if ((!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined) {
            return;
        }

        if (!id) {
            // Only DOM nodes need a new unique ID for each element since their data
            // ends up in the global cache
            if (isNode) {
                elem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }

        if (!cache[id]) {
            cache[id] = {};

            // Avoids exposing jQuery metadata on plain JS objects when the object
            // is serialized using JSON.stringify
            if (!isNode) {
                cache[id].toJSON = jQuery.noop;
            }
        }

        // An object can be passed to jQuery.data instead of a key/value pair; this gets
        // shallow copied over onto the existing cache
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }

        thisCache = cache[id];

        // jQuery data() is stored in a separate object inside the object's internal data
        // cache in order to avoid key collisions between internal data and user-defined
        // data.
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }

            thisCache = thisCache.data;
        }

        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }

        // Check for both converted-to-camel and non-converted data property names
        // If a data property was specified
        if (getByName) {

            // First Try to find as-is property data
            ret = thisCache[name];

            // Test for null|undefined property data
            if (ret == null) {

                // Try to find the camelCased property
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            ret = thisCache;
        }

        return ret;
    }

    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }

        var i, l, thisCache,
            isNode = elem.nodeType,

            // See jQuery.data for more information
            cache = isNode ? jQuery.cache : elem,
            id = isNode ? elem[jQuery.expando] : jQuery.expando;

        // If there is already no cache entry for this object, there is no
        // purpose in continuing
        if (!cache[id]) {
            return;
        }

        if (name) {

            thisCache = pvt ? cache[id] : cache[id].data;

            if (thisCache) {

                // Support array or space separated string names for data keys
                if (!jQuery.isArray(name)) {

                    // try the string as a key before any manipulation
                    if (name in thisCache) {
                        name = [name];
                    } else {

                        // split the camel cased version by spaces unless a key with the spaces exists
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [name];
                        } else {
                            name = name.split(" ");
                        }
                    }
                } else {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }

                for (i = 0, l = name.length; i < l; i++) {
                    delete thisCache[name[i]];
                }

                // If there is no data left in the cache, we want to continue
                // and let the cache object itself get destroyed
                if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                    return;
                }
            }
        }

        // See jQuery.data for more information
        if (!pvt) {
            delete cache[id].data;

            // Don't destroy the parent cache unless the internal data object
            // had been the only thing left in it
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }

        // Destroy the cache
        if (isNode) {
            jQuery.cleanData([elem], true);

            // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
        } else if (jQuery.support.deleteExpando || cache != cache.window) {
            delete cache[id];

            // When all else fails, null
        } else {
            cache[id] = null;
        }
    }

    jQuery.extend({
        cache: {},

        // Unique for each copy of jQuery on the page
        // Non-digits removed to match rinlinejQuery
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""),

        // The following elements throw uncatchable exceptions if you
        // attempt to add expando properties to them.
        noData: {
            "embed": true,
            // Ban all objects except for Flash (which handle expandos)
            "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            "applet": true
        },

        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },

        data: function(elem, name, data) {
            return internalData(elem, name, data);
        },

        removeData: function(elem, name) {
            return internalRemoveData(elem, name);
        },

        // For internal use only.
        _data: function(elem, name, data) {
            return internalData(elem, name, data, true);
        },

        _removeData: function(elem, name) {
            return internalRemoveData(elem, name, true);
        },

        // A method for determining if a DOM node can handle the data expando
        acceptData: function(elem) {
            // Do not set data on non-element because it will not be cleared (#8335).
            if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                return false;
            }

            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];

            // nodes accept data unless otherwise specified; rejection can be conditional
            return !noData || noData !== true && elem.getAttribute("classid") === noData;
        }
    });

    jQuery.fn.extend({
        data: function(key, value) {
            var data = null;

            if (typeof key === "undefined") {
                if (this.length) {
                    var attr = this[0].attributes,
                        name;
                    data = jQuery.data(this[0]);

                    for (var i = 0, l = attr.length; i < l; i++) {
                        name = attr[i].name;

                        if (name.indexOf("data-") === 0) {
                            name = name.substr(5);
                            dataAttr(this[0], name, data[name]);
                        }
                    }
                }

                return data;

            } else if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }

            var parts = key.split(".");
            parts[1] = parts[1] ? "." + parts[1] : "";

            if (value === undefined) {
                data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);

                // Try to fetch any internally stored data first
                if (data === undefined && this.length) {
                    data = jQuery.data(this[0], key);
                    data = dataAttr(this[0], key, data);
                }

                return data === undefined && parts[1] ?
                    this.data(parts[0]) :
                    data;

            } else {
                return this.each(function() {
                    var $this = jQuery(this),
                        args = [parts[0], value];

                    $this.triggerHandler("setData" + parts[1] + "!", args);
                    jQuery.data(this, key, value);
                    $this.triggerHandler("changeData" + parts[1] + "!", args);
                });
            }
        },

        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });

    function dataAttr(elem, key, data) {
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            data = elem.getAttribute("data-" + key);

            if (typeof data === "string") {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                        data === "null" ? null :
                        !jQuery.isNaN(data) ? parseFloat(data) :
                        rbrace.test(data) ? jQuery.parseJSON(data) :
                        data;
                } catch (e) {}

                // Make sure we set the data so it isn't changed later
                jQuery.data(elem, key, data);

            } else {
                data = undefined;
            }
        }

        return data;
    }


    // checks a cache object for emptiness
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {

            // if the public data object is empty, the private is still empty
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== "toJSON") {
                return false;
            }
        }

        return true;
    }
    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;

            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },

        dequeue: function(elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function() {
                    jQuery.dequeue(elem, type);
                };

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }

            hooks.cur = fn;
            if (fn) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                // clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }

            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },

        // not intended for public consumption - generates a queueHooks object, or returns the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    jQuery._removeData(elem, type + "queue");
                    jQuery._removeData(elem, key);
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue(this, type, data);

                    // ensure a hooks for this queue
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        // Based off of the plugin by Clint Helfers, with permission.
        // http://blindsignals.com/index.php/2009/07/jquery-delay/
        delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";

            return this.queue(type, function(next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function() {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };

            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var nodeHook, boolHook,
        rclass = /[\t\r\n]/g,
        rreturn = /\r/g,
        rfocusable = /^(?:input|select|textarea|button|object)$/i,
        rclickable = /^(?:a|area)$/i,
        rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
        ruseDefault = /^(?:checked|selected)$/i,
        getSetAttribute = jQuery.support.getSetAttribute,
        getSetInput = jQuery.support.input;

    jQuery.fn.extend({
        attr: function(name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        },

        prop: function(name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp: function(name) {
            name = jQuery.propFix[name] || name;
            return this.each(function() {
                // try/catch handles cases where IE balks (such as removing a property on window)
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {}
            });
        },

        addClass: function(value) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = typeof value === "string" && value;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }

            if (proceed) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = (value || "").match(core_rnotwhite) || [];

                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ?
                        (" " + elem.className + " ").replace(rclass, " ") :
                        " "
                    );

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }
                        elem.className = jQuery.trim(cur);

                    }
                }
            }

            return this;
        },

        removeClass: function(value) {
            var classes, elem, cur, clazz, j,
                i = 0,
                len = this.length,
                proceed = arguments.length === 0 || typeof value === "string" && value;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];

                for (; i < len; i++) {
                    elem = this[i];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && (elem.className ?
                        (" " + elem.className + " ").replace(rclass, " ") :
                        ""
                    );

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : "";
                    }
                }
            }

            return this;
        },

        toggleClass: function(value, stateVal) {
            var type = typeof value,
                isBool = typeof stateVal === "boolean";

            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }

            return this.each(function() {
                if (type === "string") {
                    // toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery(this),
                        state = stateVal,
                        classNames = value.match(core_rnotwhite) || [];

                    while ((className = classNames[i++])) {
                        // check each className given, space separated list
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? "addClass" : "removeClass"](className);
                    }

                    // Toggle whole class name
                } else if (type === core_strundefined || type === "boolean") {
                    if (this.className) {
                        // store className if set
                        jQuery._data(this, "__className__", this.className);
                    }

                    // If the element has a class name or if we're passed "false",
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },

        hasClass: function(selector) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true;
                }
            }

            return false;
        },

        val: function(value) {
            var ret, hooks, isFunction,
                elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret;
                    }

                    ret = elem.value;

                    return typeof ret === "string" ?
                        // handle most common string cases
                        ret.replace(rreturn, "") :
                        // handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }

                return;
            }

            isFunction = jQuery.isFunction(value);

            return this.each(function(i) {
                var val,
                    self = jQuery(this);

                if (this.nodeType !== 1) {
                    return;
                }

                if (isFunction) {
                    val = value.call(this, i, self.val());
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {
                    // attributes.value is undefined in Blackberry 4.7 but
                    // uses .value. See #6932
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            select: {
                get: function(elem) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ?
                        max :
                        one ? index : 0;

                    // Loop through all the selected options
                    for (; i < max; i++) {
                        option = options[i];

                        // oldIE doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) &&
                            // Don't return options that are disabled or in a disabled optgroup
                            (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
                            (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

                            // Get the specific value for the option
                            value = jQuery(option).val();

                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }

                    return values;
                },

                set: function(elem, value) {
                    var values = jQuery.makeArray(value);

                    jQuery(elem).find("option").each(function() {
                        this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                    });

                    if (!values.length) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },

        attr: function(elem, name, value) {
            var hooks, notxml, ret,
                nType = elem.nodeType;

            // don't get/set attributes on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value);
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (notxml) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
            }

            if (value !== undefined) {

                if (value === null) {
                    jQuery.removeAttr(elem, name);

                } else if (hooks && notxml && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;

                } else {
                    elem.setAttribute(name, value + "");
                    return value;
                }

            } else if (hooks && notxml && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;

            } else {

                // In IE9+, Flash objects don't have .getAttribute (#12945)
                // Support: IE9+
                if (typeof elem.getAttribute !== core_strundefined) {
                    ret = elem.getAttribute(name);
                }

                // Non-existent attributes return null, we normalize to undefined
                return ret == null ?
                    undefined :
                    ret;
            }
        },

        removeAttr: function(elem, value) {
            var name, propName,
                i = 0,
                attrNames = value && value.match(core_rnotwhite);

            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name;

                    // Boolean attributes get special treatment (#10870)
                    if (rboolean.test(name)) {
                        // Set corresponding property to false for boolean attributes
                        // Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
                        if (!getSetAttribute && ruseDefault.test(name)) {
                            elem[jQuery.camelCase("default-" + name)] =
                                elem[propName] = false;
                        } else {
                            elem[propName] = false;
                        }

                        // See #9699 for explanation of this approach (setting first, then removal)
                    } else {
                        jQuery.attr(elem, name, "");
                    }

                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },

        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        // Setting the type on a radio button after the value resets the value in IE6-9
                        // Reset value to default in case type is set after value during creation
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },

        propFix: {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },

        prop: function(elem, name, value) {
            var ret, hooks, notxml,
                nType = elem.nodeType;

            // don't get/set properties on text, comment and attribute nodes
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

            if (notxml) {
                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;

                } else {
                    return (elem[name] = value);
                }

            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret;

                } else {
                    return elem[name];
                }
            }
        },

        propHooks: {
            tabIndex: {
                get: function(elem) {
                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    var attributeNode = elem.getAttributeNode("tabindex");

                    return attributeNode && attributeNode.specified ?
                        parseInt(attributeNode.value, 10) :
                        rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ?
                        0 :
                        undefined;
                }
            }
        }
    });

    // Hook for boolean attributes
    boolHook = {
        get: function(elem, name) {
            var
            // Use .prop to determine if this attribute is understood as boolean
                prop = jQuery.prop(elem, name),

                // Fetch it accordingly
                attr = typeof prop === "boolean" && elem.getAttribute(name),
                detail = typeof prop === "boolean" ?

                getSetInput && getSetAttribute ?
                attr != null :
                // oldIE fabricates an empty string for missing boolean attributes
                // and conflates checked/selected into attroperties
                ruseDefault.test(name) ?
                elem[jQuery.camelCase("default-" + name)] :
                !!attr :

                // fetch an attribute node for properties not recognized as boolean
                elem.getAttributeNode(name);

            return detail && detail.value !== false ?
                name.toLowerCase() :
                undefined;
        },
        set: function(elem, value, name) {
            if (value === false) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                // IE<8 needs the *property* name
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);

                // Use defaultChecked and defaultSelected for oldIE
            } else {
                elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
            }

            return name;
        }
    };

    // fix oldIE value attroperty
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return jQuery.nodeName(elem, "input") ?

                    // Ignore the value *property* by using defaultValue
                    elem.defaultValue :

                    ret && ret.specified ? ret.value : undefined;
            },
            set: function(elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    // Does not return so that setAttribute is also used
                    elem.defaultValue = value;
                } else {
                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }

    // IE6/7 do not support getting/setting some attributes with get/setAttribute
    if (!getSetAttribute) {

        // Use this for any attribute in IE6/7
        // This fixes almost every IE6/7 issue
        nodeHook = jQuery.valHooks.button = {
            get: function(elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && (name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified) ?
                    ret.value :
                    undefined;
            },
            set: function(elem, value, name) {
                // Set the existing or create a new attribute node
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(
                        (ret = elem.ownerDocument.createAttribute(name))
                    );
                }

                ret.value = value += "";

                // Break association with cloned elements by also using setAttribute (#9646)
                return name === "value" || value === elem.getAttribute(name) ?
                    value :
                    undefined;
            }
        };

        // Set contenteditable to false on removals(#10429)
        // Setting to empty string throws an error as an invalid value
        jQuery.attrHooks.contenteditable = {
            get: nodeHook.get,
            set: function(elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name);
            }
        };

        // Set width and height to auto instead of 0 on empty string( Bug #8150 )
        // This is for removals
        jQuery.each(["width", "height"], function(i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                set: function(elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value;
                    }
                }
            });
        });
    }


    // Some attributes require a special call on IE
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if (!jQuery.support.hrefNormalized) {
        jQuery.each(["href", "src", "width", "height"], function(i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                get: function(elem) {
                    var ret = elem.getAttribute(name, 2);
                    return ret == null ? undefined : ret;
                }
            });
        });

        // href/src property should get the full normalized URL (#10299/#12915)
        jQuery.each(["href", "src"], function(i, name) {
            jQuery.propHooks[name] = {
                get: function(elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }

    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get: function(elem) {
                // Return undefined in the case of empty string
                // Note: IE uppercases css property names, but if we were to .toLowerCase()
                // .cssText, that would destroy case senstitivity in URL's, like in "background"
                return elem.style.cssText || undefined;
            },
            set: function(elem, value) {
                return (elem.style.cssText = value + "");
            }
        };
    }

    // Safari mis-reports the default selected property of an option
    // Accessing the parent's selectedIndex property fixes it
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
            get: function(elem) {
                var parent = elem.parentNode;

                if (parent) {
                    parent.selectedIndex;

                    // Make sure that it also works with optgroups, see #5701
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }

    // IE6/7 call enctype encoding
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding";
    }

    // Radios and checkboxes getter/setter
    if (!jQuery.support.checkOn) {
        jQuery.each(["radio", "checkbox"], function() {
            jQuery.valHooks[this] = {
                get: function(elem) {
                    // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                    return elem.getAttribute("value") === null ? "on" : elem.value;
                }
            };
        });
    }
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
                }
            }
        });
    });
    var rformElems = /^(?:input|select|textarea)$/i,
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

        global: {},

        add: function(elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn,
                special, eventHandle, handleObj,
                handlers, type, namespaces, origType,
                elemData = jQuery._data(elem);

            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
                        jQuery.event.dispatch.apply(eventHandle.elem, arguments) :
                        undefined;
                };
                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                eventHandle.elem = elem;
            }

            // Handle multiple events separated by a space
            // jQuery(...).bind("mouseover mouseout", fn);
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener/attachEvent if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        // Bind the global event handler to the element
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);

                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }

            // Nullify elem to prevent memory leaks in IE
            elem = null;
        },

        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp,
                origCount, t, events,
                special, handlers, type,
                namespaces, origType,
                elemData = jQuery.hasData(elem) && jQuery._data(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                }
            }

            // Remove the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;

                // removeData also checks for emptiness and clears the expando if empty
                // so use it instead of delete
                jQuery._removeData(elem, "events");
            }
        },

        trigger: function(event, data, elem, onlyHandlers) {
            var handle, ontype, cur,
                bubbleType, special, tmp, i,
                eventPath = [elem || document],
                type = core_hasOwn.call(event, "type") ? event.type : event,
                namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

            cur = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf(".") >= 0) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);

            event.isTrigger = true;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [event] :
                jQuery.makeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery handler
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) &&
                    !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Can't use an .isFunction() check here because IE6/7 fails that test.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {
                            // IE<9 dies on focus/blur to hidden element (#1486,#12518)
                            // only reproducible on winXP IE8 native, not IE9 in IE8 mode
                        }
                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        dispatch: function(event) {

            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event);

            var i, ret, handleObj, matched, j,
                handlerQueue = [],
                args = core_slice.call(arguments),
                handlers = (jQuery._data(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

                    // Triggered event must either 1) have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler)
                            .apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },

        handlers: function(event, handlers) {
            var sel, handleObj, matches, i,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

                for (; cur != this; cur = cur.parentNode || this) {

                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";

                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ?
                                    jQuery(sel, this).index(cur) >= 0 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }

            return handlerQueue;
        },

        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }

            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy,
                type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[type];

            if (!fixHook) {
                this.fixHooks[type] = fixHook =
                    rmouseEvent.test(type) ? this.mouseHooks :
                    rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

            event = new jQuery.Event(originalEvent);

            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }

            // Support: IE<9
            // Fix target property (#1925)
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }

            // Support: Chrome 23+, Safari?
            // Target should not be a text node (#504, #13143)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }

            // Support: IE<9
            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
            event.metaKey = !!event.metaKey;

            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

        fixHooks: {},

        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {

                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },

        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, original) {
                var body, eventDoc, doc,
                    button = original.button,
                    fromElement = original.fromElement;

                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }

                // Add relatedTarget, if necessary
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }

                return event;
            }
        },

        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false;
                    }
                }
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if (this !== document.activeElement && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {
                            // Support: IE<9
                            // If we error on focus to hidden element (#1486, #12518),
                            // let .trigger() run the handlers
                        }
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === document.activeElement && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },

            beforeunload: {
                postDispatch: function(event) {

                    // Even when returnValue equals to undefined Firefox will still show alert
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },

        simulate: function(type, elem, event, bubble) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(
                new jQuery.Event(),
                event, {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                }
            );
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };

    jQuery.removeEvent = document.removeEventListener ?
        function(elem, type, handle) {
            if (elem.removeEventListener) {
                elem.removeEventListener(type, handle, false);
            }
        } :
        function(elem, type, handle) {
            var name = "on" + type;

            if (elem.detachEvent) {

                // #8545, #7054, preventing memory leaks for custom events in IE6-8
                // detachEvent needed property on element, by name of that event, to properly expose it to GC
                if (typeof elem[name] === core_strundefined) {
                    elem[name] = null;
                }

                elem.detachEvent(name, handle);
            }
        };

    jQuery.Event = function(src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false ||
                src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[jQuery.expando] = true;
    };

    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }

            // If preventDefault exists, run it on the original event
            if (e.preventDefault) {
                e.preventDefault();

                // Support: IE
                // Otherwise set the returnValue property of the original event to false
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            // If stopPropagation exists, run it on the original event
            if (e.stopPropagation) {
                e.stopPropagation();
            }

            // Support: IE
            // Set the cancelBubble property of the original event to true
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };

    // Create mouseenter/leave events using mouseover/out and event-time checks
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,

            handle: function(event) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

    // IE submit delegation
    if (!jQuery.support.submitBubbles) {

        jQuery.event.special.submit = {
            setup: function() {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }

                // Lazy-add a submit handler when a descendant form may potentially be submitted
                jQuery.event.add(this, "click._submit keypress._submit", function(e) {
                    // Node name check avoids a VML-related crash in IE (#9807)
                    var elem = e.target,
                        form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !jQuery._data(form, "submitBubbles")) {
                        jQuery.event.add(form, "submit._submit", function(event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, "submitBubbles", true);
                    }
                });
                // return undefined since we don't need an event listener
            },

            postDispatch: function(event) {
                // If form was submitted by the user, bubble the event up the tree
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true);
                    }
                }
            },

            teardown: function() {
                // Only need this for delegated form submit events
                if (jQuery.nodeName(this, "form")) {
                    return false;
                }

                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                jQuery.event.remove(this, "._submit");
            }
        };
    }

    // IE change delegation and checkbox/radio fix
    if (!jQuery.support.changeBubbles) {

        jQuery.event.special.change = {

            setup: function() {

                if (rformElems.test(this.nodeName)) {
                    // IE doesn't fire change on a check/radio until blur; trigger it on click
                    // after a propertychange. Eat the blur-change in special.change.handle.
                    // This still fires onchange a second time for check/radio after blur.
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function(event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, "click._change", function(event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            // Allow triggered, simulated change events (#11500)
                            jQuery.event.simulate("change", this, event, true);
                        });
                    }
                    return false;
                }
                // Delegated event; lazy-add a change handler on descendant inputs
                jQuery.event.add(this, "beforeactivate._change", function(e) {
                    var elem = e.target;

                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function(event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true);
                    }
                });
            },

            handle: function(event) {
                var elem = event.target;

                // Swallow native change events from checkbox/radio, we already triggered them above
                if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },

            teardown: function() {
                jQuery.event.remove(this, "._change");

                return !rformElems.test(this.nodeName);
            }
        };
    }

    // Create "bubbling" focus and blur events
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {

            // Attach a single capturing handler while someone wants focusin/focusout
            var attaches = 0,
                handler = function(event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };

            jQuery.event.special[fix] = {
                setup: function() {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown: function() {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }

    jQuery.fn.extend({

        on: function(types, selector, data, fn, /*INTERNAL*/ one) {
            var type, origFn;

            // Types can be a map of types/handlers
            if (typeof types === "object") {
                // ( types-Object, selector, data )
                if (typeof selector !== "string") {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }

            if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === "string") {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }

            if (one === 1) {
                origFn = fn;
                fn = function(event) {
                    // Can use an empty set, since event contains the info
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function() {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function(types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if (typeof types === "object") {
                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        },

        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },

        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },

        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    /*!
     * Sizzle CSS Selector Engine
     * Copyright 2012 jQuery Foundation and other contributors
     * Released under the MIT license
     * http://sizzlejs.com/
     */
    (function(window, undefined) {

        var i,
            cachedruns,
            Expr,
            getText,
            isXML,
            compile,
            hasDuplicate,
            outermostContext,

            // Local document vars
            setDocument,
            document,
            docElem,
            documentIsXML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,
            sortOrder,

            // Instance-specific data
            expando = "sizzle" + -(new Date()),
            preferredDoc = window.document,
            support = {},
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),

            // General-purpose constants
            strundefined = typeof undefined,
            MAX_NEGATIVE = 1 << 31,

            // Array methods
            arr = [],
            pop = arr.pop,
            push = arr.push,
            slice = arr.slice,
            // Use a stripped-down indexOf if we can't use a native one
            indexOf = arr.indexOf || function(elem) {
                var i = 0,
                    len = this.length;
                for (; i < len; i++) {
                    if (this[i] === elem) {
                        return i;
                    }
                }
                return -1;
            },


            // Regular expressions

            // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
            whitespace = "[\\x20\\t\\r\\n\\f]",
            // http://www.w3.org/TR/css3-syntax/#characters
            characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

            // Loosely modeled on CSS identifier characters
            // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
            // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
            identifier = characterEncoding.replace("w", "w#"),

            // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
            operators = "([*^$|!~]?=)",
            attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
            "*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

            // Prefer arguments quoted,
            //   then not containing pseudos/brackets,
            //   then attribute selectors/non-parenthetical expressions,
            //   then anything else
            // These preferences are here to reduce the number of selectors
            //   needing tokenize in the PSEUDO preFilter
            pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)",

            // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),

            matchExpr = {
                "ID": new RegExp("^#(" + characterEncoding + ")"),
                "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
                "NAME": new RegExp("^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]"),
                "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                "ATTR": new RegExp("^" + attributes),
                "PSEUDO": new RegExp("^" + pseudos),
                "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                    "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                    "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                // For use in libraries implementing .is()
                // We use this for POS matching in `select`
                "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            },

            rsibling = /[\x20\t\r\n\f]*[+~]/,

            rnative = /^[^{]+\{\s*\[native code/,

            // Easily-parseable/retrievable ID or TAG or CLASS selectors
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,

            rescape = /'|\\/g,
            rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

            // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
            runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
            funescape = function(_, escaped) {
                var high = "0x" + escaped - 0x10000;
                // NaN means non-codepoint
                return high !== high ?
                    escaped :
                    // BMP codepoint
                    high < 0 ?
                    String.fromCharCode(high + 0x10000) :
                    // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
            };

        // Use a stripped-down slice if we can't use a native one
        try {
            slice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;
        } catch (e) {
            slice = function(i) {
                var elem,
                    results = [];
                while ((elem = this[i++])) {
                    results.push(elem);
                }
                return results;
            };
        }

        /**
         * For feature detection
         * @param {Function} fn The function to test for native support
         */
        function isNative(fn) {
            return rnative.test(fn + "");
        }

        /**
         * Create key-value caches of limited size
         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */
        function createCache() {
            var cache,
                keys = [];

            return (cache = function(key, value) {
                // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                if (keys.push(key += " ") > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                }
                return (cache[key] = value);
            });
        }

        /**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }

        /**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */
        function assert(fn) {
            var div = document.createElement("div");

            try {
                return fn(div);
            } catch (e) {
                return false;
            } finally {
                // release memory in IE
                div = null;
            }
        }

        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType,
                // QSA vars
                i, groups, old, nid, newContext, newSelector;

            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }

            context = context || document;
            results = results || [];

            if (!selector || typeof selector !== "string") {
                return results;
            }

            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }

            if (!documentIsXML && !seed) {

                // Shortcuts
                if ((match = rquickExpr.exec(selector))) {
                    // Speed-up: Sizzle("#ID")
                    if ((m = match[1])) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            // Check parentNode to catch when Blackberry 4.6 returns
                            // nodes that are no longer in the document #6963
                            if (elem && elem.parentNode) {
                                // Handle the case where IE, Opera, and Webkit return items
                                // by name instead of ID
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            // Context is not a document
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) &&
                                contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }

                        // Speed-up: Sizzle("TAG")
                    } else if (match[2]) {
                        push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
                        return results;

                        // Speed-up: Sizzle(".CLASS")
                    } else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {
                        push.apply(results, slice.call(context.getElementsByClassName(m), 0));
                        return results;
                    }
                }

                // QSA path
                if (support.qsa && !rbuggyQSA.test(selector)) {
                    old = true;
                    nid = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;

                    // qSA works strangely on Element-rooted queries
                    // We can work around this by specifying an extra ID on the root
                    // and working up from there (Thanks to Andrew Dupont for the technique)
                    // IE 8 doesn't work on object elements
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);

                        if ((old = context.getAttribute("id"))) {
                            nid = old.replace(rescape, "\\$&");
                        } else {
                            context.setAttribute("id", nid);
                        }
                        nid = "[id='" + nid + "'] ";

                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",");
                    }

                    if (newSelector) {
                        try {
                            push.apply(results, slice.call(newContext.querySelectorAll(
                                newSelector
                            ), 0));
                            return results;
                        } catch (qsaError) {} finally {
                            if (!old) {
                                context.removeAttribute("id");
                            }
                        }
                    }
                }
            }

            // All others
            return select(selector.replace(rtrim, "$1"), context, results, seed);
        }

        /**
         * Detect xml
         * @param {Element|Object} elem An element or a document
         */
        isXML = Sizzle.isXML = function(elem) {
            // documentElement is verified for cases where it doesn't yet exist
            // (such as loading iframes in IE - #4833)
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };

        /**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
        setDocument = Sizzle.setDocument = function(node) {
            var doc = node ? node.ownerDocument || node : preferredDoc;

            // If no document and documentElement is available, return
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }

            // Set our document
            document = doc;
            docElem = doc.documentElement;

            // Support tests
            documentIsXML = isXML(doc);

            // Check if getElementsByTagName("*") returns only elements
            support.tagNameNoComments = assert(function(div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length;
            });

            // Check if attributes should be retrieved by attribute nodes
            support.attributes = assert(function(div) {
                TVA.putInnerHTML(div, "<select></select>");
                var type = typeof div.lastChild.getAttribute("multiple");
                // IE8 returns a string for some attributes even when not present
                return type !== "boolean" && type !== "string";
            });

            // Check if getElementsByClassName can be trusted
            support.getByClassName = assert(function(div) {
                // Opera can't find a second classname (in 9.6)
                TVA.putInnerHTML(div, "<div class='hidden e'></div><div class='hidden'></div>");
                if (!div.getElementsByClassName || !div.getElementsByClassName("e").length) {
                    return false;
                }

                // Safari 3.2 caches class attributes and doesn't catch changes
                div.lastChild.className = "e";
                return div.getElementsByClassName("e").length === 2;
            });

            // Check if getElementById returns elements by name
            // Check if getElementsByName privileges form controls or returns elements by ID
            support.getByName = assert(function(div) {
                // Inject content
                div.id = expando + 0;
                TVA.putInnerHTML(div, "<a name='" + expando + "'></a><div name='" + expando + "'></div>");
                docElem.insertBefore(div, docElem.firstChild);

                // Test
                var pass = doc.getElementsByName &&
                    // buggy browsers will return fewer than the correct 2
                    doc.getElementsByName(expando).length === 2 +
                    // buggy browsers will return more than the correct 0
                    doc.getElementsByName(expando + 0).length;
                support.getIdNotName = !doc.getElementById(expando);

                // Cleanup
                var jleak = docElem.removeChild(div);

                return pass;
            });

            // IE6/7 return modified attributes
            Expr.attrHandle = assert(function(div) {
                TVA.putInnerHTML(div, "<a href='#'></a>");
                return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
                    div.firstChild.getAttribute("href") === "#";
            }) ? {} : {
                "href": function(elem) {
                    return elem.getAttribute("href", 2);
                },
                "type": function(elem) {
                    return elem.getAttribute("type");
                }
            };

            // ID find and filter
            if (support.getIdNotName) {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && !documentIsXML) {
                        var m = context.getElementById(id);
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document #6963
                        return m && m.parentNode ? [m] : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        return elem.getAttribute("id") === attrId;
                    };
                };
            } else {
                Expr.find["ID"] = function(id, context) {
                    if (typeof context.getElementById !== strundefined && !documentIsXML) {
                        var m = context.getElementById(id);

                        return m ?
                            m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ? [m] :
                            undefined : [];
                    }
                };
                Expr.filter["ID"] = function(id) {
                    var attrId = id.replace(runescape, funescape);
                    return function(elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId;
                    };
                };
            }

            // Tag
            Expr.find["TAG"] = support.tagNameNoComments ?
                function(tag, context) {
                    if (typeof context.getElementsByTagName !== strundefined) {
                        return context.getElementsByTagName(tag);
                    }
                } :
                function(tag, context) {
                    var elem,
                        tmp = [],
                        i = 0,
                        results = context.getElementsByTagName(tag);

                    // Filter out possible comments
                    if (tag === "*") {
                        while ((elem = results[i++])) {
                            if (elem.nodeType === 1) {
                                tmp.push(elem);
                            }
                        }

                        return tmp;
                    }
                    return results;
                };

            // Name
            Expr.find["NAME"] = support.getByName && function(tag, context) {
                if (typeof context.getElementsByName !== strundefined) {
                    return context.getElementsByName(name);
                }
            };

            // Class
            Expr.find["CLASS"] = support.getByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== strundefined && !documentIsXML) {
                    return context.getElementsByClassName(className);
                }
            };

            // QSA and matchesSelector support

            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
            rbuggyMatches = [];

            // qSa(:focus) reports false when true (Chrome 21),
            // no need to also add to buggyMatches since matches checks buggyQSA
            // A support test would require too much code (would include document ready)
            rbuggyQSA = [":focus"];

            if ((support.qsa = isNative(doc.querySelectorAll))) {
                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function(div) {
                    // Select is set to empty string on purpose
                    // This is to test IE's treatment of not explictly
                    // setting a boolean content attribute,
                    // since its presence should be enough
                    // http://bugs.jquery.com/ticket/12359
                    TVA.putInnerHTML(div, "<select><option selected=''></option></select>");

                    // IE8 - Some boolean attributes are not treated correctly
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
                    }

                    // Webkit/Opera - :checked should return selected option elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked");
                    }
                });

                assert(function(div) {

                    // Opera 10-12/IE8 - ^= $= *= and empty values
                    // Should not select anything
                    TVA.putInnerHTML(div, "<input type='hidden' i=''/>");
                    if (div.querySelectorAll("[i^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\"\"|'')");
                    }

                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                    // IE8 throws error here and will not see later tests
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled");
                    }

                    // Opera 10-11 does not throw on post-comma invalid pseudos
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:");
                });
            }

            if ((support.matchesSelector = isNative((matches = docElem.matchesSelector ||
                    docElem.mozMatchesSelector ||
                    docElem.webkitMatchesSelector ||
                    docElem.oMatchesSelector ||
                    docElem.msMatchesSelector)))) {

                assert(function(div) {
                    // Check to see if it's possible to do matchesSelector
                    // on a disconnected node (IE 9)
                    support.disconnectedMatch = matches.call(div, "div");

                    // This should fail with an exception
                    // Gecko does not error, returns false instead
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos);
                });
            }

            rbuggyQSA = new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = new RegExp(rbuggyMatches.join("|"));

            // Element contains another
            // Purposefully does not implement inclusive descendent
            // As in, an element does not contain itself
            contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
                function(a, b) {
                    var adown = a.nodeType === 9 ? a.documentElement : a,
                        bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && (
                        adown.contains ?
                        adown.contains(bup) :
                        a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                    ));
                } :
                function(a, b) {
                    if (b) {
                        while ((b = b.parentNode)) {
                            if (b === a) {
                                return true;
                            }
                        }
                    }
                    return false;
                };

            // Document order sorting
            sortOrder = docElem.compareDocumentPosition ?
                function(a, b) {
                    var compare;

                    if (a === b) {
                        hasDuplicate = true;
                        return 0;
                    }

                    if ((compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b))) {
                        if (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {
                            if (a === doc || contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === doc || contains(preferredDoc, b)) {
                                return 1;
                            }
                            return 0;
                        }
                        return compare & 4 ? -1 : 1;
                    }

                    return a.compareDocumentPosition ? -1 : 1;
                } :
                function(a, b) {
                    var cur,
                        i = 0,
                        aup = a.parentNode,
                        bup = b.parentNode,
                        ap = [a],
                        bp = [b];

                    // Exit early if the nodes are identical
                    if (a === b) {
                        hasDuplicate = true;
                        return 0;

                        // Parentless nodes are either documents or disconnected
                    } else if (!aup || !bup) {
                        return a === doc ? -1 :
                            b === doc ? 1 :
                            aup ? -1 :
                            bup ? 1 :
                            0;

                        // If the nodes are siblings, we can do a quick check
                    } else if (aup === bup) {
                        return siblingCheck(a, b);
                    }

                    // Otherwise we need full lists of their ancestors for comparison
                    cur = a;
                    while ((cur = cur.parentNode)) {
                        ap.unshift(cur);
                    }
                    cur = b;
                    while ((cur = cur.parentNode)) {
                        bp.unshift(cur);
                    }

                    // Walk down the tree looking for a discrepancy
                    while (ap[i] === bp[i]) {
                        i++;
                    }

                    return i ?
                        // Do a sibling check if the nodes have a common ancestor
                        siblingCheck(ap[i], bp[i]) :

                        // Otherwise nodes in our document sort first
                        ap[i] === preferredDoc ? -1 :
                        bp[i] === preferredDoc ? 1 :
                        0;
                };

            // Always assume the presence of duplicates if sort doesn't
            // pass them to our comparison function (as in Google Chrome).
            hasDuplicate = false;
            [0, 0].sort(sortOrder);
            support.detectDuplicates = hasDuplicate;

            return document;
        };

        Sizzle.matches = function(expr, elements) {
            return Sizzle(expr, null, null, elements);
        };

        Sizzle.matchesSelector = function(elem, expr) {
            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }

            // Make sure that attribute selectors are quoted
            expr = expr.replace(rattributeQuotes, "='$1']");

            // rbuggyQSA always contains :focus, so no need for an existence check
            if (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {
                try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (ret || support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {}
            }

            return Sizzle(expr, document, null, [elem]).length > 0;
        };

        Sizzle.contains = function(context, elem) {
            // Set document vars if needed
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };

        Sizzle.attr = function(elem, name) {
            var val;

            // Set document vars if needed
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }

            if (!documentIsXML) {
                name = name.toLowerCase();
            }
            if ((val = Expr.attrHandle[name])) {
                return val(elem);
            }
            if (documentIsXML || support.attributes) {
                return elem.getAttribute(name);
            }
            return ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ?
                name :
                val && val.specified ? val.value : null;
        };

        Sizzle.error = function(msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg);
        };

        // Document sorting and removing duplicates
        Sizzle.uniqueSort = function(results) {
            var elem,
                duplicates = [],
                i = 1,
                j = 0;

            // Unless we *know* we can detect duplicates, assume their presence
            hasDuplicate = !support.detectDuplicates;
            results.sort(sortOrder);

            if (hasDuplicate) {
                for (;
                    (elem = results[i]); i++) {
                    if (elem === results[i - 1]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }

            return results;
        };

        function siblingCheck(a, b) {
            var cur = b && a,
                diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

            // Use IE sourceIndex if available on both nodes
            if (diff) {
                return diff;
            }

            // Check if b follows a
            if (cur) {
                while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }

            return a ? 1 : -1;
        }

        // Returns a function to use in pseudos for input types
        function createInputPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
            };
        }

        // Returns a function to use in pseudos for buttons
        function createButtonPseudo(type) {
            return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
            };
        }

        // Returns a function to use in pseudos for positionals
        function createPositionalPseudo(fn) {
            return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches) {
                    var j,
                        matchIndexes = fn([], seed.length, argument),
                        i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }

        /**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
        getText = Sizzle.getText = function(elem) {
            var node,
                ret = "",
                i = 0,
                nodeType = elem.nodeType;

            if (!nodeType) {
                // If no nodeType, this is expected to be an array
                for (;
                    (node = elem[i]); i++) {
                    // Do not traverse comment nodes
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                // Use textContent for elements
                // innerText usage removed for consistency of new lines (see #11153)
                if (typeof elem.textContent === "string") {
                    return elem.textContent;
                } else {
                    // Traverse its children
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            // Do not include comment or processing instruction nodes

            return ret;
        };

        Expr = Sizzle.selectors = {

            // Can be adjusted by the user
            cacheLength: 50,

            createPseudo: markFunction,

            match: matchExpr,

            find: {},

            relative: {
                ">": {
                    dir: "parentNode",
                    first: true
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: true
                },
                "~": {
                    dir: "previousSibling"
                }
            },

            preFilter: {
                "ATTR": function(match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);

                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " ";
                    }

                    return match.slice(0, 4);
                },

                "CHILD": function(match) {
                    /* matches from matchExpr["CHILD"]
                    	1 type (only|nth|...)
                    	2 what (child|of-type)
                    	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                    	4 xn-component of xn+y argument ([+-]?\d*n|)
                    	5 sign of xn-component
                    	6 x of xn-component
                    	7 sign of y-component
                    	8 y of y-component
                    */
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === "nth") {
                        // nth-* requires argument
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }

                        // numeric x and y parameters for Expr.filter.CHILD
                        // remember that false/true cast respectively to 0/1
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +((match[7] + match[8]) || match[3] === "odd");

                        // other types prohibit arguments
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }

                    return match;
                },

                "PSEUDO": function(match) {
                    var excess,
                        unquoted = !match[5] && match[2];

                    if (matchExpr["CHILD"].test(match[0])) {
                        return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[4]) {
                        match[2] = match[4];

                        // Strip excess characters from unquoted arguments
                    } else if (unquoted && rpseudo.test(unquoted) &&
                        // Get excess from tokenize (recursively)
                        (excess = tokenize(unquoted, true)) &&
                        // advance to the next closing parenthesis
                        (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                        // excess is a negative index
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                }
            },

            filter: {

                "TAG": function(nodeName) {
                    if (nodeName === "*") {
                        return function() {
                            return true;
                        };
                    }

                    nodeName = nodeName.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },

                "CLASS": function(className) {
                    var pattern = classCache[className + " "];

                    return pattern ||
                        (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                        classCache(className, function(elem) {
                            return pattern.test(elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "");
                        });
                },

                "ATTR": function(name, operator, check) {
                    return function(elem) {
                        var result = Sizzle.attr(elem, name);

                        if (result == null) {
                            return operator === "!=";
                        }
                        if (!operator) {
                            return true;
                        }

                        result += "";

                        return operator === "=" ? result === check :
                            operator === "!=" ? result !== check :
                            operator === "^=" ? check && result.indexOf(check) === 0 :
                            operator === "*=" ? check && result.indexOf(check) > -1 :
                            operator === "$=" ? check && result.slice(-check.length) === check :
                            operator === "~=" ? (" " + result + " ").indexOf(check) > -1 :
                            operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                            false;
                    };
                },

                "CHILD": function(type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth",
                        forward = type.slice(-4) !== "last",
                        ofType = what === "of-type";

                    return first === 1 && last === 0 ?

                        // Shortcut for :nth-*(n)
                        function(elem) {
                            return !!elem.parentNode;
                        } :

                        function(elem, context, xml) {
                            var cache, outerCache, node, diff, nodeIndex, start,
                                dir = simple !== forward ? "nextSibling" : "previousSibling",
                                parent = elem.parentNode,
                                name = ofType && elem.nodeName.toLowerCase(),
                                useCache = !xml && !ofType;

                            if (parent) {

                                // :(first|last|only)-(child|of-type)
                                if (simple) {
                                    while (dir) {
                                        node = elem;
                                        while ((node = node[dir])) {
                                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                return false;
                                            }
                                        }
                                        // Reverse direction for :only-* (if we haven't yet done so)
                                        start = dir = type === "only" && !start && "nextSibling";
                                    }
                                    return true;
                                }

                                start = [forward ? parent.firstChild : parent.lastChild];

                                // non-xml :nth-child(...) stores cache data on `parent`
                                if (forward && useCache) {
                                    // Seek `elem` from a previously-cached index
                                    outerCache = parent[expando] || (parent[expando] = {});
                                    cache = outerCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = cache[0] === dirruns && cache[2];
                                    node = nodeIndex && parent.childNodes[nodeIndex];

                                    while ((node = ++nodeIndex && node && node[dir] ||

                                            // Fallback to seeking `elem` from the start
                                            (diff = nodeIndex = 0) || start.pop())) {

                                        // When found, cache indexes on `parent` and break
                                        if (node.nodeType === 1 && ++diff && node === elem) {
                                            outerCache[type] = [dirruns, nodeIndex, diff];
                                            break;
                                        }
                                    }

                                    // Use previously-cached element index if available
                                } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                    diff = cache[1];

                                    // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                } else {
                                    // Use the same loop as above to seek `elem` from the start
                                    while ((node = ++nodeIndex && node && node[dir] ||
                                            (diff = nodeIndex = 0) || start.pop())) {

                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            // Cache the index of each encountered element
                                            if (useCache) {
                                                (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
                                            }

                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }

                                // Incorporate the offset, then check against cycle size
                                diff -= last;
                                return diff === first || (diff % first === 0 && diff / first >= 0);
                            }
                        };
                },

                "PSEUDO": function(pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // http://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                        fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                        Sizzle.error("unsupported pseudo: " + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as Sizzle does
                    if (fn[expando]) {
                        return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                            markFunction(function(seed, matches) {
                                var idx,
                                    matched = fn(seed, argument),
                                    i = matched.length;
                                while (i--) {
                                    idx = indexOf.call(seed, matched[i]);
                                    seed[idx] = !(matches[idx] = matched[i]);
                                }
                            }) :
                            function(elem) {
                                return fn(elem, 0, args);
                            };
                    }

                    return fn;
                }
            },

            pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                        results = [],
                        matcher = compile(selector.replace(rtrim, "$1"));

                    return matcher[expando] ?
                        markFunction(function(seed, matches, context, xml) {
                            var elem,
                                unmatched = matcher(seed, null, xml, []),
                                i = seed.length;

                            // Match elements unmatched by `matcher`
                            while (i--) {
                                if ((elem = unmatched[i])) {
                                    seed[i] = !(matches[i] = elem);
                                }
                            }
                        }) :
                        function(elem, context, xml) {
                            input[0] = elem;
                            matcher(input, null, xml, results);
                            return !results.pop();
                        };
                }),

                "has": markFunction(function(selector) {
                    return function(elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),

                "contains": markFunction(function(text) {
                    return function(elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),

                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                    // lang value must be a valid identifider
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function(elem) {
                        var elemLang;
                        do {
                            if ((elemLang = documentIsXML ?
                                    elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
                                    elem.lang)) {

                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),

                // Miscellaneous
                "target": function(elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },

                "root": function(elem) {
                    return elem === docElem;
                },

                "focus": function(elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },

                // Boolean properties
                "enabled": function(elem) {
                    return elem.disabled === false;
                },

                "disabled": function(elem) {
                    return elem.disabled === true;
                },

                "checked": function(elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                },

                "selected": function(elem) {
                    // Accessing this property makes selected-by-default
                    // options in Safari work properly
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                },

                // Contents
                "empty": function(elem) {
                    // http://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
                    //   not comment, processing instructions, or others
                    // Thanks to Diego Perini for the nodeName shortcut
                    //   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false;
                        }
                    }
                    return true;
                },

                "parent": function(elem) {
                    return !Expr.pseudos["empty"](elem);
                },

                // Element/input types
                "header": function(elem) {
                    return rheader.test(elem.nodeName);
                },

                "input": function(elem) {
                    return rinputs.test(elem.nodeName);
                },

                "button": function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button";
                },

                "text": function(elem) {
                    var attr;
                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                    // use getAttribute instead to test this case
                    return elem.nodeName.toLowerCase() === "input" &&
                        elem.type === "text" &&
                        ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type);
                },

                // Position-in-collection
                "first": createPositionalPseudo(function() {
                    return [0];
                }),

                "last": createPositionalPseudo(function(matchIndexes, length) {
                    return [length - 1];
                }),

                "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),

                "even": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "odd": createPositionalPseudo(function(matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),

                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };

        // Add button/input type pseudos
        for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
                submit: true,
                reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }

        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type,
                soFar, groups, preFilters,
                cached = tokenCache[selector + " "];

            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }

            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;

            while (soFar) {

                // Comma and first run
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        // Don't consume trailing commas as valid
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }

                matched = false;

                // Combinators
                if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        // Cast descendant combinators to space
                        type: match[0].replace(rtrim, " ")
                    });
                    soFar = soFar.slice(matched.length);
                }

                // Filters
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                            (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }

                if (!matched) {
                    break;
                }
            }

            // Return the length of the invalid excess
            // if we're just parsing
            // Otherwise, throw an error or return tokens
            return parseOnly ?
                soFar.length :
                soFar ?
                Sizzle.error(selector) :
                // Cache the tokens
                tokenCache(selector, groups).slice(0);
        }

        function toSelector(tokens) {
            var i = 0,
                len = tokens.length,
                selector = "";
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }

        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir,
                checkNonElements = base && dir === "parentNode",
                doneName = done++;

            return combinator.first ?
                // Check against closest ancestor/preceding element
                function(elem, context, xml) {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            return matcher(elem, context, xml);
                        }
                    }
                } :

                // Check against all ancestor/preceding elements
                function(elem, context, xml) {
                    var data, cache, outerCache,
                        dirkey = dirruns + " " + doneName;

                    // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                    if (xml) {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                if (matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    } else {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                outerCache = elem[expando] || (elem[expando] = {});
                                if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                    if ((data = cache[1]) === true || data === cachedruns) {
                                        return data === true;
                                    }
                                } else {
                                    cache = outerCache[dir] = [dirkey];
                                    cache[1] = matcher(elem, context, xml) || cachedruns;
                                    if (cache[1] === true) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                };
        }

        function elementMatcher(matchers) {
            return matchers.length > 1 ?
                function(elem, context, xml) {
                    var i = matchers.length;
                    while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                            return false;
                        }
                    }
                    return true;
                } :
                matchers[0];
        }

        function condense(unmatched, map, filter, context, xml) {
            var elem,
                newUnmatched = [],
                i = 0,
                len = unmatched.length,
                mapped = map != null;

            for (; i < len; i++) {
                if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }

            return newUnmatched;
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function(seed, results, context, xml) {
                var temp, i, elem,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,

                    // Get initial elements from seed or context
                    elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn = preFilter && (seed || !selector) ?
                    condense(elems, preMap, preFilter, context, xml) :
                    elems,

                    matcherOut = matcher ?
                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                    postFinder || (seed ? preFilter : preexisting || postFilter) ?

                    // ...intermediate processing is necessary
                    [] :

                    // ...otherwise use results directly
                    results :
                    matcherIn;

                // Find primary matches
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }

                // Apply postFilter
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                        if ((elem = temp[i])) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }

                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            // Get the final matcherOut by condensing this intermediate into postFinder contexts
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i])) {
                                    // Restore matcherIn since elem is not yet a final match
                                    temp.push((matcherIn[i] = elem));
                                }
                            }
                            postFinder(null, (matcherOut = []), temp, xml);
                        }

                        // Move matched elements from seed to results to keep them synchronized
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) &&
                                (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {

                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }

                    // Add elements to results, through postFinder if defined
                } else {
                    matcherOut = condense(
                        matcherOut === results ?
                        matcherOut.splice(preexisting, matcherOut.length) :
                        matcherOut
                    );
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }

        function matcherFromTokens(tokens) {
            var checkContext, matcher, j,
                len = tokens.length,
                leadingRelative = Expr.relative[tokens[0].type],
                implicitRelative = leadingRelative || Expr.relative[" "],
                i = leadingRelative ? 1 : 0,

                // The foundational matcher ensures that elements are reachable from top-level context(s)
                matchContext = addCombinator(function(elem) {
                    return elem === checkContext;
                }, implicitRelative, true),
                matchAnyContext = addCombinator(function(elem) {
                    return indexOf.call(checkContext, elem) > -1;
                }, implicitRelative, true),
                matchers = [function(elem, context, xml) {
                    return (!leadingRelative && (xml || context !== outermostContext)) || (
                        (checkContext = context).nodeType ?
                        matchContext(elem, context, xml) :
                        matchAnyContext(elem, context, xml));
                }];

            for (; i < len; i++) {
                if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                        // Find the next relative operator (if any) for proper handling
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(
                            i > 1 && elementMatcher(matchers),
                            i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, "$1"),
                            matcher,
                            i < j && matcherFromTokens(tokens.slice(i, j)),
                            j < len && matcherFromTokens((tokens = tokens.slice(j))),
                            j < len && toSelector(tokens)
                        );
                    }
                    matchers.push(matcher);
                }
            }

            return elementMatcher(matchers);
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            // A counter to specify which element is currently being matched
            var matcherCachedRuns = 0,
                bySet = setMatchers.length > 0,
                byElement = elementMatchers.length > 0,
                superMatcher = function(seed, context, xml, results, expandContext) {
                    var elem, j, matcher,
                        setMatched = [],
                        matchedCount = 0,
                        i = "0",
                        unmatched = seed && [],
                        outermost = expandContext != null,
                        contextBackup = outermostContext,
                        // We must always have either seed elements or context
                        elems = seed || byElement && Expr.find["TAG"]("*", expandContext && context.parentNode || context),
                        // Use integer dirruns iff this is the outermost matcher
                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

                    if (outermost) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns;
                    }

                    // Add elements passing elementMatchers directly to results
                    // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            while ((matcher = elementMatchers[j++])) {
                                if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns;
                            }
                        }

                        // Track unmatched elements for set filters
                        if (bySet) {
                            // They will have gone through all possible matchers
                            if ((elem = !matcher && elem)) {
                                matchedCount--;
                            }

                            // Lengthen the array for every element, matched or not
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }

                    // Apply set filters to unmatched elements
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while ((matcher = setMatchers[j++])) {
                            matcher(unmatched, setMatched, context, xml);
                        }

                        if (seed) {
                            // Reintegrate element matches to eliminate the need for sorting
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }

                            // Discard index placeholder values to get only actual matches
                            setMatched = condense(setMatched);
                        }

                        // Add matches to results
                        push.apply(results, setMatched);

                        // Seedless set matches succeeding multiple successful matchers stipulate sorting
                        if (outermost && !seed && setMatched.length > 0 &&
                            (matchedCount + setMatchers.length) > 1) {

                            Sizzle.uniqueSort(results);
                        }
                    }

                    // Override manipulation of globals by nested matchers
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }

                    return unmatched;
                };

            return bySet ?
                markFunction(superMatcher) :
                superMatcher;
        }

        compile = Sizzle.compile = function(selector, group /* Internal Use Only */ ) {
            var i,
                setMatchers = [],
                elementMatchers = [],
                cached = compilerCache[selector + " "];

            if (!cached) {
                // Generate a function of recursive functions that can be used to check each element
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }

                // Cache the compiled function
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };

        function multipleContexts(selector, contexts, results) {
            var i = 0,
                len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }

        function select(selector, context, results, seed) {
            var i, tokens, token, type, find,
                match = tokenize(selector);

            if (!seed) {
                // Try to minimize operations if there is only one group
                if (match.length === 1) {

                    // Take a shortcut and set the context if the root selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        context.nodeType === 9 && !documentIsXML &&
                        Expr.relative[tokens[1].type]) {

                        context = Expr.find["ID"](token.matches[0].replace(runescape, funescape), context)[0];
                        if (!context) {
                            return results;
                        }

                        selector = selector.slice(tokens.shift().value.length);
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];

                        // Abort if we hit a combinator
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            // Search, expanding context for leading sibling combinators
                            if ((seed = find(
                                    token.matches[0].replace(runescape, funescape),
                                    rsibling.test(tokens[0].type) && context.parentNode || context
                                ))) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, slice.call(seed, 0));
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }
            }

            // Compile and execute a filtering function
            // Provide `match` to avoid retokenization if we modified the selector above
            compile(selector, match)(
                seed,
                context,
                documentIsXML,
                results,
                rsibling.test(selector)
            );
            return results;
        }

        // Deprecated
        Expr.pseudos["nth"] = Expr.pseudos["eq"];

        // Easy API for creating new setFilters
        function setFilters() {}
        Expr.filters = setFilters.prototype = Expr.pseudos;
        Expr.setFilters = new setFilters();

        // Initialize with the default document
        setDocument();

        // Override sizzle attribute retrieval
        Sizzle.attr = jQuery.attr;
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;


    })(window);
    var runtil = /Until$/,
        rparentsprev = /^(?:parents|prev(?:Until|All))/,
        isSimple = /^.[^:#\[\.,]*$/,
        rneedsContext = jQuery.expr.match.needsContext,
        // methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend({
        find: function(selector) {
            var i, ret, self,
                len = this.length;

            if (typeof selector !== "string") {
                self = this;
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            ret = [];
            for (i = 0; i < len; i++) {
                jQuery.find(selector, this[i], ret);
            }

            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = (this.selector ? this.selector + " " : "") + selector;
            return ret;
        },

        has: function(target) {
            var i,
                targets = jQuery(target, this),
                len = targets.length;

            return this.filter(function() {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },

        not: function(selector) {
            return this.pushStack(winnow(this, selector, false));
        },

        filter: function(selector) {
            return this.pushStack(winnow(this, selector, true));
        },

        is: function(selector) {
            return !!selector && (
                typeof selector === "string" ?
                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                rneedsContext.test(selector) ?
                jQuery(selector, this.context).index(this[0]) >= 0 :
                jQuery.filter(selector, this).length > 0 :
                this.filter(selector).length > 0);
        },

        closest: function(selectors, context) {
            var cur,
                i = 0,
                l = this.length,
                ret = [],
                pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
                jQuery(selectors, context || this.context) :
                0;

            for (; i < l; i++) {
                cur = this[i];

                while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break;
                    }
                    cur = cur.parentNode;
                }
            }

            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
        },

        // Determine the position of an element within
        // the matched set of elements
        index: function(elem) {

            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }

            // index in selector
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem));
            }

            // Locate the position of the desired element
            return jQuery.inArray(
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem, this);
        },

        add: function(selector, context) {
            var set = typeof selector === "string" ?
                jQuery(selector, context) :
                jQuery.makeArray(selector && selector.nodeType ? [selector] : selector),
                all = jQuery.merge(this.get(), set);

            return this.pushStack(jQuery.unique(all));
        },

        addBack: function(selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });

    jQuery.fn.andSelf = jQuery.fn.addBack;

    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);

        return cur;
    }

    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ?
                elem.contentDocument || elem.contentWindow.document :
                jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until);

            if (!runtil.test(name)) {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }

            ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;

            if (this.length > 1 && rparentsprev.test(name)) {
                ret = ret.reverse();
            }

            return this.pushStack(ret);
        };
    });

    jQuery.extend({
        filter: function(expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")";
            }

            return elems.length === 1 ?
                jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] :
                jQuery.find.matches(expr, elems);
        },

        dir: function(elem, dir, until) {
            var matched = [],
                cur = elem[dir];

            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },

        sibling: function(n, elem) {
            var r = [];

            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }

            return r;
        }
    });

    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, keep) {

        // Can't pass null or undefined to indexOf in Firefox 4
        // Set to 0 to skip string check
        qualifier = qualifier || 0;

        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                var retVal = !!qualifier.call(elem, i, elem);
                return retVal === keep;
            });

        } else if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return (elem === qualifier) === keep;
            });

        } else if (typeof qualifier === "string") {
            var filtered = jQuery.grep(elements, function(elem) {
                return elem.nodeType === 1;
            });

            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter(qualifier, filtered);
            }
        }

        return jQuery.grep(elements, function(elem) {
            return (jQuery.inArray(elem, qualifier) >= 0) === keep;
        });
    }

    function createSafeFragment(document) {
        var list = nodeNames.split("|"),
            safeFrag = document.createDocumentFragment();

        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(
                    list.pop()
                );
            }
        }
        return safeFrag;
    }

    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
        "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
        rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
        rleadingWhitespace = /^\s+/,
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rtbody = /<tbody/i,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

        // We have to close these tags to support XHTML (#13200)
        wrapMap = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            area: [1, "<map>", "</map>"],
            param: [1, "<object>", "</object>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

            // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
            // unless wrapped in a div with non-breaking characters in front of it.
            _default: jQuery.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
        },
        safeFragment = createSafeFragment(document),
        fragmentDiv = safeFragment.appendChild(document.createElement("div"));

    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;

    jQuery.fn.extend({
        text: function(value) {
            return jQuery.access(this, function(value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },

        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }

            if (this[0]) {
                // The elements to wrap the target around
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function() {
                    var elem = this;

                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },

        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function() {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },

        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);

            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },

        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        },

        append: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    this.appendChild(elem);
                }
            });
        },

        prepend: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    this.insertBefore(elem, this.firstChild);
                }
            });
        },

        before: function() {
            return this.domManip(arguments, false, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },

        after: function() {
            return this.domManip(arguments, false, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },

        // keepData is for internal use only--do not document
        remove: function(selector, keepData) {
            var elem,
                i = 0;

            for (;
                (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [elem]).length > 0) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(getAll(elem));
                    }

                    if (elem.parentNode) {
                        if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                            setGlobalEval(getAll(elem, "script"));
                        }
                        var jleak = elem.parentNode.removeChild(elem);
                    }
                }
            }

            return this;
        },

        empty: function() {
            var elem,
                i = 0;

            for (;
                (elem = this[i]) != null; i++) {
                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }

                // Remove any remaining nodes
                while (elem.firstChild) {
                    var jleak = elem.removeChild(elem.firstChild);
                }

                // If this is a select, ensure that it displays empty (#12336)
                // Support: IE<9
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0;
                }
            }

            return this;
        },

        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },

        html: function(value) {
            return jQuery.access(this, function(value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined) {
                    return elem.nodeType === 1 ?
                        elem.innerHTML.replace(rinlinejQuery, "") :
                        undefined;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) &&
                    (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) &&
                    !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                    value = value.replace(rxhtmlTag, "<$1></$2>");

                    try {
                        for (; i < l; i++) {
                            // Remove element nodes and prevent memory leaks
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                TVA.putInnerHTML(elem, value);
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },

        replaceWith: function(value) {
            var isFunc = jQuery.isFunction(value);

            // Make sure that the elements are removed from the DOM before they are inserted
            // this can help fix replacing a parent with child elements
            if (!isFunc && typeof value !== "string") {
                value = jQuery(value).not(this).detach();
            }

            return this.domManip([value], true, function(elem) {
                var next = this.nextSibling,
                    parent = this.parentNode;

                if (parent) {
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
            });
        },

        detach: function(selector) {
            return this.remove(selector, true);
        },

        domManip: function(args, table, callback) {

            // Flatten any nested arrays
            args = core_concat.apply([], args);

            var first, node, hasScripts,
                scripts, doc, fragment,
                i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[0],
                isFunction = jQuery.isFunction(value);

            // We can't cloneNode fragments that contain checked, in WebKit
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {
                return this.each(function(index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, table ? self.html() : undefined);
                    }
                    self.domManip(args, table, callback);
                });
            }

            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;

                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }

                if (first) {
                    table = table && jQuery.nodeName(first, "tr");
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;

                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for (; i < l; i++) {
                        node = fragment;

                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);

                            // Keep references to cloned scripts for later restoration
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"));
                            }
                        }

                        callback.call(
                            table && jQuery.nodeName(this[i], "table") ?
                            findOrAppend(this[i], "tbody") :
                            this[i],
                            node,
                            i
                        );
                    }

                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;

                        // Reenable scripts
                        jQuery.map(scripts, restoreScript);

                        // Evaluate executable scripts on first document insertion
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") &&
                                !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {

                                if (node.src) {
                                    // Hope ajax is available...
                                    jQuery.ajax({
                                        url: node.src,
                                        type: "GET",
                                        dataType: "script",
                                        async: false,
                                        global: false,
                                        "throws": true
                                    });
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
                                }
                            }
                        }
                    }

                    // Fix #11809: Avoid leaking memory
                    fragment = first = null;
                }
            }

            return this;
        }
    });

    function findOrAppend(elem, tag) {
        return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        var attr = elem.getAttributeNode("type");
        elem.type = (attr && attr.specified) + "/" + elem.type;
        return elem;
    }

    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }
        return elem;
    }

    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var elem,
            i = 0;
        for (;
            (elem = elems[i]) != null; i++) {
            jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
        }
    }

    function cloneCopyEvent(src, dest) {

        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }

        var type, i, l,
            oldData = jQuery._data(src),
            curData = jQuery._data(dest, oldData),
            events = oldData.events;

        if (events) {
            delete curData.handle;
            curData.events = {};

            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }

        // make the cloned public data object a copy from the original
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }

    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;

        // We do not need to do anything for non-Elements
        if (dest.nodeType !== 1) {
            return;
        }

        nodeName = dest.nodeName.toLowerCase();

        // IE6-8 copies events bound via attachEvent when using cloneNode.
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);

            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }

            // Event data gets referenced instead of copied if the expando gets copied too
            dest.removeAttribute(jQuery.expando);
        }

        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);

            // IE6-10 improperly clones children of object elements using classid.
            // IE10 throws NoModificationAllowedError if parent is null, #12132.
        } else if (nodeName === "object") {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }

            // This path appears unavoidable for IE9. When cloning an object
            // element in IE9, the outerHTML strategy above is not sufficient.
            // If the src has innerHTML and the destination does not,
            // copy the src.innerHTML into the dest.innerHTML. #10324
            if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                TVA.putInnerHTML(dest, src.innerHTML);
            }

        } else if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {
            // IE6-8 fails to persist the checked state of a cloned checkbox
            // or radio button. Worse, IE6-7 fail to give the cloned element
            // a checked appearance if the defaultChecked value isn't also set

            dest.defaultChecked = dest.checked = src.checked;

            // IE6-7 get confused and end up setting the value of a cloned
            // checkbox/radio button to an empty string instead of "on"
            if (dest.value !== src.value) {
                dest.value = src.value;
            }

            // IE6-8 fails to return the selected option to the default selected
            // state when cloning options
        } else if (nodeName === "option") {
            dest.defaultSelected = dest.selected = src.defaultSelected;

            // IE6-8 fails to set the defaultValue to the correct value when
            // cloning other types of input fields
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems,
                i = 0,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
                core_push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        };
    });

    function getAll(context, tag) {
        var elems, elem,
            i = 0,
            found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") :
            typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") :
            undefined;

        if (!found) {
            for (found = [], elems = context.childNodes || context;
                (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }

        return tag === undefined || tag && jQuery.nodeName(context, tag) ?
            jQuery.merge([context], found) :
            found;
    }

    // Used in buildFragment, fixes the defaultChecked property
    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }

    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements,
                inPage = jQuery.contains(elem.ownerDocument, elem);

            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                clone = elem.cloneNode(true);

                // IE<=8 does not properly clone detached, unknown element nodes
            } else {
                TVA.putInnerHTML(fragmentDiv, elem.outerHTML);
                var jleak = fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }

            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                // Fix all IE cloning issues
                for (i = 0;
                    (node = srcElements[i]) != null; ++i) {
                    // Ensure that the destination node is not null; Fixes #9587
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0;
                        (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            destElements = srcElements = node = null;

            // Return the cloned set
            return clone;
        },

        buildFragment: function(elems, context, scripts, selection) {
            var j, elem, contains,
                tmp, tag, tbody, wrap,
                l = elems.length,

                // Ensure a safe fragment
                safe = createSafeFragment(context),

                nodes = [],
                i = 0;

            for (; i < l; i++) {
                elem = elems[i];

                if (elem || elem === 0) {

                    // Add nodes directly
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                        // Convert non-html into a text node
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));

                        // Convert html into DOM nodes
                    } else {
                        tmp = tmp || safe.appendChild(context.createElement("div"));

                        // Deserialize a standard representation
                        tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;

                        TVA.putInnerHTML(tmp, wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2]);

                        // Descend through wrappers to the right content
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }

                        // Manually add leading whitespace removed by IE
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                        }

                        // Remove IE's autoinserted <tbody> from table fragments
                        if (!jQuery.support.tbody) {

                            // String was a <table>, *may* have spurious <tbody>
                            elem = tag === "table" && !rtbody.test(elem) ?
                                tmp.firstChild :

                                // String was a bare <thead> or <tfoot>
                                wrap[1] === "<table>" && !rtbody.test(elem) ?
                                tmp :
                                0;

                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName((tbody = elem.childNodes[j]), "tbody") && !tbody.childNodes.length) {
                                    var jleak = elem.removeChild(tbody);
                                }
                            }
                        }

                        jQuery.merge(nodes, tmp.childNodes);

                        // Fix #12392 for WebKit and IE > 9
                        tmp.textContent = "";

                        // Fix #12392 for oldIE
                        while (tmp.firstChild) {
                            var jleak = tmp.removeChild(tmp.firstChild);
                        }

                        // Remember the top-level container for proper cleanup
                        tmp = safe.lastChild;
                    }
                }
            }

            // Fix #11356: Clear elements from fragment
            if (tmp) {
                var jleak = safe.removeChild(tmp);
            }

            // Reset defaultChecked for any radios and checkboxes
            // about to be appended to the DOM in IE 6/7 (#8060)
            if (!jQuery.support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
            }

            i = 0;
            while ((elem = nodes[i++])) {

                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }

                contains = jQuery.contains(elem.ownerDocument, elem);

                // Append to fragment
                tmp = getAll(safe.appendChild(elem), "script");

                // Preserve script evaluation history
                if (contains) {
                    setGlobalEval(tmp);
                }

                // Capture executables
                if (scripts) {
                    j = 0;
                    while ((elem = tmp[j++])) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem);
                        }
                    }
                }
            }

            tmp = null;

            return safe;
        },

        cleanData: function(elems, /* internal */ acceptData) {
            var elem, type, id, data,
                i = 0,
                internalKey = jQuery.expando,
                cache = jQuery.cache,
                deleteExpando = jQuery.support.deleteExpando,
                special = jQuery.event.special;

            for (;
                (elem = elems[i]) != null; i++) {

                if (acceptData || jQuery.acceptData(elem)) {

                    id = elem[internalKey];
                    data = id && cache[id];

                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }

                        // Remove cache only if it was not already removed by jQuery.event.remove
                        if (cache[id]) {

                            delete cache[id];

                            // IE does not allow us to delete expando properties from nodes,
                            // nor does it have a removeAttribute function on Document nodes;
                            // we must handle all of these cases
                            if (deleteExpando) {
                                delete elem[internalKey];

                            } else if (typeof elem.removeAttribute !== core_strundefined) {
                                elem.removeAttribute(internalKey);

                            } else {
                                elem[internalKey] = null;
                            }

                            core_deletedIds.push(id);
                        }
                    }
                }
            }
        }
    });
    var iframe, getStyles, curCSS,
        ralpha = /alpha\([^)]*\)/i,
        ropacity = /opacity\s*=\s*([^)]*)/,
        rposition = /^(top|right|bottom|left)$/,
        // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
        // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rmargin = /^margin/,
        rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"),
        rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"),
        rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"),
        elemdisplay = {
            BODY: "block"
        },

        cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        },

        cssExpand = ["Top", "Right", "Bottom", "Left"],
        cssPrefixes = ["Webkit", "O", "Moz", "ms"];

    // return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(style, name) {

        // shortcut for names that are not vendor prefixed
        if (name in style) {
            return name;
        }

        // check for vendor prefixed names
        var capName = name.charAt(0).toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;

        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }

        return origName;
    }

    function isHidden(elem, el) {
        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
    }

    function showHide(elements, show) {
        var display, elem, hidden,
            values = [],
            index = 0,
            length = elements.length;

        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }

            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }

                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName));
                }
            } else {

                if (!values[index]) {
                    hidden = isHidden(elem);

                    if (display && display !== "none" || !hidden) {
                        jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
                    }
                }
            }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }

        return elements;
    }

    jQuery.fn.extend({
        css: function(name, value) {
            return jQuery.access(this, function(elem, name, value) {
                var len, styles,
                    map = {},
                    i = 0;

                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style(elem, name, value) :
                    jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            var bool = typeof state === "boolean";

            return this.each(function() {
                if (bool ? state : isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });

    jQuery.extend({
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Exclude the following css properties to add px
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            // normalize float css property
            "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },

        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {
            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase(name),
                style = elem.style;

            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;

                // convert relative number strings (+= or -=) to relative numbers. #7345
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that NaN and null values aren't set. See: #7116
                if (value == null || type === "number" && isNaN(value)) {
                    return;
                }

                // If a number was passed in, add 'px' to the (except for certain CSS properties)
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }

                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
                // but it would mean to define eight (for every problematic property) identical functions
                if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                    // Fixes bug #5509
                    try {
                        style[name] = value;
                    } catch (e) {}
                }

            } else {
                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
            }
        },

        css: function(elem, name, extra, styles) {
            var num, val, hooks,
                origName = jQuery.camelCase(name);

            // Make sure that we're working with the right name
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

            // gets hook for the prefixed version
            // followed by the unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }

            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }

            //convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }

            // Return, converting to number if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        },

        // A method for quickly swapping in/out CSS properties to get correct calculations
        swap: function(elem, options, callback, args) {
            var ret, name,
                old = {};

            // Remember the old values, and insert the new ones
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }

            ret = callback.apply(elem, args || []);

            // Revert the old values
            for (name in options) {
                elem.style[name] = old[name];
            }

            return ret;
        }
    });

    // NOTE: we've included the "window" in window.getComputedStyle
    // because jsdom on node.js will break without it.
    if (window.getComputedStyle) {
        getStyles = function(elem) {
            return window.getComputedStyle(elem, null);
        };

        curCSS = function(elem, name, _computed) {
            var width, minWidth, maxWidth,
                computed = _computed || getStyles(elem),

                // getPropertyValue is only needed for .css('filter') in IE9, see #12537
                ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined,
                style = elem.style;

            if (computed) {

                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                if (rnumnonpx.test(ret) && rmargin.test(name)) {

                    // Remember the original values
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;

                    // Put in the new values to get a computed value out
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;

                    // Revert the changed values
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }

            return ret;
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function(elem) {
            return elem.currentStyle;
        };

        curCSS = function(elem, name, _computed) {
            var left, rs, rsLeft,
                computed = _computed || getStyles(elem),
                ret = computed ? computed[name] : undefined,
                style = elem.style;

            // Avoid setting ret to empty string here
            // so we don't default to auto
            if (ret == null && style && style[name]) {
                ret = style[name];
            }

            // From the awesome hack by Dean Edwards
            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

            // If we're not dealing with a regular pixel number
            // but a number that has a weird ending, we need to convert it to pixels
            // but not position css attributes, as those are proportional to the parent element instead
            // and we can't measure the parent instead because it might trigger a "stacking dolls" problem
            if (rnumnonpx.test(ret) && !rposition.test(name)) {

                // Remember the original values
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;

                // Put in the new values to get a computed value out
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret;
                ret = style.pixelLeft + "px";

                // Revert the changed values
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }

            return ret === "" ? "auto" : ret;
        };
    }

    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ?
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") :
            value;
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ?
            // If we already have the right measurement, avoid augmentation
            4 :
            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0,

            val = 0;

        for (; i < 4; i += 2) {
            // both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }

            if (isBorderBox) {
                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // at this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {
                // at this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // at this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }

        return val;
    }

    function getWidthOrHeight(elem, name, extra) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";

        // some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }

            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }

            // we need the check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);

            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }

        // use the active box-sizing model to add/subtract irrelevant styles
        return (val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles
            )
        ) + "px";
    }

    // Try to determine the default display value of an element
    function css_defaultDisplay(nodeName) {
        var doc = document,
            display = elemdisplay[nodeName];

        if (!display) {
            display = actualDisplay(nodeName, doc);

            // If the simple way fails, read from inside an iframe
            if (display === "none" || !display) {
                // Use the already-created iframe if possible
                iframe = (iframe ||
                    jQuery("<iframe frameborder='0' width='0' height='0'/>")
                    .css("cssText", "display:block !important")
                ).appendTo(doc.documentElement);

                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();

                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }

            // Store the correct default display
            elemdisplay[nodeName] = display;
        }

        return display;
    }

    // Called ONLY from within css_defaultDisplay
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
            display = jQuery.css(elem[0], "display");
        elem.remove();
        return display;
    }

    jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {
                    // certain elements can have dimension info if we invisibly show them
                    // however, it must have a current display style that would benefit from this
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ?
                        jQuery.swap(elem, cssShow, function() {
                            return getWidthOrHeight(elem, name, extra);
                        }) :
                        getWidthOrHeight(elem, name, extra);
                }
            },

            set: function(elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ?
                    augmentWidthOrHeight(
                        elem,
                        name,
                        extra,
                        jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                        styles
                    ) : 0
                );
            }
        };
    });

    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {
                // IE uses filters for opacity
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
                    (0.01 * parseFloat(RegExp.$1)) + "" :
                    computed ? "1" : "";
            },

            set: function(elem, value) {
                var style = elem.style,
                    currentStyle = elem.currentStyle,
                    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
                    filter = currentStyle && currentStyle.filter || style.filter || "";

                // IE has trouble with opacity if it does not have layout
                // Force it by setting the zoom level
                style.zoom = 1;

                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                // if value === "", then remove inline opacity #12685
                if ((value >= 1 || value === "") &&
                    jQuery.trim(filter.replace(ralpha, "")) === "" &&
                    style.removeAttribute) {

                    // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                    // if "filter:" is present at all, clearType is disabled, we want to avoid this
                    // style.removeAttribute is IE Only, but so apparently is this code path...
                    style.removeAttribute("filter");

                    // if there is no filter style applied in a css rule or unset inline opacity, we are done
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }

                // otherwise, set new filter values
                style.filter = ralpha.test(filter) ?
                    filter.replace(ralpha, opacity) :
                    filter + " " + opacity;
            }
        };
    }

    // These hooks cannot be added until DOM ready because the support test
    // for it is not run until after DOM ready
    jQuery(function() {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get: function(elem, computed) {
                    if (computed) {
                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                        // Work around by temporarily setting element display to inline-block
                        return jQuery.swap(elem, {
                                "display": "inline-block"
                            },
                            curCSS, [elem, "marginRight"]);
                    }
                }
            };
        }

        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
        // getComputedStyle returns percent when specified for top/left/bottom/right
        // rather than make the css module depend on the offset module, we just check for it here
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
            jQuery.each(["top", "left"], function(i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function(elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            // if curCSS returns percentage, fallback to offset
                            return rnumnonpx.test(computed) ?
                                jQuery(elem).position()[prop] + "px" :
                                computed;
                        }
                    }
                };
            });
        }

    });

    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            // Support: Opera <= 12.12
            // Opera reports offsetWidths and offsetHeights less than zero on some elements
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
                (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css(elem, "display")) === "none");
        };

        jQuery.expr.filters.visible = function(elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }

    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0,
                    expanded = {},

                    // assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                    // Can add propHook for "elements" to filter or add form elements
                    var elements = jQuery.prop(this, "elements");
                    return elements ? jQuery.makeArray(elements) : this;
                })
                .filter(function() {
                    var type = this.type;
                    // Use .is(":disabled") so that fieldset[disabled] works
                    return this.name && !jQuery(this).is(":disabled") &&
                        rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                        (this.checked || !manipulation_rcheckableType.test(type));
                })
                .map(function(i, elem) {
                    var val = jQuery(this).val();

                    return val == null ?
                        null :
                        jQuery.isArray(val) ?
                        jQuery.map(val, function(val) {
                            return {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            };
                        }) : {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                }).get();
        }
    });

    //Serialize an array of form elements or a set of
    //key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix,
            s = [],
            add = function(key, value) {
                // If value is a function, invoke it and return its value
                value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };

        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
            // Serialize the form elements
            jQuery.each(a, function() {
                add(this.name, this.value);
            });

        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }

        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
    };

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (jQuery.isArray(obj)) {
            // Serialize array item.
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                }
            });

        } else if (!traditional && jQuery.type(obj) === "object") {
            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }

        } else {
            // Serialize scalar item.
            add(prefix, obj);
        }
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {

        // Handle event binding
        jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ?
                this.on(name, null, data, fn) :
                this.trigger(name);
        };
    });

    jQuery.fn.hover = function(fnOver, fnOut) {
        return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    };
    var
    // Document location
        ajaxLocParts,
        ajaxLocation,
        ajax_nonce = jQuery.now(),

        ajax_rquery = /\?/,
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

        // Keep a copy of the old load method
        _load = jQuery.fn.load,

        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},

        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},

        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*");

    // #8138, IE may throw an exception when accessing
    // a field from window.location if document.domain has been set
    try {
        ajaxLocation = location.href;
    } catch (e) {
        // Use the href attribute of an A element
        // since IE will modify it given document.location
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href;
    }

    // Segment location into parts
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];

            if (jQuery.isFunction(func)) {
                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {},
            seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }

    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var deep, key,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }

    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }

        var selector, response, type,
            self = this,
            off = url.indexOf(" ");

        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }

        // If it's a function
        if (jQuery.isFunction(params)) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if (params && typeof params === "object") {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,

                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function(responseText) {

                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

                    // Otherwise use the full result
                    responseText);

            }).complete(callback && function(jqXHR, status) {
                self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
            });
        }

        return this;
    };

    // Attach a bunch of functions for handling common AJAX events
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });

    jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            // shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });

    jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": window.String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ?

                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function(url, options) {

            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var // Cross-domain detection vars
                parts,
                // Loop variable
                i,
                // URL without anti-cache param
                cacheURL,
                // Response headers as string
                responseHeadersString,
                // timeout handle
                timeoutTimer,

                // To know if global events are to be dispatched
                fireGlobals,

                transport,
                // Response headers
                responseHeaders,
                // Create the final options object
                s = jQuery.ajaxSetup({}, options),
                // Callbacks context
                callbackContext = s.context || s,
                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ?
                jQuery(callbackContext) :
                jQuery.event,
                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                // Status-dependent callbacks
                statusCode = s.statusCode || {},
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
                // The jqXHR state
                state = 0,
                // Default abort message
                strAbort = "canceled",
                // Fake xhr
                jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function(key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },

                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function(name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function(type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function(map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {
                                    // Lazy-add the new callback in a way that preserves old ones
                                    statusCode[code] = [statusCode[code], map[code]];
                                }
                            } else {
                                // Execute the appropriate callbacks
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },

                    // Cancel the request
                    abort: function(statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };

            // Attach deferreds
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""];

            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts &&
                    (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||
                        (parts[3] || (parts[1] === "http:" ? 80 : 443)) !=
                        (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443)))
                );
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            fireGlobals = s.global;

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;

            // More options handling for requests with no content
            if (!s.hasContent) {

                // If data is available, append data to url
                if (s.data) {
                    cacheURL = (s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data);
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add anti-cache in url if needed
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ?

                        // If there is already a '_' parameter, set its value
                        cacheURL.replace(rts, "$1_=" + ajax_nonce++) :

                        // Otherwise add one to the end
                        cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++;
                }
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                s.accepts["*"]
            );

            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                // Abort if not done already and return
                return jqXHR.abort();
            }

            // aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                jqXHR[i](s[i]);
            }

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }
                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);
                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                // Called once
                if (state === 2) {
                    return;
                }

                // State is "done" now
                state = 2;

                // Clear timeout if it exists
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // If successful, handle type chaining
                if (status >= 200 && status < 300 || status === 304) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }

                    // if no content
                    if (status === 204) {
                        isSuccess = true;
                        statusText = "nocontent";

                        // if not modified
                    } else if (status === 304) {
                        isSuccess = true;
                        statusText = "notmodified";

                        // If we have data, let's convert it
                    } else {
                        isSuccess = ajaxConvert(s, response);
                        statusText = isSuccess.state;
                        success = isSuccess.data;
                        error = isSuccess.error;
                        isSuccess = !error;
                    }
                } else {
                    // We extract error from statusText
                    // then normalize statusText and status for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },

        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        },

        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        }
    });

    /* Handles responses to an ajax request:
     * - sets all responseXXX fields accordingly
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type,
            contents = s.contents,
            dataTypes = s.dataTypes,
            responseFields = s.responseFields;

        // Fill responseXXX fields
        for (type in responseFields) {
            if (type in responses) {
                jqXHR[responseFields[type]] = responses[type];
            }
        }

        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    // Chain conversions given the request and the original response
    function ajaxConvert(s, response) {
        var conv2, current, conv, tmp,
            converters = {},
            i = 0,
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice(),
            prev = dataTypes[0];

        // Apply the dataFilter if provided
        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        // Convert to each sequential dataType, tolerating list modification
        for (;
            (current = dataTypes[++i]);) {

            // There's only work to do if current dataType is non-auto
            if (current !== "*") {

                // Convert response if prev dataType is non-auto and differs from current
                if (prev !== "*" && prev !== current) {

                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {

                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {
                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];

                                        // Otherwise, insert the intermediate dataType
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.splice(i--, 0, current);
                                    }

                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {

                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s["throws"]) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }

                // Update prev for next iteration
                prev = current;
            }
        }

        return {
            state: "success",
            data: response
        };
    }
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    // Handle cache's special case and global
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });

    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {

        // This transport only deals with cross domain requests
        if (s.crossDomain) {

            var script,
                head = document.head || jQuery("head")[0] || document.documentElement;

            return {

                send: function(_, callback) {

                    script = document.createElement("script");

                    script.async = true;

                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }

                    script.src = s.url;

                    script.onerror = function(e) {
                        callback(400, "error");
                    };

                    // Attach handlers for all browsers
                    script.onload = script.onreadystatechange = function(_, isAbort) {

                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

                            // Handle memory leak in IE
                            script.onload = script.onreadystatechange = null;

                            // Remove the script
                            if (script.parentNode) {
                                var jleak = script.parentNode.removeChild(script);
                            }

                            // Dereference the script
                            script = null;

                            // Callback if not abort
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };

                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    head.insertBefore(script, head.firstChild);
                },

                abort: function() {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "cb",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (ajax_nonce++));
            this[callback] = true;
            return callback;
        }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                "url" :
                typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data"
            );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };

            // force json dataType
            s.dataTypes[0] = "json";

            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[callbackName] = overwritten;

                // Save back as free
                if (s[callbackName]) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // save the callback name for future use
                    oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });
    var xhrCallbacks, xhrSupported,
        xhrId = 0,
        // #5280: Internet Explorer will keep connections alive if we don't abort on unload
        xhrOnUnloadAbort = window.ActiveXObject && function() {
            // Abort all pending requests
            var key;
            for (key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        };

    // Functions to create xhrs
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
    }

    // Create the request object
    // (This is still attached to ajaxSettings for backward compatibility)
    jQuery.ajaxSettings.xhr = window.ActiveXObject ?
        /* Microsoft failed to properly
         * implement the XMLHttpRequest in IE7 (can't request local files),
         * so we use the ActiveXObject when it is available
         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
         * we need a fallback.
         */
        function() {
            return !this.isLocal && createStandardXHR() || createActiveXHR();
        } :
        // For all other browsers, use the standard XMLHttpRequest object
        createStandardXHR;

    // Determine support properties
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    xhrSupported = jQuery.support.ajax = !!xhrSupported;

    // Create transport if the browser can provide an xhr
    if (xhrSupported) {

        jQuery.ajaxTransport(function(s) {
            // Cross domain only allowed if supported through XMLHttpRequest
            if (!s.crossDomain || jQuery.support.cors) {

                var callback;

                return {
                    send: function(headers, complete) {

                        // Get a new xhr
                        var handle, i,
                            xhr = s.xhr();

                        // Open the socket
                        // Passing null username, generates a login popup on Opera (#2865)
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }

                        // Apply custom fields if provided
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }

                        // Override mime type if needed
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }

                        // X-Requested-With header
                        // For cross-domain requests, seeing as conditions for a preflight are
                        // akin to a jigsaw puzzle, we simply never set it to be sure.
                        // (it can always be set on a per-request basis or even using ajaxSetup)
                        // For same-domain requests, won't change header if already provided.
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest";
                        }

                        // Need an extra try/catch for cross domain requests in Firefox 3
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        } catch (err) {}

                        // Do send the request
                        // This may raise an exception which is actually
                        // handled in jQuery.ajax (so no try/catch here)
                        xhr.send((s.hasContent && s.data) || null);

                        // Listener
                        callback = function(_, isAbort) {
                            var status, responseHeaders, statusText, responses;

                            // Firefox throws exceptions when accessing properties
                            // of an xhr when a network error occurred
                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                            try {

                                // Was never called and is aborted or complete
                                if (callback && (isAbort || xhr.readyState === 4)) {

                                    // Only called once
                                    callback = undefined;

                                    // Do not keep as active anymore
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }

                                    // If it's an abort
                                    if (isAbort) {
                                        // Abort it manually if needed
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();

                                        // When requesting binary data, IE6-9 will throw an exception
                                        // on any attempt to access responseText (#11426)
                                        if (typeof xhr.responseText === "string") {
                                            responses.text = xhr.responseText;
                                        }

                                        // Firefox throws an exception when accessing
                                        // statusText for faulty cross-domain requests
                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            // We normalize with Webkit giving an empty statusText
                                            statusText = "";
                                        }

                                        // Filter status for non standard behaviors

                                        // If the request is local and we have data: assume a success
                                        // (success with no data won't get notified, that's the best we
                                        // can do given current implementations)
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                            // IE - #1450: sometimes returns 1223 when it should be 204
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }

                            // Call complete if needed
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };

                        if (!s.async) {
                            // if we're in sync mode we fire the callback
                            callback();
                        } else if (xhr.readyState === 4) {
                            // (IE6 & IE7) if it's in cache and has been
                            // retrieved directly we need to fire the callback
                            setTimeout(callback);
                        } else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                // Create the active xhrs callbacks list if needed
                                // and attach the unload handler
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                // Add to list of active xhrs callbacks
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },

                    abort: function() {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"),
        rrun = /queueHooks$/,
        animationPrefilters = [defaultPrefilter],
        tweeners = {
            "*": [function(prop, value) {
                var end, unit,
                    tween = this.createTween(prop, value),
                    parts = rfxnum.exec(value),
                    target = tween.cur(),
                    start = +target || 0,
                    scale = 1,
                    maxIterations = 20;

                if (parts) {
                    end = +parts[2];
                    unit = parts[3] || (jQuery.cssNumber[prop] ? "" : "px");

                    // We need to compute starting value
                    if (unit !== "px" && start) {
                        // Iteratively approximate from a nonzero starting point
                        // Prefer the current property, because this process will be trivial if it uses the same units
                        // Fallback to end or a simple constant
                        start = jQuery.css(tween.elem, prop, true) || end || 1;

                        do {
                            // If previous iteration zeroed out, double until we get *something*
                            // Use a string for doubling factor so we don't accidentally see scale as unchanged below
                            scale = scale || ".5";

                            // Adjust and apply
                            start = start / scale;
                            jQuery.style(tween.elem, prop, start + unit);

                            // Update scale, tolerating zero or NaN from tween.cur()
                            // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
                        } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                    }

                    tween.unit = unit;
                    tween.start = start;
                    // If a +=/-= token was provided, we're doing a relative animation
                    tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
                }
                return tween;
            }]
        };

    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }

    function createTweens(animation, props) {
        jQuery.each(props, function(prop, value) {
            var collection = (tweeners[prop] || []).concat(tweeners["*"]),
                index = 0,
                length = collection.length;
            for (; index < length; index++) {
                if (collection[index].call(animation, prop, value)) {

                    // we're done with this property
                    return;
                }
            }
        });
    }

    function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always(function() {
                // don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                    // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {}
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end,
                        animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function(gotoEnd) {
                    var index = 0,
                        // if we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }

                    // resolve when we played the last frame
                    // otherwise, reject
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }

        createTweens(animation, props);

        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }

        jQuery.fx.timer(
            jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );

        // attach callbacks from options
        return animation.progress(animation.opts.progress)
            .done(animation.opts.done, animation.opts.complete)
            .fail(animation.opts.fail)
            .always(animation.opts.always);
    }

    function propFilter(props, specialEasing) {
        var value, name, index, easing, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }

            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // not quite $.extend, this wont overwrite keys already present.
                // also - reusing 'index' from above because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }

    jQuery.Animation = jQuery.extend(Animation, {

        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.split(" ");
            }

            var prop,
                index = 0,
                length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },

        prefilter: function(callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });

    function defaultPrefilter(elem, props, opts) {
        /*jshint validthis:true */
        var prop, index, length,
            value, dataShow, toggle,
            tween, hooks, oldfire,
            anim = this,
            style = elem.style,
            orig = {},
            handled = [],
            hidden = elem.nodeType && isHidden(elem);

        // handle queue: false promises
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always(function() {
                // doing this makes sure that the complete handler will be called
                // before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // height/width overflow pass
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE does not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            if (jQuery.css(elem, "display") === "inline" &&
                jQuery.css(elem, "float") === "none") {

                // inline-level elements accept inline-block;
                // block-level elements need to be inline with layout
                if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block";

                } else {
                    style.zoom = 1;
                }
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            if (!jQuery.support.shrinkWrapBlocks) {
                anim.always(function() {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }


        // show/hide pass
        for (index in props) {
            value = props[index];
            if (rfxtypes.exec(value)) {
                delete props[index];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    continue;
                }
                handled.push(index);
            }
        }

        length = handled.length;
        if (length) {
            dataShow = jQuery._data(elem, "fxshow") || jQuery._data(elem, "fxshow", {});
            if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
            }

            // store state if its toggle - enables .stop().toggle() to "reverse"
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (index = 0; index < length; index++) {
                prop = handled[index];
                tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
                orig[prop] = dataShow[prop] || jQuery.style(elem, prop);

                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
        }
    }

    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];

            return hooks && hooks.get ?
                hooks.get(this) :
                Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased,
                hooks = Tween.propHooks[this.prop];

            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;

                if (tween.elem[tween.prop] != null &&
                    (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }

                // passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails
                // so, simple values such as "10px" are parsed to Float.
                // complex values such as "rotate(1rad)" are returned as is.
                result = jQuery.css(tween.elem, tween.prop, "");
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
                // use step hook for back compat - use cssHook if its there - use .style if its
                // available and use plain properties where available
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    // Remove in 2.0 - this supports IE8's panic based approach
    // to setting things on disconnected nodes

    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };

    jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply(this, arguments) :
                this.animate(genFx(name, true), speed, easing, callback);
        };
    });

    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {

            // show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show()

            // animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function() {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    doAnimation.finish = function() {
                        anim.stop(true);
                    };
                    // Empty animations, or finishing resolves immediately
                    if (empty || jQuery._data(this, "finish")) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = jQuery._data(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }

                // start the next in the queue if the last step wasn't forced
                // timers currently will call their complete callbacks, which will dequeue
                // but only if they were gotoEnd
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index,
                    data = jQuery._data(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // enable finishing flag on private data
                data.finish = true;

                // empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.cur && hooks.cur.finish) {
                    hooks.cur.finish.call(this);
                }

                // look for any active animations, and finish them
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }

                // look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }

                // turn off finishing flag
                delete data.finish;
            });
        }
    });

    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which,
            attrs = {
                height: type
            },
            i = 0;

        // if we include width, step value is 1 to do all cssExpand values,
        // if we don't include width, step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });

    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };

        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

        // normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }

            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };

        return opt;
    };

    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };

    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function() {
        var timer,
            timers = jQuery.timers,
            i = 0;

        fxNow = jQuery.now();

        for (; i < timers.length; i++) {
            timer = timers[i];
            // Checks the timer has not already been removed
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    jQuery.fx.timer = function(timer) {
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start();
        }
    };

    jQuery.fx.interval = 13;

    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };

    jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };

    // Back Compat <1.8 extension point
    jQuery.fx.step = {};

    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function(elem) {
            return jQuery.grep(jQuery.timers, function(fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    jQuery.fn.offset = function(options) {
        if (arguments.length) {
            return options === undefined ?
                this :
                this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
        }

        var docElem, win,
            box = {
                top: 0,
                left: 0
            },
            elem = this[0],
            doc = elem && elem.ownerDocument;

        if (!doc) {
            return;
        }

        docElem = doc.documentElement;

        // Make sure it's not a disconnected DOM node
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }

        // If we don't have gBCR, just use 0,0 rather than error
        // BlackBerry 5, iOS 3 (original iPhone)
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };

    jQuery.offset = {

        setOffset: function(elem, options, i) {
            var position = jQuery.css(elem, "position");

            // set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            var curElem = jQuery(elem),
                curOffset = curElem.offset(),
                curCSSTop = jQuery.css(elem, "top"),
                curCSSLeft = jQuery.css(elem, "left"),
                calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
                props = {},
                curPosition = {},
                curTop, curLeft;

            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }

            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };


    jQuery.fn.extend({

        position: function() {
            if (!this[0]) {
                return;
            }

            var offsetParent, offset,
                parentOffset = {
                    top: 0,
                    left: 0
                },
                elem = this[0];

            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
            if (jQuery.css(elem, "position") === "fixed") {
                // we assume that getBoundingClientRect is available when computed position is fixed
                offset = elem.getBoundingClientRect();
            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }

            // Subtract parent offsets and element margins
            // note: when an element has margin: auto the offsetLeft and marginLeft
            // are the same in Safari causing offset.left to incorrectly be 0
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },

        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.documentElement;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || document.documentElement;
            });
        }
    });


    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = /Y/.test(prop);

        jQuery.fn[method] = function(val) {
            return jQuery.access(this, function(elem, method, val) {
                var win = getWindow(elem);

                if (val === undefined) {
                    return win ? (prop in win) ? win[prop] :
                        win.document.documentElement[method] :
                        elem[method];
                }

                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(),
                        top ? val : jQuery(win).scrollTop()
                    );

                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });

    function getWindow(elem) {
        return jQuery.isWindow(elem) ?
            elem :
            elem.nodeType === 9 ?
            elem.defaultView || elem.parentWindow :
            false;
    }
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(defaultExtra, funcName) {
            // margin is only for outerHeight, outerWidth
            jQuery.fn[funcName] = function(margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                return jQuery.access(this, function(elem, type, value) {
                    var doc;

                    if (jQuery.isWindow(elem)) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement["client" + name];
                    }

                    // Get document width or height
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;

                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
                        return Math.max(
                            elem.body["scroll" + name], doc["scroll" + name],
                            elem.body["offset" + name], doc["offset" + name],
                            doc["client" + name]
                        );
                    }

                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css(elem, type, extra) :

                        // Set width or height on the element
                        jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    // Limit scope pollution from any deprecated API
    // (function() {

    // })();
    // Expose jQuery to the global object
    window.jQuery = window.$ = jQuery;

    // Expose jQuery as an AMD module, but only for AMD loaders that
    // understand the issues with loading multiple versions of jQuery
    // in a page that all might call define(). The loader will indicate
    // they have special allowances for multiple jQuery versions by
    // specifying define.amd.jQuery = true. Register as a named module,
    // since jQuery can be concatenated with other files that may use define,
    // but not use a proper concatenation script that understands anonymous
    // AMD modules. A named AMD is safest and most robust way to register.
    // Lowercase jquery is used because AMD module names are derived from
    // file names, and jQuery is normally delivered in a lowercase file name.
    // Do this after creating the global so that if an AMD module wants to call
    // noConflict to hide this version of jQuery, it will work.
    if (typeof define === "function" && define.amd && define.amd.jQuery) {
        define("jquery", [], function() {
            return jQuery;
        });
    }

})(window);

var JSON;
if (!JSON) {
    JSON = {}
}(function() {
    function f(n) {
        return n < 10 ? "0" + n : n
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function(key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function(key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap, indent, meta = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        },
        rep;

    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }

    function str(key, holder) {
        var i, k, v, length, mind = gap,
            partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
            case "string":
                return quote(value);
            case "number":
                return isFinite(value) ? String(value) : "null";
            case "boolean":
            case "null":
                return String(value);
            case "object":
                if (!value) {
                    return "null"
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || "null"
                    }
                    v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                    gap = mind;
                    return v
                }
                if (rep && typeof rep === "object") {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === "string") {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                }
                v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                gap = mind;
                return v
        }
    }
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function(value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {
                "": value
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function(text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function(a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({
                    "": j
                }, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
/**
 * Version: 1.0 Alpha-1
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/.
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo = {
    name: "en-US",
    englishName: "English (United States)",
    nativeName: "English (United States)",
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    abbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    shortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    firstLetterDayNames: ["S", "M", "T", "W", "T", "F", "S"],
    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    abbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    amDesignator: "AM",
    pmDesignator: "PM",
    firstDayOfWeek: 0,
    twoDigitYearMax: 2029,
    dateElementOrder: "mdy",
    formatPatterns: {
        shortDate: "M/d/yyyy",
        longDate: "dddd, MMMM dd, yyyy",
        shortTime: "h:mm tt",
        longTime: "h:mm:ss tt",
        fullDateTime: "dddd, MMMM dd, yyyy h:mm:ss tt",
        sortableDateTime: "yyyy-MM-ddTHH:mm:ss",
        universalSortableDateTime: "yyyy-MM-dd HH:mm:ssZ",
        rfc1123: "ddd, dd MMM yyyy HH:mm:ss GMT",
        monthDay: "MMMM dd",
        yearMonth: "MMMM, yyyy"
    },
    regexPatterns: {
        jan: /^jan(uary)?/i,
        feb: /^feb(ruary)?/i,
        mar: /^mar(ch)?/i,
        apr: /^apr(il)?/i,
        may: /^may/i,
        jun: /^jun(e)?/i,
        jul: /^jul(y)?/i,
        aug: /^aug(ust)?/i,
        sep: /^sep(t(ember)?)?/i,
        oct: /^oct(ober)?/i,
        nov: /^nov(ember)?/i,
        dec: /^dec(ember)?/i,
        sun: /^su(n(day)?)?/i,
        mon: /^mo(n(day)?)?/i,
        tue: /^tu(e(s(day)?)?)?/i,
        wed: /^we(d(nesday)?)?/i,
        thu: /^th(u(r(s(day)?)?)?)?/i,
        fri: /^fr(i(day)?)?/i,
        sat: /^sa(t(urday)?)?/i,
        future: /^next/i,
        past: /^last|past|prev(ious)?/i,
        add: /^(\+|after|from)/i,
        subtract: /^(\-|before|ago)/i,
        yesterday: /^yesterday/i,
        today: /^t(oday)?/i,
        tomorrow: /^tomorrow/i,
        now: /^n(ow)?/i,
        millisecond: /^ms|milli(second)?s?/i,
        second: /^sec(ond)?s?/i,
        minute: /^min(ute)?s?/i,
        hour: /^h(ou)?rs?/i,
        week: /^w(ee)?k/i,
        month: /^m(o(nth)?s?)?/i,
        day: /^d(ays?)?/i,
        year: /^y((ea)?rs?)?/i,
        shortMeridian: /^(a|p)/i,
        longMeridian: /^(a\.?m?\.?|p\.?m?\.?)/i,
        timezone: /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,
        ordinalSuffix: /^\s*(st|nd|rd|th)/i,
        timeContext: /^\s*(\:|a|p)/i
    },
    abbreviatedTimeZoneStandard: {
        GMT: "-000",
        EST: "-0400",
        CST: "-0500",
        MST: "-0600",
        PST: "-0700"
    },
    abbreviatedTimeZoneDST: {
        GMT: "-000",
        EDT: "-0500",
        CDT: "-0600",
        MDT: "-0700",
        PDT: "-0800"
    }
};
Date.getMonthNumberFromName = function(name) {
    var n = Date.CultureInfo.monthNames,
        m = Date.CultureInfo.abbreviatedMonthNames,
        s = name.toLowerCase();
    for (var i = 0; i < n.length; i++) {
        if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
            return i;
        }
    }
    return -1;
};
Date.getDayNumberFromName = function(name) {
    var n = Date.CultureInfo.dayNames,
        m = Date.CultureInfo.abbreviatedDayNames,
        o = Date.CultureInfo.shortestDayNames,
        s = name.toLowerCase();
    for (var i = 0; i < n.length; i++) {
        if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
            return i;
        }
    }
    return -1;
};
Date.isLeapYear = function(year) {
    return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
};
Date.getDaysInMonth = function(year, month) {
    return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
};
Date.getTimezoneOffset = function(s, dst) {
    return (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()] : Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];
};
Date.getTimezoneAbbreviation = function(offset, dst) {
    var n = (dst || false) ? Date.CultureInfo.abbreviatedTimeZoneDST : Date.CultureInfo.abbreviatedTimeZoneStandard,
        p;
    for (p in n) {
        if (n[p] === offset) {
            return p;
        }
    }
    return null;
};
Date.prototype.clone = function() {
    return new Date(this.getTime());
};
Date.prototype.compareTo = function(date) {
    if (isNaN(this)) {
        throw new Error(this);
    }
    if (date instanceof Date && !isNaN(date)) {
        return (this > date) ? 1 : (this < date) ? -1 : 0;
    } else {
        throw new TypeError(date);
    }
};
Date.prototype.equals = function(date) {
    return (this.compareTo(date) === 0);
};
Date.prototype.between = function(start, end) {
    var t = this.getTime();
    return t >= start.getTime() && t <= end.getTime();
};
Date.prototype.addMilliseconds = function(value) {
    this.setMilliseconds(this.getMilliseconds() + value);
    return this;
};
Date.prototype.addSeconds = function(value) {
    return this.addMilliseconds(value * 1000);
};
Date.prototype.addMinutes = function(value) {
    return this.addMilliseconds(value * 60000);
};
Date.prototype.addHours = function(value) {
    return this.addMilliseconds(value * 3600000);
};
Date.prototype.addDays = function(value) {
    return this.addMilliseconds(value * 86400000);
};
Date.prototype.addWeeks = function(value) {
    return this.addMilliseconds(value * 604800000);
};
Date.prototype.addMonths = function(value) {
    var n = this.getDate();
    this.setDate(1);
    this.setMonth(this.getMonth() + value);
    this.setDate(Math.min(n, this.getDaysInMonth()));
    return this;
};
Date.prototype.addYears = function(value) {
    return this.addMonths(value * 12);
};
Date.prototype.add = function(config) {
    if (typeof config == "number") {
        this._orient = config;
        return this;
    }
    var x = config;
    if (x.millisecond || x.milliseconds) {
        this.addMilliseconds(x.millisecond || x.milliseconds);
    }
    if (x.second || x.seconds) {
        this.addSeconds(x.second || x.seconds);
    }
    if (x.minute || x.minutes) {
        this.addMinutes(x.minute || x.minutes);
    }
    if (x.hour || x.hours) {
        this.addHours(x.hour || x.hours);
    }
    if (x.month || x.months) {
        this.addMonths(x.month || x.months);
    }
    if (x.year || x.years) {
        this.addYears(x.year || x.years);
    }
    if (x.day || x.days) {
        this.addDays(x.day || x.days);
    }
    return this;
};
Date._validate = function(value, min, max, name) {
    if (typeof value != "number") {
        throw new TypeError(value + " is not a Number.");
    } else if (value < min || value > max) {
        throw new RangeError(value + " is not a valid value for " + name + ".");
    }
    return true;
};
Date.validateMillisecond = function(n) {
    return Date._validate(n, 0, 999, "milliseconds");
};
Date.validateSecond = function(n) {
    return Date._validate(n, 0, 59, "seconds");
};
Date.validateMinute = function(n) {
    return Date._validate(n, 0, 59, "minutes");
};
Date.validateHour = function(n) {
    return Date._validate(n, 0, 23, "hours");
};
Date.validateDay = function(n, year, month) {
    return Date._validate(n, 1, Date.getDaysInMonth(year, month), "days");
};
Date.validateMonth = function(n) {
    return Date._validate(n, 0, 11, "months");
};
Date.validateYear = function(n) {
    return Date._validate(n, 1, 9999, "seconds");
};
Date.prototype.set = function(config) {
    var x = config;
    if (!x.millisecond && x.millisecond !== 0) {
        x.millisecond = -1;
    }
    if (!x.second && x.second !== 0) {
        x.second = -1;
    }
    if (!x.minute && x.minute !== 0) {
        x.minute = -1;
    }
    if (!x.hour && x.hour !== 0) {
        x.hour = -1;
    }
    if (!x.day && x.day !== 0) {
        x.day = -1;
    }
    if (!x.month && x.month !== 0) {
        x.month = -1;
    }
    if (!x.year && x.year !== 0) {
        x.year = -1;
    }
    if (x.millisecond != -1 && Date.validateMillisecond(x.millisecond)) {
        this.addMilliseconds(x.millisecond - this.getMilliseconds());
    }
    if (x.second != -1 && Date.validateSecond(x.second)) {
        this.addSeconds(x.second - this.getSeconds());
    }
    if (x.minute != -1 && Date.validateMinute(x.minute)) {
        this.addMinutes(x.minute - this.getMinutes());
    }
    if (x.hour != -1 && Date.validateHour(x.hour)) {
        this.addHours(x.hour - this.getHours());
    }
    if (x.month !== -1 && Date.validateMonth(x.month)) {
        this.addMonths(x.month - this.getMonth());
    }
    if (x.year != -1 && Date.validateYear(x.year)) {
        this.addYears(x.year - this.getFullYear());
    }
    if (x.day != -1 && Date.validateDay(x.day, this.getFullYear(), this.getMonth())) {
        this.addDays(x.day - this.getDate());
    }
    if (x.timezone) {
        this.setTimezone(x.timezone);
    }
    if (x.timezoneOffset) {
        this.setTimezoneOffset(x.timezoneOffset);
    }
    return this;
};
Date.prototype.clearTime = function() {
    this.setHours(0);
    this.setMinutes(0);
    this.setSeconds(0);
    this.setMilliseconds(0);
    return this;
};
Date.prototype.isLeapYear = function() {
    var y = this.getFullYear();
    return (((y % 4 === 0) && (y % 100 !== 0)) || (y % 400 === 0));
};
Date.prototype.isWeekday = function() {
    return !(this.is().sat() || this.is().sun());
};
Date.prototype.getDaysInMonth = function() {
    return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
};
Date.prototype.moveToFirstDayOfMonth = function() {
    return this.set({
        day: 1
    });
};
Date.prototype.moveToLastDayOfMonth = function() {
    return this.set({
        day: this.getDaysInMonth()
    });
};
Date.prototype.moveToDayOfWeek = function(day, orient) {
    var diff = (day - this.getDay() + 7 * (orient || +1)) % 7;
    return this.addDays((diff === 0) ? diff += 7 * (orient || +1) : diff);
};
Date.prototype.moveToMonth = function(month, orient) {
    var diff = (month - this.getMonth() + 12 * (orient || +1)) % 12;
    return this.addMonths((diff === 0) ? diff += 12 * (orient || +1) : diff);
};
Date.prototype.getDayOfYear = function() {
    return Math.floor((this - new Date(this.getFullYear(), 0, 1)) / 86400000);
};
Date.prototype.getWeekOfYear = function(firstDayOfWeek) {
    var y = this.getFullYear(),
        m = this.getMonth(),
        d = this.getDate();
    var dow = firstDayOfWeek || Date.CultureInfo.firstDayOfWeek;
    var offset = 7 + 1 - new Date(y, 0, 1).getDay();
    if (offset == 8) {
        offset = 1;
    }
    var daynum = ((Date.UTC(y, m, d, 0, 0, 0) - Date.UTC(y, 0, 1, 0, 0, 0)) / 86400000) + 1;
    var w = Math.floor((daynum - offset + 7) / 7);
    if (w === dow) {
        y--;
        var prevOffset = 7 + 1 - new Date(y, 0, 1).getDay();
        if (prevOffset == 2 || prevOffset == 8) {
            w = 53;
        } else {
            w = 52;
        }
    }
    return w;
};
Date.prototype.isDST = function() {
    return this.toString().match(/(E|C|M|P)(S|D)T/)[2] == "D";
};
Date.prototype.getTimezone = function() {
    return Date.getTimezoneAbbreviation(this.getUTCOffset, this.isDST());
};
Date.prototype.setTimezoneOffset = function(s) {
    var here = this.getTimezoneOffset(),
        there = Number(s) * -6 / 10;
    this.addMinutes(there - here);
    return this;
};
Date.prototype.setTimezone = function(s) {
    return this.setTimezoneOffset(Date.getTimezoneOffset(s));
};
Date.prototype.getUTCOffset = function() {
    var n = this.getTimezoneOffset() * -10 / 6,
        r;
    if (n < 0) {
        r = (n - 10000).toString();
        return r[0] + r.substr(2);
    } else {
        r = (n + 10000).toString();
        return "+" + r.substr(1);
    }
};
Date.prototype.getDayName = function(abbrev) {
    return abbrev ? Date.CultureInfo.abbreviatedDayNames[this.getDay()] : Date.CultureInfo.dayNames[this.getDay()];
};
Date.prototype.getMonthName = function(abbrev) {
    return abbrev ? Date.CultureInfo.abbreviatedMonthNames[this.getMonth()] : Date.CultureInfo.monthNames[this.getMonth()];
};
Date.prototype._toString = Date.prototype.toString;
Date.prototype.toString = function(format) {
    var self = this;
    var p = function p(s) {
        return (s.toString().length == 1) ? "0" + s : s;
    };
    return format ? format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g, function(format) {
        switch (format) {
            case "hh":
                return p(self.getHours() < 13 ? self.getHours() : (self.getHours() - 12));
            case "h":
                return self.getHours() < 13 ? self.getHours() : (self.getHours() - 12);
            case "HH":
                return p(self.getHours());
            case "H":
                return self.getHours();
            case "mm":
                return p(self.getMinutes());
            case "m":
                return self.getMinutes();
            case "ss":
                return p(self.getSeconds());
            case "s":
                return self.getSeconds();
            case "yyyy":
                return self.getFullYear();
            case "yy":
                return self.getFullYear().toString().substring(2, 4);
            case "dddd":
                return self.getDayName();
            case "ddd":
                return self.getDayName(true);
            case "dd":
                return p(self.getDate());
            case "d":
                return self.getDate().toString();
            case "MMMM":
                return self.getMonthName();
            case "MMM":
                return self.getMonthName(true);
            case "MM":
                return p((self.getMonth() + 1));
            case "M":
                return self.getMonth() + 1;
            case "t":
                return self.getHours() < 12 ? Date.CultureInfo.amDesignator.substring(0, 1) : Date.CultureInfo.pmDesignator.substring(0, 1);
            case "tt":
                return self.getHours() < 12 ? Date.CultureInfo.amDesignator : Date.CultureInfo.pmDesignator;
            case "zzz":
            case "zz":
            case "z":
                return "";
        }
    }) : this._toString();
};
Date.now = function() {
    return new Date();
};
Date.today = function() {
    return Date.now().clearTime();
};
Date.prototype._orient = +1;
Date.prototype.next = function() {
    this._orient = +1;
    return this;
};
Date.prototype.last = Date.prototype.prev = Date.prototype.previous = function() {
    this._orient = -1;
    return this;
};
Date.prototype._is = false;
Date.prototype.is = function() {
    this._is = true;
    return this;
};
Number.prototype._dateElement = "day";
Number.prototype.fromNow = function() {
    var c = {};
    c[this._dateElement] = this;
    return Date.now().add(c);
};
Number.prototype.ago = function() {
    var c = {};
    c[this._dateElement] = this * -1;
    return Date.now().add(c);
};
(function() {
    var $D = Date.prototype,
        $N = Number.prototype;
    var dx = ("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),
        mx = ("january february march april may june july august september october november december").split(/\s/),
        px = ("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),
        de;
    var df = function(n) {
        return function() {
            if (this._is) {
                this._is = false;
                return this.getDay() == n;
            }
            return this.moveToDayOfWeek(n, this._orient);
        };
    };
    for (var i = 0; i < dx.length; i++) {
        $D[dx[i]] = $D[dx[i].substring(0, 3)] = df(i);
    }
    var mf = function(n) {
        return function() {
            if (this._is) {
                this._is = false;
                return this.getMonth() === n;
            }
            return this.moveToMonth(n, this._orient);
        };
    };
    for (var j = 0; j < mx.length; j++) {
        $D[mx[j]] = $D[mx[j].substring(0, 3)] = mf(j);
    }
    var ef = function(j) {
        return function() {
            if (j.substring(j.length - 1) != "s") {
                j += "s";
            }
            return this["add" + j](this._orient);
        };
    };
    var nf = function(n) {
        return function() {
            this._dateElement = n;
            return this;
        };
    };
    for (var k = 0; k < px.length; k++) {
        de = px[k].toLowerCase();
        $D[de] = $D[de + "s"] = ef(px[k]);
        $N[de] = $N[de + "s"] = nf(de);
    }
}());
Date.prototype.toJSONString = function() {
    return this.toString("yyyy-MM-ddThh:mm:ssZ");
};
Date.prototype.toShortDateString = function() {
    return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);
};
Date.prototype.toLongDateString = function() {
    return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);
};
Date.prototype.toShortTimeString = function() {
    return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);
};
Date.prototype.toLongTimeString = function() {
    return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);
};
Date.prototype.getOrdinal = function() {
    switch (this.getDate()) {
        case 1:
        case 21:
        case 31:
            return "st";
        case 2:
        case 22:
            return "nd";
        case 3:
        case 23:
            return "rd";
        default:
            return "th";
    }
};
(function() {
    Date.Parsing = {
        Exception: function(s) {
            this.message = "Parse error at '" + s.substring(0, 10) + " ...'";
        }
    };
    var $P = Date.Parsing;
    var _ = $P.Operators = {
        rtoken: function(r) {
            return function(s) {
                var mx = s.match(r);
                if (mx) {
                    return ([mx[0], s.substring(mx[0].length)]);
                } else {
                    throw new $P.Exception(s);
                }
            };
        },
        token: function(s) {
            return function(s) {
                return _.rtoken(new RegExp("^\s*" + s + "\s*"))(s);
            };
        },
        stoken: function(s) {
            return _.rtoken(new RegExp("^" + s));
        },
        until: function(p) {
            return function(s) {
                var qx = [],
                    rx = null;
                while (s.length) {
                    try {
                        rx = p.call(this, s);
                    } catch (e) {
                        qx.push(rx[0]);
                        s = rx[1];
                        continue;
                    }
                    break;
                }
                return [qx, s];
            };
        },
        many: function(p) {
            return function(s) {
                var rx = [],
                    r = null;
                while (s.length) {
                    try {
                        r = p.call(this, s);
                    } catch (e) {
                        return [rx, s];
                    }
                    rx.push(r[0]);
                    s = r[1];
                }
                return [rx, s];
            };
        },
        optional: function(p) {
            return function(s) {
                var r = null;
                try {
                    r = p.call(this, s);
                } catch (e) {
                    return [null, s];
                }
                return [r[0], r[1]];
            };
        },
        not: function(p) {
            return function(s) {
                try {
                    p.call(this, s);
                } catch (e) {
                    return [null, s];
                }
                throw new $P.Exception(s);
            };
        },
        ignore: function(p) {
            return p ? function(s) {
                var r = null;
                r = p.call(this, s);
                return [null, r[1]];
            } : null;
        },
        product: function() {
            var px = arguments[0],
                qx = Array.prototype.slice.call(arguments, 1),
                rx = [];
            for (var i = 0; i < px.length; i++) {
                rx.push(_.each(px[i], qx));
            }
            return rx;
        },
        cache: function(rule) {
            var cache = {},
                r = null;
            return function(s) {
                try {
                    r = cache[s] = (cache[s] || rule.call(this, s));
                } catch (e) {
                    r = cache[s] = e;
                }
                if (r instanceof $P.Exception) {
                    throw r;
                } else {
                    return r;
                }
            };
        },
        any: function() {
            var px = arguments;
            return function(s) {
                var r = null;
                for (var i = 0; i < px.length; i++) {
                    if (px[i] == null) {
                        continue;
                    }
                    try {
                        r = (px[i].call(this, s));
                    } catch (e) {
                        r = null;
                    }
                    if (r) {
                        return r;
                    }
                }
                throw new $P.Exception(s);
            };
        },
        each: function() {
            var px = arguments;
            return function(s) {
                var rx = [],
                    r = null;
                for (var i = 0; i < px.length; i++) {
                    if (px[i] == null) {
                        continue;
                    }
                    try {
                        r = (px[i].call(this, s));
                    } catch (e) {
                        throw new $P.Exception(s);
                    }
                    rx.push(r[0]);
                    s = r[1];
                }
                return [rx, s];
            };
        },
        all: function() {
            var px = arguments,
                _ = _;
            return _.each(_.optional(px));
        },
        sequence: function(px, d, c) {
            d = d || _.rtoken(/^\s*/);
            c = c || null;
            if (px.length == 1) {
                return px[0];
            }
            return function(s) {
                var r = null,
                    q = null;
                var rx = [];
                for (var i = 0; i < px.length; i++) {
                    try {
                        r = px[i].call(this, s);
                    } catch (e) {
                        break;
                    }
                    rx.push(r[0]);
                    try {
                        q = d.call(this, r[1]);
                    } catch (ex) {
                        q = null;
                        break;
                    }
                    s = q[1];
                }
                if (!r) {
                    throw new $P.Exception(s);
                }
                if (q) {
                    throw new $P.Exception(q[1]);
                }
                if (c) {
                    try {
                        r = c.call(this, r[1]);
                    } catch (ey) {
                        throw new $P.Exception(r[1]);
                    }
                }
                return [rx, (r ? r[1] : s)];
            };
        },
        between: function(d1, p, d2) {
            d2 = d2 || d1;
            var _fn = _.each(_.ignore(d1), p, _.ignore(d2));
            return function(s) {
                var rx = _fn.call(this, s);
                return [
                    [rx[0][0], r[0][2]], rx[1]
                ];
            };
        },
        list: function(p, d, c) {
            d = d || _.rtoken(/^\s*/);
            c = c || null;
            return (p instanceof Array ? _.each(_.product(p.slice(0, -1), _.ignore(d)), p.slice(-1), _.ignore(c)) : _.each(_.many(_.each(p, _.ignore(d))), px, _.ignore(c)));
        },
        set: function(px, d, c) {
            d = d || _.rtoken(/^\s*/);
            c = c || null;
            return function(s) {
                var r = null,
                    p = null,
                    q = null,
                    rx = null,
                    best = [
                        [], s
                    ],
                    last = false;
                for (var i = 0; i < px.length; i++) {
                    q = null;
                    p = null;
                    r = null;
                    last = (px.length == 1);
                    try {
                        r = px[i].call(this, s);
                    } catch (e) {
                        continue;
                    }
                    rx = [
                        [r[0]], r[1]
                    ];
                    if (r[1].length > 0 && !last) {
                        try {
                            q = d.call(this, r[1]);
                        } catch (ex) {
                            last = true;
                        }
                    } else {
                        last = true;
                    }
                    if (!last && q[1].length === 0) {
                        last = true;
                    }
                    if (!last) {
                        var qx = [];
                        for (var j = 0; j < px.length; j++) {
                            if (i != j) {
                                qx.push(px[j]);
                            }
                        }
                        p = _.set(qx, d).call(this, q[1]);
                        if (p[0].length > 0) {
                            rx[0] = rx[0].concat(p[0]);
                            rx[1] = p[1];
                        }
                    }
                    if (rx[1].length < best[1].length) {
                        best = rx;
                    }
                    if (best[1].length === 0) {
                        break;
                    }
                }
                if (best[0].length === 0) {
                    return best;
                }
                if (c) {
                    try {
                        q = c.call(this, best[1]);
                    } catch (ey) {
                        throw new $P.Exception(best[1]);
                    }
                    best[1] = q[1];
                }
                return best;
            };
        },
        forward: function(gr, fname) {
            return function(s) {
                return gr[fname].call(this, s);
            };
        },
        replace: function(rule, repl) {
            return function(s) {
                var r = rule.call(this, s);
                return [repl, r[1]];
            };
        },
        process: function(rule, fn) {
            return function(s) {
                var r = rule.call(this, s);
                return [fn.call(this, r[0]), r[1]];
            };
        },
        min: function(min, rule) {
            return function(s) {
                var rx = rule.call(this, s);
                if (rx[0].length < min) {
                    throw new $P.Exception(s);
                }
                return rx;
            };
        }
    };
    var _generator = function(op) {
        return function() {
            var args = null,
                rx = [];
            if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
            } else if (arguments[0] instanceof Array) {
                args = arguments[0];
            }
            if (args) {
                for (var i = 0, px = args.shift(); i < px.length; i++) {
                    args.unshift(px[i]);
                    rx.push(op.apply(null, args));
                    args.shift();
                    return rx;
                }
            } else {
                return op.apply(null, arguments);
            }
        };
    };
    var gx = "optional not ignore cache".split(/\s/);
    for (var i = 0; i < gx.length; i++) {
        _[gx[i]] = _generator(_[gx[i]]);
    }
    var _vector = function(op) {
        return function() {
            if (arguments[0] instanceof Array) {
                return op.apply(null, arguments[0]);
            } else {
                return op.apply(null, arguments);
            }
        };
    };
    var vx = "each any all".split(/\s/);
    for (var j = 0; j < vx.length; j++) {
        _[vx[j]] = _vector(_[vx[j]]);
    }
}());
(function() {
    var flattenAndCompact = function(ax) {
        var rx = [];
        for (var i = 0; i < ax.length; i++) {
            if (ax[i] instanceof Array) {
                rx = rx.concat(flattenAndCompact(ax[i]));
            } else {
                if (ax[i]) {
                    rx.push(ax[i]);
                }
            }
        }
        return rx;
    };
    Date.Grammar = {};
    Date.Translator = {
        hour: function(s) {
            return function() {
                this.hour = Number(s);
            };
        },
        minute: function(s) {
            return function() {
                this.minute = Number(s);
            };
        },
        second: function(s) {
            return function() {
                this.second = Number(s);
            };
        },
        meridian: function(s) {
            return function() {
                this.meridian = s.slice(0, 1).toLowerCase();
            };
        },
        timezone: function(s) {
            return function() {
                var n = s.replace(/[^\d\+\-]/g, "");
                if (n.length) {
                    this.timezoneOffset = Number(n);
                } else {
                    this.timezone = s.toLowerCase();
                }
            };
        },
        day: function(x) {
            var s = x[0];
            return function() {
                this.day = Number(s.match(/\d+/)[0]);
            };
        },
        month: function(s) {
            return function() {
                this.month = ((s.length == 3) ? Date.getMonthNumberFromName(s) : (Number(s) - 1));
            };
        },
        year: function(s) {
            return function() {
                var n = Number(s);
                this.year = ((s.length > 2) ? n : (n + (((n + 2000) < Date.CultureInfo.twoDigitYearMax) ? 2000 : 1900)));
            };
        },
        rday: function(s) {
            return function() {
                switch (s) {
                    case "yesterday":
                        this.days = -1;
                        break;
                    case "tomorrow":
                        this.days = 1;
                        break;
                    case "today":
                        this.days = 0;
                        break;
                    case "now":
                        this.days = 0;
                        this.now = true;
                        break;
                }
            };
        },
        finishExact: function(x) {
            x = (x instanceof Array) ? x : [x];
            var now = new Date();
            this.year = now.getFullYear();
            this.month = now.getMonth();
            this.day = 1;
            this.hour = 0;
            this.minute = 0;
            this.second = 0;
            for (var i = 0; i < x.length; i++) {
                if (x[i]) {
                    x[i].call(this);
                }
            }
            this.hour = (this.meridian == "p" && this.hour < 13) ? this.hour + 12 : this.hour;
            if (this.day > Date.getDaysInMonth(this.year, this.month)) {
                throw new RangeError(this.day + " is not a valid value for days.");
            }
            var r = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second);
            if (this.timezone) {
                r.set({
                    timezone: this.timezone
                });
            } else if (this.timezoneOffset) {
                r.set({
                    timezoneOffset: this.timezoneOffset
                });
            }
            return r;
        },
        finish: function(x) {
            x = (x instanceof Array) ? flattenAndCompact(x) : [x];
            if (x.length === 0) {
                return null;
            }
            for (var i = 0; i < x.length; i++) {
                if (typeof x[i] == "function") {
                    x[i].call(this);
                }
            }
            if (this.now) {
                return new Date();
            }
            var today = Date.today();
            var method = null;
            var expression = !!(this.days != null || this.orient || this.operator);
            if (expression) {
                var gap, mod, orient;
                orient = ((this.orient == "past" || this.operator == "subtract") ? -1 : 1);
                if (this.weekday) {
                    this.unit = "day";
                    gap = (Date.getDayNumberFromName(this.weekday) - today.getDay());
                    mod = 7;
                    this.days = gap ? ((gap + (orient * mod)) % mod) : (orient * mod);
                }
                if (this.month) {
                    this.unit = "month";
                    gap = (this.month - today.getMonth());
                    mod = 12;
                    this.months = gap ? ((gap + (orient * mod)) % mod) : (orient * mod);
                    this.month = null;
                }
                if (!this.unit) {
                    this.unit = "day";
                }
                if (this[this.unit + "s"] == null || this.operator != null) {
                    if (!this.value) {
                        this.value = 1;
                    }
                    if (this.unit == "week") {
                        this.unit = "day";
                        this.value = this.value * 7;
                    }
                    this[this.unit + "s"] = this.value * orient;
                }
                return today.add(this);
            } else {
                if (this.meridian && this.hour) {
                    this.hour = (this.hour < 13 && this.meridian == "p") ? this.hour + 12 : this.hour;
                }
                if (this.weekday && !this.day) {
                    this.day = (today.addDays((Date.getDayNumberFromName(this.weekday) - today.getDay()))).getDate();
                }
                if (this.month && !this.day) {
                    this.day = 1;
                }
                return today.set(this);
            }
        }
    };
    var _ = Date.Parsing.Operators,
        g = Date.Grammar,
        t = Date.Translator,
        _fn;
    g.datePartDelimiter = _.rtoken(/^([\s\-\.\,\/\x27]+)/);
    g.timePartDelimiter = _.stoken(":");
    g.whiteSpace = _.rtoken(/^\s*/);
    g.generalDelimiter = _.rtoken(/^(([\s\,]|at|on)+)/);
    var _C = {};
    g.ctoken = function(keys) {
        var fn = _C[keys];
        if (!fn) {
            var c = Date.CultureInfo.regexPatterns;
            var kx = keys.split(/\s+/),
                px = [];
            for (var i = 0; i < kx.length; i++) {
                px.push(_.replace(_.rtoken(c[kx[i]]), kx[i]));
            }
            fn = _C[keys] = _.any.apply(null, px);
        }
        return fn;
    };
    g.ctoken2 = function(key) {
        return _.rtoken(Date.CultureInfo.regexPatterns[key]);
    };
    g.h = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/), t.hour));
    g.hh = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/), t.hour));
    g.H = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/), t.hour));
    g.HH = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/), t.hour));
    g.m = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.minute));
    g.mm = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.minute));
    g.s = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.second));
    g.ss = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.second));
    g.hms = _.cache(_.sequence([g.H, g.mm, g.ss], g.timePartDelimiter));
    g.t = _.cache(_.process(g.ctoken2("shortMeridian"), t.meridian));
    g.tt = _.cache(_.process(g.ctoken2("longMeridian"), t.meridian));
    g.z = _.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/), t.timezone));
    g.zz = _.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/), t.timezone));
    g.zzz = _.cache(_.process(g.ctoken2("timezone"), t.timezone));
    g.timeSuffix = _.each(_.ignore(g.whiteSpace), _.set([g.tt, g.zzz]));
    g.time = _.each(_.optional(_.ignore(_.stoken("T"))), g.hms, g.timeSuffix);
    g.d = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/), _.optional(g.ctoken2("ordinalSuffix"))), t.day));
    g.dd = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/), _.optional(g.ctoken2("ordinalSuffix"))), t.day));
    g.ddd = g.dddd = _.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"), function(s) {
        return function() {
            this.weekday = s;
        };
    }));
    g.M = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/), t.month));
    g.MM = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/), t.month));
    g.MMM = g.MMMM = _.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"), t.month));
    g.y = _.cache(_.process(_.rtoken(/^(\d\d?)/), t.year));
    g.yy = _.cache(_.process(_.rtoken(/^(\d\d)/), t.year));
    g.yyy = _.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/), t.year));
    g.yyyy = _.cache(_.process(_.rtoken(/^(\d\d\d\d)/), t.year));
    _fn = function() {
        return _.each(_.any.apply(null, arguments), _.not(g.ctoken2("timeContext")));
    };
    g.day = _fn(g.d, g.dd);
    g.month = _fn(g.M, g.MMM);
    g.year = _fn(g.yyyy, g.yy);
    g.orientation = _.process(g.ctoken("past future"), function(s) {
        return function() {
            this.orient = s;
        };
    });
    g.operator = _.process(g.ctoken("add subtract"), function(s) {
        return function() {
            this.operator = s;
        };
    });
    g.rday = _.process(g.ctoken("yesterday tomorrow today now"), t.rday);
    g.unit = _.process(g.ctoken("minute hour day week month year"), function(s) {
        return function() {
            this.unit = s;
        };
    });
    g.value = _.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/), function(s) {
        return function() {
            this.value = s.replace(/\D/g, "");
        };
    });
    g.expression = _.set([g.rday, g.operator, g.value, g.unit, g.orientation, g.ddd, g.MMM]);
    _fn = function() {
        return _.set(arguments, g.datePartDelimiter);
    };
    g.mdy = _fn(g.ddd, g.month, g.day, g.year);
    g.ymd = _fn(g.ddd, g.year, g.month, g.day);
    g.dmy = _fn(g.ddd, g.day, g.month, g.year);
    g.date = function(s) {
        return ((g[Date.CultureInfo.dateElementOrder] || g.mdy).call(this, s));
    };
    g.format = _.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/), function(fmt) {
        if (g[fmt]) {
            return g[fmt];
        } else {
            throw Date.Parsing.Exception(fmt);
        }
    }), _.process(_.rtoken(/^[^dMyhHmstz]+/), function(s) {
        return _.ignore(_.stoken(s));
    }))), function(rules) {
        return _.process(_.each.apply(null, rules), t.finishExact);
    });
    var _F = {};
    var _get = function(f) {
        return _F[f] = (_F[f] || g.format(f)[0]);
    };
    g.formats = function(fx) {
        if (fx instanceof Array) {
            var rx = [];
            for (var i = 0; i < fx.length; i++) {
                rx.push(_get(fx[i]));
            }
            return _.any.apply(null, rx);
        } else {
            return _get(fx);
        }
    };
    g._formats = g.formats(["yyyy-MM-ddTHH:mm:ss", "ddd, MMM dd, yyyy H:mm:ss tt", "ddd MMM d yyyy HH:mm:ss zzz", "d"]);
    g._start = _.process(_.set([g.date, g.time, g.expression], g.generalDelimiter, g.whiteSpace), t.finish);
    g.start = function(s) {
        try {
            var r = g._formats.call({}, s);
            if (r[1].length === 0) {
                return r;
            }
        } catch (e) {}
        return g._start.call({}, s);
    };
}());
Date._parse = Date.parse;
Date.parse = function(s) {
    var r = null;
    if (!s) {
        return null;
    }
    try {
        r = Date.Grammar.start.call({}, s);
    } catch (e) {
        return null;
    }
    return ((r[1].length === 0) ? r[0] : null);
};
Date.getParseFunction = function(fx) {
    var fn = Date.Grammar.formats(fx);
    return function(s) {
        var r = null;
        try {
            r = fn.call({}, s);
        } catch (e) {
            return null;
        }
        return ((r[1].length === 0) ? r[0] : null);
    };
};
Date.parseExact = function(s, fx) {
    return Date.getParseFunction(fx)(s);
};
var totalChannelStorage = null;
try {
    if (navigator.userAgent.toLowerCase().indexOf("sony") > 0) {
        totalChannelStorage = null
    } else {
        if (typeof localStorage.getItem != "undefined") {
            totalChannelStorage = localStorage
        }
    }
} catch (e) {}
if (totalChannelStorage === null) {
    try {
        totalChannelStorage = {
            initialized: false,
            keys: {}
        };
        totalChannelStorage.init = function() {
            if (this.initialized == true) {
                return
            }
            try {
                var d = document.cookie.split(";");
                for (var c = 0; c < d.length; c++) {
                    var b = d[c];
                    while (b[0] == " ") {
                        b = b.substring(1)
                    }
                    var a = this.getKey(b.substring(0, b.indexOf("=")));
                    this.keys[a] = decodeURIComponent(b.substring(b.indexOf("=") + 1))
                }
            } catch (f) {}
            this.initialized = true
        };
        totalChannelStorage.setItem = function(d, g, c) {
            var b = this.getKey(d);
            totalChannelStorage.init();
            this.keys[b] = g;
            try {
                var a = new Date();
                var f = 0;
                if (c === true) {
                    f = Utils.now() + (10 * 365 * 24 * 3600 * 1000)
                } else {
                    f = Utils.now() + (30 * 24 * 3600 * 1000)
                }
                a.setTime(f);
                document.cookie = b + "=" + encodeURIComponent(g) + "; expires=" + a.toGMTString() + "; path=/"
            } catch (h) {}
            return this.keys[b]
        };
        totalChannelStorage.getKey = function(a) {
            return encodeURIComponent(a.replace(/\./g, "_"))
        };
        totalChannelStorage.getItem = function(c) {
            totalChannelStorage.init();
            var b = null;
            try {
                var a = this.getKey(c);
                b = this.keys[a]
            } catch (d) {
                b = null
            }
            return b
        }
    } catch (e) {}
};
var Subtitles = {
    DISABLED: false,
    tracksLimit: 3,
    subtitles: null,
    allSubtitles: null,
    subtitleLanguages: null,
    currentSubtitle: -1,
    showFn: null,
    getPosFn: null,
    started: false,
    loading: false,
    timeHack: 1,
    KEY: "subtitlesEnabled",
    language: "",
    enabled: null,
    loaded: function() {
        return (Subtitles.subtitles && Subtitles.subtitles.length > 0)
    },
    subtitlesAreEnabled: function() {
        if (Subtitles.enabled === null || typeof Subtitles.enabled === "undefined") {
            this.enabled = (totalChannelStorage.getItem(Subtitles.KEY) === "1")
        }
        return this.enabled
    },
    disable: function() {
        Subtitles.currentSubtitle = -1;
        totalChannelStorage.setItem(Subtitles.KEY, "0");
        this.enabled = false;
        this.pause()
    },
    enable: function() {
        totalChannelStorage.setItem(Subtitles.KEY, "1");
        this.enabled = true;
        this.start();
        return this.language
    },
    check: function(c, f, b) {
        Subtitles.subtitles = null;
        Subtitles.currentSubtitle = -1;
        Subtitles.allSubtitles = null;
        Subtitles.subtitleLanguages = null;
        Subtitles.language = "";
        this.loading = false;
        if (Subtitles.DISABLED === true) {
            return
        }
        if (c.toLowerCase().indexOf(".ism/manifest") > 0) {
            this.loading = true;
            var e = c;
            var a = f;
            var d = b;
            $.ajax({
                type: "GET",
                url: e,
                async: true,
                dataType: "text",
                success: function(u) {
                    try {
                        var r = 0;
                        u = u.replace(/[\x00-\x1F\x80-\xFF]/g, "");
                        var p = "",
                            l = "";
                        if (TVA.OTT.DEVICETYPE != TVA.OTT.DEVICETYPE_BRAVIA) {
                            for (r = 0; r < u.length; r++) {
                                l = u.charCodeAt(r);
                                if (l > 31 && l < 128) {
                                    p += u[r]
                                }
                            }
                        } else {
                            var m = 0;
                            for (r = 0; r < 50; r++) {
                                l = u.charCodeAt(r);
                                if (l <= 31 || l >= 128) {
                                    m = r
                                }
                            }
                            p = u.substr(m)
                        }
                        if (window.DOMParser) {
                            var h = new DOMParser();
                            xmlDoc = h.parseFromString(p, "text/xml")
                        } else {
                            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                            xmlDoc.async = false;
                            xmlDoc.loadXML(p)
                        }
                        var k = [];
                        var y = false;
                        var z = xmlDoc.getElementsByTagName("StreamIndex");
                        var x = "";
                        var g = "";
                        for (var q = 0; q < z.length; q++) {
                            var w = z[q].getAttribute("Type");
                            if (w === "text" && y == false) {
                                x = z[q].getAttribute("Language");
                                g = z[q].getAttribute("Name");
                                Subtitles.language = x;
                                Subtitles.load(e.replace(".ism/Manifest", ".dfxp").replace(".ism/manifest", ".dfxp"), a, d);
                                y = true
                            } else {
                                if (w === "audio") {
                                    x = z[q].getAttribute("Language");
                                    if (x && k.indexOf(x) >= 0) {} else {
                                        if (x === null) {} else {
                                            k[k.length] = x
                                        }
                                    }
                                }
                            }
                        }
                        if (TVA.OTT.DEVICETYPE == 3001) {
                            TVA_Player.setAudioInfo({
                                track: k,
                                selected: 0
                            })
                        }
                    } catch (v) {
                        Subtitles.loading = false
                    }
                },
                error: function() {
                    Subtitles.loading = false
                }
            })
        }
    },
    load: function(b, a, c) {
        if (Subtitles.DISABLED === true) {
            return
        }
        if (TVA.OTT.DEVICETYPE == 4000 || TVA.OTT.DEVICETYPE == 4001 || TVA.OTT.DEVICETYPE == 4002) {
            this.timeHack = 1.0009
        }
        this.loading = true;
        Subtitles.subtitles = null;
        Subtitles.currentSubtitle = -1;
        Subtitles.allSubtitles = null;
        Subtitles.subtitleLanguages = null;
        this.showFn = c;
        this.getPosFn = a;
        this.started = false;
        this.send("");
        if (b) {
            $.ajax({
                url: b,
                type: "GET",
                dataType: "text",
                success: function(d) {
                    try {
                        if (b.indexOf(".dfxp") > 0) {
                            Subtitles.parseDfxp(d)
                        } else {
                            Subtitles.parseSrt(d)
                        }
                        if (Subtitles.loaded() == true) {
                            Subtitles.start()
                        }
                    } catch (f) {}
                    Subtitles.loading = false;
                    if (Subtitles.loaded() == true) {
                        VideoPlayer.setFooter()
                    }
                },
                error: function(d, f, e) {
                    Subtitles.loading = false
                }
            })
        }
    },
    getpos: function() {
        try {
            if (this.getPosFn) {
                return this.getPosFn()
            }
        } catch (a) {}
        return -1
    },
    strip: function(a) {
        return a.replace(/^\s+|\s+$/g, "")
    },
    toSeconds: function(e) {
        var f = 0;
        if (e) {
            var b = e.replace(",", ".");
            var d = b.split(".");
            var h = d[0];
            var a = parseFloat("0." + d[1]);
            var g = h.split(":");
            for (var c = 0; c < g.length; c++) {
                f = f * 60 + parseInt(g[c])
            }
            f = f + a;
            if (Subtitles.timeHack != 1) {
                f = Subtitles.timeHack * f
            }
        }
        return f
    },
    parseDfxp: function(l) {
        if (window.DOMParser) {
            var c = new DOMParser();
            xmlDoc = c.parseFromString(l, "text/xml")
        } else {
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = false;
            xmlDoc.loadXML(l)
        }
        var u = xmlDoc.getElementsByTagName("div");
        if (u.length <= 0) {
            return
        }
        if (u.length > 1) {
            u = [u[0]]
        }
        var p = [];
        var h = [];
        for (var d = 0; d < u.length && d < Subtitles.tracksLimit; d++) {
            var m = [];
            var f = 0;
            var b = u[d].getElementsByTagName("div");
            if (b.length > 0 && b[0].hasAttribute("begin")) {} else {
                b = u[d].getElementsByTagName("p")
            }
            for (var k = 0; k < b.length; k++) {
                is = this.toSeconds(b[k].getAttribute("begin"));
                os = this.toSeconds(b[k].getAttribute("end"));
                t = b[k].getElementsByTagName("span");
                var a = "";
                try {
                    if (t && t.length >= 1) {
                        for (var g = 0; g < t.length; g++) {
                            a = a + "<br/>" + t[g].textContent
                        }
                    } else {
                        a = b[k].textContent
                    }
                } catch (r) {}
                if (a.length == 0) {
                    continue
                }
                m[f] = {
                    i: k,
                    start: is,
                    end: os,
                    txt: a,
                    prev: f - 1,
                    next: -1
                };
                if (f > 0) {
                    m[f - 1]["next"] = f
                }
                f++
            }
            p[p.length] = m;
            var q = u[d].getAttribute("xml:lang");
            h[h.length] = q ? q : "ES"
        }
        Subtitles.subtitles = p[0];
        Subtitles.currentSubtitle = 0;
        Subtitles.subtitleLanguages = h;
        Subtitles.allSubtitles = p
    },
    parseSrt: function(b) {
        b = b.replace(/\r\n|\r|\n/g, "\n");
        var a = 0;
        var d = [];
        b = this.strip(b);
        var c = b.split("\n\n");
        for (s in c) {
            if (c.hasOwnProperty(s)) {
                st = c[s].split("\n");
                if (st.length >= 2) {
                    n = st[0];
                    i = this.strip(st[1].split(" --> ")[0]);
                    o = this.strip(st[1].split(" --> ")[1]);
                    t = st[2];
                    if (st.length > 2) {
                        for (j = 3; j < st.length; j++) {
                            t += "\n" + st[j]
                        }
                    }
                    is = this.toSeconds(i);
                    os = this.toSeconds(o);
                    d[a] = {
                        i: i,
                        start: is,
                        end: os,
                        txt: t,
                        prev: a - 1,
                        next: -1
                    };
                    if (a > 0) {
                        d[a - 1]["next"] = a
                    }
                    a++
                }
            }
        }
        Subtitles.subtitles = d;
        Subtitles.currentSubtitle = 0;
        Subtitles.allSubtitles = [d];
        Subtitles.subtitleLanguages = ["ES "]
    },
    showTimeout: null,
    hideTimeout: null,
    startTimeout: null,
    deinit: function() {
        this.stop(true);
        clearTimeout(this.hideTimeout);
        Subtitles.subtitles = null;
        Subtitles.allSubtitles = null;
        Subtitles.subtitleLanguages = null;
        Subtitles.currentSubtitle = -1;
        Subtitles.language = "";
        Subtitles.showInfo();
        try {
            Subtitles.showAudioInfo("")
        } catch (a) {}
    },
    stop: function(a) {
        if (Subtitles.DISABLED === true) {
            return
        }
        clearTimeout(this.showTimeout);
        clearTimeout(this.startTimeout);
        if (a !== false) {
            this.started = false
        }
    },
    refresh: function(a) {
        if (Subtitles.DISABLED === true) {
            return
        }
        if (typeof a === "undefined") {
            a = 3000
        }
        clearTimeout(this.startTimeout);
        this.startTimeout = setTimeout(function() {
            Subtitles.start()
        }, a)
    },
    pause: function() {
        if (Subtitles.DISABLED === true) {
            return
        }
        this.stop(true);
        this.send("")
    },
    start: function(f) {
        if (Subtitles.DISABLED === true) {
            return false
        }
        if (Subtitles.subtitlesAreEnabled() == false) {
            return false
        }
        try {
            if (this.subtitles == null) {
                if (this.loading == false) {
                    return false
                }
                clearTimeout(this.startTimeout);
                this.startTimeout = setTimeout("Subtitles.start();", 2000);
                return false
            }
            var a = this.getpos();
            if (a <= 1 || VideoPlayer.initialBufferingComplete == false) {
                clearTimeout(this.startTimeout);
                this.startTimeout = setTimeout("Subtitles.start();", 1000);
                return false
            }
            if (typeof f === "undefined") {
                f = this.seek(a)
            }
            if (f < 0) {
                f = this.next(f);
                if (f < 0) {
                    return false
                }
            }
            Subtitles.showInfo();
            var b = this;
            var d = this.get(f).start;
            if (d - a < 0) {
                b.show(f)
            } else {
                this.send("");
                this.showTimeout = setTimeout(function() {
                    b.show(f)
                }, (d - a) * 1000)
            }
            Subtitles.started = true;
            return true
        } catch (c) {}
        return false
    },
    show: function(e) {
        this.stop(false);
        if (oldPlayerState != TVA_Player.state.playing) {
            this.refresh();
            return
        }
        var d = this.get(e);
        var f = this.next(e);
        var b = this.get(f);
        var c = this;
        var g = this.getpos();
        var a = d ? d.start : 0;
        if (g < a - 1000 || g > a + 1000 || !d) {
            Subtitles.refresh(500);
            return
        }
        this.send(d && d.txt ? d.txt : "");
        if (b) {
            var k = b.start - g;
            if (k < 0) {
                k = 0
            }
            this.showTimeout = setTimeout(function() {
                c.show(f)
            }, Math.floor(k * 1000))
        } else {}
        clearTimeout(this.hideTimeout);
        var h = (d.end - d.start);
        if (h > 0) {
            this.hideTimeout = setTimeout(function() {
                c.send("")
            }, Math.floor((h + 1) * 1000))
        } else {
            this.hideTimeout = setTimeout(function() {
                c.send("")
            }, 5 * 1000)
        }
    },
    send: function(a) {
        try {
            if (this.showFn) {
                this.showFn(a)
            }
        } catch (b) {}
    },
    seek: function(c) {
        for (var b = 0; b < this.subtitles.length; b++) {
            var a = this.subtitles[b].start;
            if (a > c) {
                return b - 1
            }
        }
        return -1
    },
    get: function(a) {
        if (a >= 0 && a < this.subtitles.length) {
            return this.subtitles[a]
        }
        return null
    },
    next: function(a) {
        if (a < 0) {
            return 0
        }
        if (a >= this.subtitles.length) {
            return -1
        }
        return a + 1
    },
    showNext: function() {
        if (Subtitles.started == true) {
            var a = Subtitles.currentSubtitle + 1;
            if (a >= Subtitles.allSubtitles.length) {
                Subtitles.disable();
                Subtitles.currentSubtitle = -1;
                Subtitles.showInfo();
                return "OFF"
            } else {
                Subtitles.currentSubtitle = a;
                Subtitles.subtitles = Subtitles.allSubtitles[Subtitles.currentSubtitle];
                Subtitles.showInfo();
                return Subtitles.subtitleLanguages[Subtitles.currentSubtitle]
            }
        } else {
            Subtitles.currentSubtitle = 0;
            Subtitles.subtitles = Subtitles.allSubtitles[Subtitles.currentSubtitle];
            Subtitles.enable();
            Subtitles.showInfo();
            return "" + Subtitles.subtitleLanguages[Subtitles.currentSubtitle]
        }
    },
    showInfo: function() {
        try {
            var b = $("#video-subt-info");
            if (Subtitles.currentSubtitle >= 0 && Subtitles.currentSubtitle < Subtitles.subtitleLanguages.length) {
                b.removeClass("hide-this");
                b.find(".video-info-span").html("" + Subtitles.subtitleLanguages[Subtitles.currentSubtitle])
            } else {
                b.addClass("hide-this")
            }
        } catch (a) {}
    }
};
Subtitles.showAudioInfo = function(a) {
    try {
        if (a === "UNDEFINED" || a === "undefined" || typeof a === "undefined") {
            a = ""
        }
        var c = $("#video-audio-info");
        if (typeof a === "string" && a.length > 0) {
            c.removeClass("hide-this").find(".video-info-span").html(a)
        } else {
            c.addClass("hide-this").find(".video-info-span").html(a)
        }
    } catch (b) {}
};
Subtitles._setAudioInfo = TVA_Player.setAudioInfo;
TVA_Player.setAudioInfo = function(b) {
    var a = Subtitles._setAudioInfo(b);
    Subtitles.showAudioInfo(a)
};
Subtitles._setAudioTrack = TVA_Player.setAudioTrack;
TVA_Player.setAudioTrack = function(a) {
    var b = Subtitles._setAudioTrack(a);
    Subtitles.showAudioInfo(b)
};
TVA.OTT = TVA.OTT || {};
TVA.OTT.VER = "1.7.1*";
TVA.OTT.BASEURL = "https://api.totalchannel.tv/001/";
TVA.OTT.JSONREQUEST = "json";
TVA.OTT.PLAYER_CAN_PLAY_FROM_POSITION = true;
TVA.OTT.VIDEOCONTROLSHACKDISABLED = true;
TVA.OTT.DLU = "";
TVA.OTT.DAU = "";
TVA.OTT.HIDE_CONTROLS_TO = 10000;
TVA.OTT.SLIDER_TO = 7000;
TVA.OTT.CUSTOMDATA = true;
TVA.OTT.ACODE = "totalchdev";
TVA.OTT.ACODE = "totalch";
TVA.OTT.NICEBALANCER = false;
TVA.OTT.NICETOKEN = "";
TVA.OTT.ORIGINCODE = "";
TVA.OTT.OTTBALANCER = false;
TVA.GUI = TVA.GUI || {};
TVA.GUI.FOCUS_FOOTER = false;
TVA.OTT.TEST_UHD = false;
TVA.OTT.PAIRING = false;
TVA.OTT.LIST_FOCUS_OVER_PLAY = false;
TVA.OTT.SHOW_THUMB_REC_ICON = true;
TVA.OTT.CLOSE_CHLIST = false;
TVA.OTT.WEBOS = false;
TVA.OTT.WEBOS_EMULATOR = false;
TVA.GUI.HIDE_BUTTONS = [];
TVA.GUI.LOGOUT = false;
TVA.GUI.REGISTER = true;
TVA.GUI.BANNERURL = "http://devices.totalchannel.tv/resources/smarttv/banners/login.002.jpg?nc=" + ((new Date()).getDate());
TVA.OTT = TVA.OTT || {};
TVA.OTT.BBQ = 1;
TVA.OTT.SERVICE = "TotalChannel";
TVA.OTT = TVA.OTT || {};
TVA.OTT.DEVICETYPE = 3001;
TVA.OTT.DRM = ["playready", "widevine"];
try {
    if (navigator.userAgent.toLowerCase().indexOf("webos") > 0 || navigator.userAgent.toLowerCase().indexOf("web0s") > 0) {
        TVA.OTT.JSONREQUEST = "jsonp"
    }
} catch (dlhie) {}
TVA.OTT.WEBOS = (navigator.userAgent.toLowerCase().indexOf("webos") > 0 || navigator.userAgent.toLowerCase().indexOf("web0s") > 0);
TVA.OTT.WEBOS_EMULATOR = (navigator.userAgent.toLowerCase().indexOf("web0s") > 0);
TVA.tvKey = {};
TVA.tvKey.KEY_0 = 48;
TVA.tvKey.KEY_1 = 49;
TVA.tvKey.KEY_2 = 50;
TVA.tvKey.KEY_3 = 51;
TVA.tvKey.KEY_4 = 52;
TVA.tvKey.KEY_5 = 53;
TVA.tvKey.KEY_6 = 54;
TVA.tvKey.KEY_7 = 55;
TVA.tvKey.KEY_8 = 56;
TVA.tvKey.KEY_9 = 57;
TVA.tvKey.KEY_LEFT = 37;
TVA.tvKey.KEY_UP = 38;
TVA.tvKey.KEY_RIGHT = 39;
TVA.tvKey.KEY_DOWN = 40;
TVA.tvKey.KEY_RETURN = 461;
TVA.tvKey.KEY_ENTER = 13;
TVA.tvKey.KEY_INFO = 457;
TVA.tvKey.KEY_PLAY = 415;
TVA.tvKey.KEY_PAUSE = 19;
TVA.tvKey.KEY_RW = 412;
TVA.tvKey.KEY_FF = 417;
TVA.tvKey.KEY_STOP = 413;
TVA.tvKey.KEY_UP = 38;
TVA.tvKey.KEY_RED = 403;
TVA.tvKey.KEY_GREEN = 404;
TVA.tvKey.KEY_YELLOW = 405;
TVA.tvKey.KEY_BLUE = 406;
TVA.tvKey.KEY_CH_UP = 33;
TVA.tvKey.KEY_CH_DOWN = 34;
TVA.tvKey.KEY_FAST_FW = 425;
TVA.tvKey.KEY_FAST_RW = 424;
TVA.tvKey.FN_12 = 86;
TVA.tvKey.KEY_ZOOM = -4;
TVA.ScreenSaverTimeout = 600;
TVA.OTT = TVA.OTT || {};
TVA.OTT.STRINGS = {
    FAST_DEVICE_ENABLED: "Modo hardware rápido ( hardware blitting )",
    SLOW_DEVICE_ENABLED: "Modo hardware lento ( no hardware blitting )"
};
var Main = {
    username: "",
    unloaded: false,
    deviceId: null,
    timeOffset: 120,
    falseKeypressCounter: 0,
    isInBackground: false,
    oldDeviceMessageShowed: false,
    init: function() {
        Main.username = "";
        Main.unloaded = false;
        Main.falseKeypressCounter = 0;
        MouseWheel.init()
    },
    debugMustBeEnabled: function() {
        return false;
        try {
            if (document && document.location && document.location.href && (document.location.href.indexOf("debug=true") > 0 || document.location.href.indexOf("debug.true") > 0)) {
                return true
            }
        } catch (a) {}
        return false
    },
    onLoad: function() {
        var b = false;
        try {
            API.initializing = Utils.now();
            if (Main.debugMustBeEnabled() == true) {
                b = true
            }
        } catch (f) {}
        Debug.init(b);
        if (navigator.userAgent.toLowerCase().indexOf("toshiba") > 0) {
            TVA.device = "toshiba";
            API.getDeviceId()
        } else {
            if (navigator.userAgent.toLowerCase().indexOf("philips") > 0) {
                TVA.device = "philips";
                API.getDeviceId()
            }
        }
        if (TVA.device !== "ps3") {
            API.init()
        }
        Main.init();
        View.init();
        Header.init();
        OTTAnalytics.init();
        var d = $("body");
        if (navigator.userAgent.toLowerCase().indexOf("sony") > 0) {
            d.removeClass("ps3body")
        }
        TVA.init();
        Main.switchDRM(-1);
        TVA_Player.init();
        Utils.initZoom();
        d.addClass("bbq" + TVA.OTT.BBQ);
        if (TVA.device === "lg" || TVA.device === "toshiba" || TVA.device === "philips") {
            d.addClass("lg")
        } else {
            if (TVA.device === "samsung") {
                d.addClass("samsung");
                if (TVA.year < 2012) {
                    d.addClass("samsung2011")
                }
            } else {
                if (TVA.device === "ps3") {
                    if (navigator.userAgent.toLowerCase().indexOf("sony") > 0) {
                        window.platform.ver = 0;
                        TVA.OTT.DEVICETYPE = TVA.OTT.DEVICETYPE_BRAVIA;
                        d.addClass("sony");
                        TVA.zoomMargins = null
                    } else {
                        d.addClass("ps3")
                    }
                    if (navigator.userAgent.toLowerCase().indexOf("playstation 4") > 0) {
                        TVA.OTT.DEVICETYPE = TVA.OTT.DEVICETYPE_PS4;
                        TVA.year = 2013;
                        window.platform.ver = 4;
                        TVA.zoomMargins.step = 0.01
                    }
                }
            }
        }
        Utils.setBlitting();
        var g = $("#platform-id");
        var a = "";
        switch (TVA.OTT.DEVICETYPE) {
            case 3000:
                g.html(a + "Samsung");
                break;
            case 3001:
                g.html(a + "LG");
                break;
            case 4000:
                g.html(a + "PS3");
                break;
            case 4001:
                g.html(a + "PS4");
                break;
            case 4002:
                g.html(a + "Bravia");
                break
        }
        if (Debug.enabled) {
            g.show().css("visibility", "visible")
        }
        if (window.platform && window.platform.getDeviceId) {
            Main.deviceId = window.platform.getDeviceId()
        } else {
            if (typeof TVA_Widevine != "undefined") {
                Main.deviceId = TVA_Widevine.getESN()
            }
        }
        if (TVA.device == "toshiba" || TVA.device == "philips") {
            API.getDeviceId()
        }
        Main.timeOffset = new Date().getTimezoneOffset() * -1;
        View.loaderInit();
        PopMsg.init();
        API.authDevice(function() {
            API.getStorefrontOps()
        });
        Footer.init();
        var c = [];
        c.push({
            text: "Menu",
            className: "zero-button-footer",
            keycode: TVA.tvKey.KEY_0,
            method: function() {
                if (View.actualPage === VideoPlayer) {
                    VideoControls.showControls();
                    VideoControls.hideMe(false)
                }
                Header.setFocus();
                return false
            }
        });
        c.push({
            text: "Volver",
            className: "return-button-footer",
            keycode: TVA.tvKey.KEY_RETURN,
            method: function() {
                if (View.actualFocus == "side-panel-container" || View.actualFocus == "side-panel-container-video") {
                    SidePanel.hideMe(true);
                    View.actualPage.setFocus()
                } else {
                    View.previousPage(false, true)
                }
                return false
            }
        });
        Footer.setRight(c);
        Main.updateShortcuts();
        window.setTimeout(Commons.hideVersion, 5000);
        Main.showOldDevicePopup();
        $(".time-line").click(function(i) {
            var h = i.pageX - i.target.offsetLeft;
            VideoPlayer.seekTo(100 * h / $(".time-line").width())
        });
        if (typeof window.testmd5 === "function") {
            window.testmd5()
        }
    },
    showOldDevicePopup: function() {
        if (TVA.oldDevice === true && Main.oldDeviceMessageShowed === false) {
            var a = PopMsg.getText(56);
            if (a && a.length) {
                Main.oldDeviceMessageShowed = true;
                PopUp.showMe("block", false, a)
            }
        }
    },
    unload: function(a) {
        if (!Main.unloaded) {
            Main.unloaded = true;
            try {
                VideoControls.stop()
            } catch (b) {}
            if (a === true) {
                return
            }
            try {
                TVA.quit()
            } catch (b) {}
        }
    },
    keyHistory: [],
    keyHistoryMaxLength: 10,
    updateShortcuts: function() {
        try {
            Main.SHORTCUT_DEBUG_ON = [TVA.tvKey.KEY_DOWN, TVA.tvKey.KEY_LEFT, TVA.tvKey.KEY_8, TVA.tvKey.KEY_PAUSE, TVA.tvKey.KEY_9, TVA.tvKey.KEY_4].reverse();
            Main.SHORTCUT_LOGOUT = [TVA.tvKey.KEY_DOWN, TVA.tvKey.KEY_RIGHT, TVA.tvKey.KEY_8, TVA.tvKey.KEY_STOP, TVA.tvKey.KEY_8, TVA.tvKey.KEY_3].reverse();
            Main.SHORTCUT_SHOW_INFOBAR_CLOCK = [TVA.tvKey.KEY_DOWN, TVA.tvKey.KEY_UP, TVA.tvKey.KEY_GREEN, TVA.tvKey.KEY_RIGHT, TVA.tvKey.KEY_UP].reverse();
            Main.SHORTCUT_NO_HW_BLITTING = [TVA.tvKey.KEY_RW, TVA.tvKey.KEY_STOP, TVA.tvKey.KEY_FF, TVA.tvKey.KEY_PAUSE].reverse();
            Main.SHORTCUT_NO_DRM_1 = [TVA.tvKey.KEY_1, TVA.tvKey.KEY_RIGHT, TVA.tvKey.KEY_LEFT, TVA.tvKey.KEY_LEFT].reverse();
            Main.SHORTCUT_NO_DRM_2 = [TVA.tvKey.KEY_2, TVA.tvKey.KEY_RIGHT, TVA.tvKey.KEY_LEFT, TVA.tvKey.KEY_LEFT].reverse();
            Main.SHORTCUT_NO_DRM_DEFAULT = [TVA.tvKey.KEY_9, TVA.tvKey.KEY_RIGHT, TVA.tvKey.KEY_LEFT, TVA.tvKey.KEY_LEFT].reverse()
        } catch (a) {}
    },
    keyHistoryMatches: function(b) {
        if (typeof b === "undefined" || b.length > this.keyHistory.length) {
            return false
        }
        for (var a = 0; a < b.length; a++) {
            if (b[a] != this.keyHistory[a]) {
                return false
            }
        }
        this.keyHistory = [];
        return true
    },
    keyDown: function(j) {
        if (Main.oldDeviceMessageShowed) {
            if (j == TVA.tvKey.KEY_RETURN) {
                Main.unload()
            }
            return true
        }
        try {
            this.keyHistory.unshift(j);
            if (this.keyHistory.length > this.keyHistoryMaxLength) {
                this.keyHistory.splice(this.keyHistoryMaxLength, this.keyHistory.length - this.keyHistoryMaxLength)
            }
        } catch (b) {}
        if (View.actualPage === VideoPlayer && View.actualFocus != "side-panel-container" && View.actualFocus != "side-panel-container-video") {
            VideoControls.lastButtonPress = Utils.now()
        }
        if (Debug.enabled) {
            switch (j) {
                case TVA.tvKey.KEY_6:
                    try {
                        if (TVA.device == "ps3" && window.platform.ver == 4) {
                            break
                        }
                    } catch (h) {}
                    Debug.toggle();
                    break;
                case TVA.tvKey.KEY_9:
                    Main.unload();
                    break
            }
        }
        if (View.loaderDepth == 0) {
            var c = Header.handleSpecialKeys(j);
            if (c === true) {
                TVA.invalidate();
                return false
            } else {
                if (typeof c == "number") {
                    j = c
                }
            }
            var a = true;
            if (View.actualPage === PopUp || PopUp.isVisible == true) {
                PopUp.keyHandler(j);
                a = false
            } else {
                if (View.actualFocus === "side-panel-container") {
                    a = SidePanel.keyHandler(j)
                }
            }
            if (a == true) {
                var d = [TVA.tvKey.KEY_RETURN, TVA.tvKey.KEY_ENTER, TVA.tvKey.KEY_PLAY, TVA.tvKey.KEY_DOWN, TVA.tvKey.KEY_UP, TVA.tvKey.KEY_RIGHT, TVA.tvKey.KEY_LEFT, TVA.tvKey.KEY_0, TVA.tvKey.KEY_1, TVA.tvKey.KEY_2, TVA.tvKey.FN_12, TVA.tvKey.KEY_RED, TVA.tvKey.KEY_GREEN, TVA.tvKey.KEY_YELLOW, TVA.tvKey.KEY_BLUE];
                var i = true;
                if (d.indexOf(j) >= 0) {
                    i = Footer.keyHandler(j)
                }
                if (i) {
                    if (View.actualFocus === "header" && View.actualPage !== PopUp) {
                        i = Header.keyHandler(j)
                    } else {
                        if (TVA.GUI.FOCUS_FOOTER === true && View.actualFocus === "footer" && View.actualPage !== PopUp) {
                            i = Footer.keyHandler(j)
                        }
                    }
                    if (i == true) {
                        if (TVA.GUI.FOCUS_FOOTER !== true) {
                            View.actualPage.keyHandler(j)
                        } else {
                            if (View.actualPage) {
                                var f = View.actualFocus;
                                var k = LeftPanel.actualItem + ProgramGrid.actualChannel + GridPanel.row + ThumbSlider.actualThumb;
                                View.actualPage.keyHandler(j);
                                var g = LeftPanel.actualItem + ProgramGrid.actualChannel + GridPanel.row + ThumbSlider.actualThumb;
                                if (f == View.actualFocus && j == TVA.tvKey.KEY_DOWN && View.actualPageIs(VideoPlayer) == false && View.actualPageIs(PopUp) == false && View.actualFocus !== "big-slider" && g == k) {
                                    Footer.setFocus("directo")
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (j == TVA.tvKey.KEY_RETURN) {
                Main.falseKeypressCounter++
            }
            if (Main.falseKeypressCounter > 3) {
                Main.falseKeypressCounter = 0;
                View.loaderDepth = 0;
                View.loaderHide();
                View.changeView(Home)
            }
        }
        return true
    }
};
var Debug = {
    enabled: false,
    element: false,
    elementVisible: false,
    init: function(a) {
        Debug.enable(a);
        Debug.element = $("#debugLog");
        if (a === true) {
            Debug.element.show()
        } else {
            Debug.element.hide()
        }
    },
    enable: function(a) {
        Debug.enabled = a
    },
    logMessages: [],
    maxLogMessages: 40,
    log: function(d, b) {
        if (TVA.OTT.DLU != "") {
            var a = new XMLHttpRequest();
            a.open("GET", TVA.OTT.DLU + encodeURIComponent(d), true);
            a.send()
        }
        if (Debug.enabled) {
            d = d.replace("<", "&lt;");
            if (typeof b === "string") {
                d = b + d
            }
            try {
                this.logMessages.unshift("<p>" + d + "</p>");
                if (this.logMessages.length > this.maxLogMessages) {
                    this.logMessages.splice(this.maxLogMessages, this.logMessages.length - this.maxLogMessages)
                }
                TVA.putInnerHTML(Debug.element.get(0), this.logMessages.join("\n"))
            } catch (c) {}
        }
    },
    error: function(a) {
        Debug.err(a)
    },
    err: function(a) {
        if (Debug.enabled && typeof a === "string" && a.length > 0) {}
    },
    warning: function(a) {
        Debug.warn(a)
    },
    warn: function(a) {
        if (Debug.enabled && typeof a === "string" && a.length > 0) {}
    },
    fatal: function(a) {
        if (Debug.enabled && typeof a === "string" && a.length > 0) {}
    },
    show: function() {
        Debug.enable(true);
        Debug.elementVisible = true;
        Debug.element.show()
    },
    toggle: function() {
        var a = $("#platform-id");
        if (!Debug.elementVisible) {
            Debug.element.show();
            a.show()
        } else {
            Debug.element.hide();
            a.hide()
        }
        Debug.elementVisible = !Debug.elementVisible
    }
};
var MouseWheel = {
    initialized: false,
    init: function() {
        if (this.initialized == true) {
            return
        }
        this.initialized = true;
        try {
            document.onmousewheel = MouseWheel.onMouseWheel
        } catch (a) {}
    },
    preventDefault: function() {},
    onMouseWheel: function(a) {
        var b = 0;
        if (!a) {
            a = window.event
        }
        if (a.wheelDelta) {
            b = a.wheelDelta
        } else {
            if (a.detail) {
                b = -a.detail
            }
        }
        if (b > 0) {
            TVA.keyDown({
                keyCode: TVA.tvKey.KEY_UP,
                preventDefault: MouseWheel.preventDefault
            })
        } else {
            if (b < 0) {
                TVA.keyDown({
                    keyCode: TVA.tvKey.KEY_DOWN,
                    preventDefault: MouseWheel.preventDefault
                })
            }
        }
    }
};
Main.switchDRM = function(d) {
    try {
        if (d === null || d < -1) {
            return false
        }
        var b = TVA.OTT.ORIGINALDRMS;
        if (!b) {
            b = JSON.parse(JSON.stringify(TVA.OTT.DRM));
            TVA.OTT.ORIGINALDRMS = JSON.parse(JSON.stringify(TVA.OTT.DRM))
        }
        if (d == -1) {
            var c = totalChannelStorage.getItem("ott.drm");
            if (c !== null && typeof c === "string" && c !== "") {
                try {
                    c = JSON.parse(c);
                    if (typeof c !== "object") {
                        c = null
                    }
                } catch (f) {
                    c = null
                }
            }
            if (typeof c == "object" && c !== null && c.length > 0) {
                b = c
            }
        }
        if (!b) {
            b = JSON.parse(JSON.stringify(TVA.OTT.DRM));
            TVA.OTT.ORIGINALDRMS = JSON.parse(JSON.stringify(b))
        } else {
            b = JSON.parse(JSON.stringify(b))
        }
        if (b.length > 1 && (d <= 0 || d - 1 < b.length)) {
            if (d > 0) {
                b.splice(d - 1, 1)
            }
            TVA.OTT.DRM = b;
            var a = JSON.stringify(TVA.OTT.DRM);
            if (d !== -1) {
                Alert.show(JSON.stringify(TVA.OTT.DRM));
                totalChannelStorage.setItem("ott.drm", a);
                return true
            }
        } else {
            if (d <= 0 && b.length == 1) {
                TVA.OTT.DRM = b
            }
        }
    } catch (f) {}
    return false
};
Main.setBackgroundStatus = function(a) {
    Main._checkBackgroundStatus(a, false)
};
Main.checkStatus = function() {
    Main._checkBackgroundStatus(false, true)
};
Main._checkBackgroundStatus = function(b, a) {
    Main.isInBackground = (b === true);
    if (Main.isInBackground == true) {
        TVA.setBackgroundStatus(b)
    } else {
        if (Main.unloaded == true) {
            Main.onLoad();
            TVA.setBackgroundStatus(b)
        } else {
            var c = Main.username;
            if (a == false) {
                $(".page").hide()
            }
            View.loaderShow();
            API.authDeviceCheck(c, function() {
                $(".page").show();
                View.loaderHide();
                TVA.setBackgroundStatus(b)
            }, Main.authDeviceReload)
        }
    }
};
Main.authDeviceReload = function() {
    API.reloading = true;
    Main.isInBackground = true;
    try {
        API.cancelAllRequests()
    } catch (a) {}
    Main.unload(true);
    setTimeout(function() {
        API.reloading = true;
        Main.onLoad();
        $(".page").show();
        View.loaderHide();
        TVA.setBackgroundStatus(status)
    }, 2000);
    Main.isInBackground = false
};
try {
    if (!console) {
        console = {
            log: function(a) {}
        }
    } else {
        if (typeof console.log == "undefined") {
            console.log = function() {}
        } else {}
    }
} catch (cex) {};
var Utils = {
    weekday: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
    weekDayAbbreviation: ["Dom.", "Lun.", "Mar.", "Mier.", "Jue.", "Vier.", "Sab."],
    month: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
    monthAbbreviation: ["En.", "Febr.", "Mzo.", "Abr.", "My.", "Jun.", "Jul.", "Ag.", "Sept.", "Oct.", "Nov.", "Dic."],
    now: function() {
        var a = new Date();
        return a.getTime()
    },
    getDateObj: function(g) {
        try {
            var f = g.split("T");
            var c = f[0].split("-");
            var a = f[1].split(":");
            var h = new Date(c[0], c[1] - 1, c[2], a[0], a[1]);
            h.setMinutes(h.getMinutes() + Main.timeOffset);
            return h
        } catch (b) {
            return false
        }
    },
    getTimeStr: function(d) {
        if (isNaN(d)) {
            return "--:--"
        }
        var c = Math.floor((d % 86400) / 3600);
        var a = Math.floor(((d % 86400) % 3600) / 60);
        var b = Math.floor(((d % 86400) % 3600) % 60);
        return c + ":" + Utils.checkTimeStr(a) + ":" + Utils.checkTimeStr(b)
    },
    getSecondsBetweenDates: function(c, a) {
        if (c && a) {
            var b = c.getTime() - a.getTime();
            return (Math.abs(b / 1000))
        } else {
            return 0
        }
    },
    checkTimeStr: function(a) {
        return ((a < 10) ? "0" + a : a)
    },
    findAsset: function(d, b) {
        var a = DataStore.get(Type.Program, d);
        if (a.asset) {
            return a.asset
        } else {
            var c = DataStore.get(Type.Event, b);
            if (c.asset) {
                return c.asset
            }
        }
        return false
    },
    isNumber: function(a) {
        return !isNaN(parseFloat(a)) && isFinite(a)
    }
};
Object.size = function(c) {
    var b = 0,
        a;
    for (a in c) {
        if (c.hasOwnProperty(a)) {
            b++
        }
    }
    return b
};
Utils.getZoom = function() {
    if (TVA.zoomMargins == null) {
        return 1
    }
    var c = 1;
    try {
        var a = $("#body");
        var d = a.css("transform");
        if (d === null) {
            d = a.css("-webkit-transform")
        }
        c = Math.abs(parseFloat(d.split("(")[1].split(",")[0]))
    } catch (b) {
        c = 1
    }
    return c
};
Utils.setZoom = function(d) {
    if (TVA.zoomMargins == null) {
        return
    }
    var a = 1;
    if (d < 0) {
        a = Utils.getZoom() - TVA.zoomMargins.step
    } else {
        if (d > 0) {
            a = Utils.getZoom() + TVA.zoomMargins.step
        } else {
            try {
                a = parseFloat(totalChannelStorage.getItem("zoom"));
                if (isNaN(a)) {
                    return
                }
            } catch (c) {
                a = 1
            }
        }
    }
    a = Math.round(a * 100) / 100;
    if (a > TVA.zoomMargins.max) {
        a = TVA.zoomMargins.max
    }
    if (a < TVA.zoomMargins.min) {
        a = TVA.zoomMargins.min
    }
    var b = $("#body");
    b.css("transform", "scale(" + a + ")");
    b.css("-webkit-transform", "scale(" + a + ")");
    totalChannelStorage.setItem("zoom", a)
};
Utils.initZoom = function() {
    if (TVA.zoomMargins != null) {
        Utils.setZoom(0)
    }
};
Utils.isHLS = function(b) {
    var a = b.split("?");
    a = a[0];
    a = a.split(".");
    a = a[a.length - 1];
    a = a.toLowerCase();
    return (a == "m3u" || a == "m3u8")
};
Utils.getFileName = function(a) {
    a = a.substring(0, (a.indexOf("#") == -1) ? a.length : a.indexOf("#"));
    a = a.substring(0, (a.indexOf("?") == -1) ? a.length : a.indexOf("?"));
    a = a.substring(a.lastIndexOf("/") + 1, a.length);
    return a
};
Utils.setBlitting = function(b) {
    var a = totalChannelStorage.getItem("nohwblitting");
    if (b === true) {
        if (a == "1") {
            a = "0";
            $("body").removeClass("nohwblitting")
        } else {
            a = "1";
            $("body").addClass("nohwblitting")
        }
        totalChannelStorage.setItem("nohwblitting", a);
        return a
    } else {
        if (b === "1" || b === "0" || b === 1 || b === 0) {
            a = "" + b;
            totalChannelStorage.setItem("nohwblitting", a)
        }
    }
    if (a == "1") {
        $("body").addClass("nohwblitting")
    } else {
        $("body").removeClass("nohwblitting")
    }
    return a
};
Utils.UUID = function() {
    function b(h, e) {
        for (e = h = ""; h++ < 36; e += h * 51 & 52 ? (h ^ 15 ? 8 ^ Math.random() * (h ^ 20 ? 16 : 4) : 4).toString(16) : "-") {}
        return e
    }
    var a = "";
    try {
        try {
            a = b()
        } catch (g) {
            a = ""
        }
        if (!a || a == "" || a.length < 30) {
            var c = new Date().getTime();
            c += "-" + Math.random();
            try {
                a = window.md5(c)
            } catch (f) {
                a = c
            }
        }
    } catch (d) {}
    return a.toUpperCase()
};
Utils.goPage = function(d, c, i) {
    var b = false;
    var g;
    try {
        d = d.replace(/^#/, "").replace(/\|/g, '"');
        g = JSON.parse(d)
    } catch (f) {}
    if (g && g.c && g.p) {
        if (i === true) {
            window.location.hash = ""
        }
        var a = function() {
            if (API.configLoaded == true) {
                c(d)
            } else {
                setTimeout(a, 1000)
            }
        };
        setTimeout(a, 100);
        b = true
    }
    return b
};
Utils.getMainPage = function(d) {
    var a = false;
    try {
        if (window && window.location && window.location.hash) {
            var c = window.location.hash;
            if (c && c.length) {
                c = c.replace(/^#/, "").replace(/\|/g, '"');
                if (c && c.length) {
                    a = Utils.goPage(c, d, true)
                }
            }
        }
        if (a == false) {
            var f = window.location.search;
            if (f[0] == "?") {
                f = f.substring(1)
            }
            var g = f.split("&");
            for (var b = 0; b < g.length; b++) {
                var j = g[b].split("=");
                if (j && j.length == 2 && j[0] === "goto") {
                    a = Utils.goPage(j[1], d, false)
                }
            }
        }
    } catch (e) {}
    return a
};
var Base64 = {
    keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    decode: function(d) {
        var b = "";
        var l, j, g = "";
        var k, h, f, e = "";
        var c = 0;
        var a = /[^A-Za-z0-9\+\/\=]/g;
        if (a.exec(d)) {
            return ""
        }
        d = d.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        do {
            k = this.keyStr.indexOf(d.charAt(c++));
            h = this.keyStr.indexOf(d.charAt(c++));
            f = this.keyStr.indexOf(d.charAt(c++));
            e = this.keyStr.indexOf(d.charAt(c++));
            l = (k << 2) | (h >> 4);
            j = ((h & 15) << 4) | (f >> 2);
            g = ((f & 3) << 6) | e;
            b = b + String.fromCharCode(l);
            if (f != 64) {
                b = b + String.fromCharCode(j)
            }
            if (e != 64) {
                b = b + String.fromCharCode(g)
            }
            l = j = g = "";
            k = h = f = e = ""
        } while (c < d.length);
        return unescape(b)
    }
};
var ScreenSaver = {};
ScreenSaver.enable = function() {
    try {
        window.NetCastSetScreenSaver("enabled")
    } catch (a) {}
};
ScreenSaver.disable = function() {
    try {
        window.NetCastSetScreenSaver("disabled")
    } catch (a) {}
};
try {
    jQuery.support.cors = true
} catch (e) {}
var API = {
    base_url: TVA.OTT.BASEURL,
    image_base_url: "http://cloudfront-static.totalchannel.tv/epgres/",
    pairingTimeout: null,
    cookieValue: "",
    bbq: TVA.OTT.BBQ,
    timeout: 30000,
    requests: [],
    nRequests: 0,
    initialized: false,
    initializing: 0,
    numInitErrors: 0,
    auth: false,
    returnsDRM: null,
    goLive: false,
    configLoaded: false,
    lastCallbackId: [],
    svcArgs: "",
    init: function() {
        API.initialized = false;
        API.initializing = 0;
        API.numInitErrors = 0;
        API.returnsDRM = null;
        API.goLive = false;
        API.configLoaded = false;
        API.videoPlayerLoaded = false;
        API.lastCallbackId = [];
        API.svcArgs = ""
    },
    call: function(c) {
        if (c && !c.data) {
            c.data = {}
        }
        c.data.bbq = API.bbq;
        if (c.url && (c.url.indexOf("play/asset") > 0 || c.url.indexOf("my-tv/recordings") > 0 || c.url.indexOf("my-tv/pending-recordings") > 0)) {
            c.data.deviceType = TVA.OTT.DEVICETYPE
        }
        if (c.errorWrapper) {
            var g = c.success;
            c.success = function(m, l, r) {
                try {
                    API.checkForErrors(m, c.emptyResponseAllowed);
                    g(m, l, r);
                    if (c.cached && c.cached > 0) {
                        APICache.saveData(c, {
                            data: m,
                            status: l,
                            xhr: r
                        })
                    }
                } catch (o) {
                    if (typeof o === "string") {
                        o = {
                            message: o
                        }
                    }
                    if (Debug.enabled) {
                        var j = "XHR ERROR: ";
                        if (typeof o.toString == "function") {
                            j += "toString():  value: [" + o.toString() + "]"
                        } else {
                            for (var k in o) {
                                if (o.hasOwnProperty(k)) {
                                    if (typeof o[k] !== "function") {
                                        j += "property: " + k + " value: [" + o[k] + "]\n"
                                    }
                                }
                            }
                        }
                    }
                    if (o instanceof API.Exception || typeof o === "object") {
                        if (o.message == API.Exception.URL_NOT_FOUND) {
                            View.previousPage(true);
                            try {
                                if (m && m.data && m.data.pbId) {
                                    VideoPlayer.lastPlayerResponseVideo = {
                                        pbId: m.data.pbId
                                    }
                                }
                            } catch (n) {}
                            PopMsg.show("error", 47, "AP01");
                            return
                        } else {
                            if (o.message == API.Exception.API_ERROR) {
                                switch (PopUp.type) {
                                    case "pairing-login":
                                    case "pairing-alta":
                                        PopUp.handleLoginError(m);
                                        return;
                                        break
                                }
                            }
                        }
                    }
                    var q = r ? parseInt(r.errorCode) : 0;
                    if (q == 0 && r && r.jqSettings) {
                        q = r.jqSettings.errorCode
                    }
                    if (q == 47 || (r && r.jqSettings && r.jqSettings.url && r.jqSettings.url.indexOf("play/asset") > 0)) {
                        View.loaderHide();
                        View.previousPage()
                    }
                    if (r && r.errorPreAction) {
                        if (r.errorPreAction() === false) {
                            return
                        }
                    }
                    if (m && m.message && m.message !== "") {
                        PopMsg.showMessage("error", m.message)
                    } else {
                        if (m && m.error && m.error === "NOT_AVAILABLE") {
                            if (q >= 0) {
                                PopMsg.show("error", q)
                            } else {
                                PopMsg.showMessage("error", PopMsg.getText(47))
                            }
                        } else {
                            if (m && m.error && (m.error === "INVALID_SESSION" || m.error === "INVALID_STATE")) {
                                var p = (r && r.jqSettings && r.jqSettings.url && typeof r.jqSettings.url == "string") ? r.jqSettings.url : "";
                                if (p.indexOf("play/asset") > 0 || p.indexOf("my-tv/recordings") > 0 || p.indexOf("my-tv/pending-recordings") > 0) {
                                    API.reloading = true;
                                    PopMsg.show("error", 29)
                                } else {
                                    if (q >= 0) {
                                        PopMsg.show("error", q)
                                    }
                                }
                            } else {
                                if (q >= 0) {
                                    PopMsg.show("error", q)
                                }
                            }
                        }
                    }
                    if (r && r.errorPostAction) {
                        r.errorPostAction()
                    }
                }
            }
        }
        var f = "json";
        if (TVA.OTT.JSONREQUEST) {
            switch (TVA.OTT.JSONREQUEST) {
                case "json":
                case "jsonp":
                    f = TVA.OTT.JSONREQUEST;
                    break
            }
        }
        var h = c.url.replace(API.base_url, "").replace(/[^\w\s]/gi, "");
        if (!API.lastCallbackId.hasOwnProperty(h) || API.lastCallbackId[h] > 3) {
            API.lastCallbackId[h] = 1
        }
        h += (API.lastCallbackId[h]++);
        var a = {
            dataType: f,
            timeout: API.timeout,
            jsonpCallback: h,
            beforeSend: function(k, j) {
                k.jqSettings = j;
                if (j.errorCode) {
                    k.errorCode = j.errorCode
                } else {
                    k.errorCode = false
                }
                k.errorPreAction = null;
                if (j.errorPreAction) {
                    k.errorPreAction = j.errorPreAction
                }
                k.errorPostAction = null;
                if (j.errorPostAction) {
                    k.errorPostAction = j.errorPostAction
                }
                if (!j.hideLoader) {
                    if (!j.loaderIndex) {
                        View.loaderShow()
                    } else {
                        View.loaderShow(j.loaderIndex)
                    }
                }
            },
            complete: function(j) {
                if (!c.hideLoader) {
                    View.loaderHide()
                }
                API.removeRequest(j)
            },
            error: function(r, k) {
                var o = r ? r.responseText : null;
                var p = r ? r.errorCode : null;
                var m = r ? r.errorPreAction : null;
                var q = r ? r.errorPostAction : null;
                var l = null;
                if (o) {
                    try {
                        l = JSON.parse(o)
                    } catch (n) {}
                }
                try {
                    var j = r.jqSettings;
                    API.removeRequest(r);
                    if (j.errorWrapper == false || j.url.indexOf("/evt/pb?") > 0 || j.url.indexOf("/guide/pf?") > 0) {
                        return
                    }
                } catch (n) {}
                if (k === "timeout") {
                    switch (PopUp.type) {
                        case "pairing-login":
                        case "pairing-alta":
                            PopUp.handleLoginError(l);
                            return;
                            break
                    }
                    if (View.actualPageIs(VideoPlayer) && j.url.indexOf("/play/asset") > 0) {
                        View.previousPage();
                        PopMsg.show("error", 51, "AP02");
                        return
                    }
                    View.loaderHide();
                    PopUp.showMe("error", false, PopMsg.getText(51));
                    View.changeView(PopUp)
                } else {
                    if (p === 47 || (j && j.errorCode == 47)) {
                        View.loaderHide();
                        View.previousPage()
                    }
                    if (m) {
                        if (m() === false) {
                            return
                        }
                    }
                    if (l && l.error && l.error === "DEVICE_NEEDS_PAIRING") {
                        if (Main.username && typeof Main.username === "string" && Main.username.length > 0) {
                            setTimeout("Main.checkStatus();", 1000)
                        } else {
                            API.startPairing()
                        }
                    } else {
                        if (l && l.error && l.reason && l.error === "NO_QUOTA") {
                            if (!l.message) {
                                l.message = "Se ha excedido el número de horas de reproducción";
                                if (l.reason === "FT_EXCEEDED") {
                                    l.message += " para la suscripción FreeTrial"
                                }
                            }
                            View.previousPage();
                            PopMsg.showMessage("error", l.message + ".")
                        } else {
                            if (l && l.message) {
                                PopMsg.showMessage("error", l.message)
                            } else {
                                if (p && p >= 0) {
                                    PopMsg.show("error", p)
                                } else {
                                    if (j && j.errorCode >= 0) {
                                        PopMsg.show("error", j.errorCode)
                                    }
                                }
                            }
                        }
                    }
                    if (q) {
                        q()
                    }
                }
            }
        };
        if (a.dataType == "jsonp") {
            jQuery.extend(a, {
                xhrFields: {
                    withCredentials: true
                },
                crossDomain: true
            })
        }
        jQuery.extend(c, a);
        var b = null;
        if (c.cached && c.cached > 0) {
            b = APICache.getData(c);
            if (b !== null) {
                c.beforeSend(b.xhr, c);
                setTimeout(function() {
                    c.success(b.data, b.status, b.xhr);
                    setTimeout(function() {
                        c.complete(b.xhr, b.status)
                    }, 10)
                }, 10);
                return null
            }
        }
        var i = this.nRequests++;
        c.apiId = i;
        var d = $.ajax(c);
        if (d) {
            d.apiId = i;
            this.requests.push(d)
        }
        return d
    },
    cancelAllRequests: function() {
        try {
            for (var a in this.requests) {
                if (this.requests.hasOwnProperty(a)) {
                    try {
                        this.requests[a].errorCode = -1
                    } catch (d) {}
                    try {
                        this.requests[a].abort()
                    } catch (d) {}
                    var b = this.requests.splice(a, 1)
                }
            }
            if (API.getSliderContentRequest) {
                API.getSliderContentRequest.errorCode = -1;
                API.getSliderContentRequest = null
            }
        } catch (c) {}
    },
    removeRequest: function(d) {
        try {
            if (!d) {
                return
            }
            var b = d.jqSettings;
            for (var a in this.requests) {
                if (this.requests.hasOwnProperty(a)) {
                    if (this.requests[a].apiId == b.apiId) {
                        this.requests.splice(a, 1)
                    }
                }
            }
        } catch (c) {}
        try {} catch (c) {}
    },
    checkForErrors: function(b, a) {
        if (arguments.length != 2) {
            throw new API.Exception(API.Exception.NOT_ENOUGH_ARGS)
        } else {
            if (!a && (b === "" || b === undefined || typeof b === "undefined" || b == null)) {
                throw new API.Exception(API.Exception.EMPTY_RESPONSE)
            } else {
                if (b && b.error) {
                    throw new API.Exception(API.Exception.API_ERROR, b.error)
                }
            }
        }
    },
    getInfoTxt: function() {
        var a = "";
        try {
            a = TVA.getInfo()
        } catch (b) {
            a = ""
        }
        return a
    },
    authDevice: function(b) {
        API.getDeviceId();
        var a = API.getInfoTxt();
        var f = document.getElementById("bookmarkVersion");
        var c = "";
        if (f && f.innerHTML && f.innerHTML.length) {
            c = f.innerHTML
        }
        var d = API.call({
            url: API.base_url + "auth/device",
            data: {
                deviceId: Main.deviceId,
                deviceType: TVA.OTT.DEVICETYPE,
                year: TVA.year,
                appver: c,
                info: a
            },
            errorWrapper: true,
            errorCode: 29,
            emptyResponseAllowed: true,
            hideLoader: true,
            success: function(h, g, i) {
                if (i && i.status == 200) {
                    API.initialized = true
                }
                if (i && i.status != 0) {
                    API.authSuccess(h, g, i, b);
                    API.goLive = true
                }
            }
        })
    },
    authDeviceCheck: function(c, b, f) {
        API.getDeviceId();
        var a = API.getInfoTxt();
        var d = API.call({
            url: API.base_url + "auth/device",
            data: {
                deviceId: Main.deviceId,
                deviceType: TVA.OTT.DEVICETYPE,
                year: TVA.year,
                info: a,
                deviceCheck: true
            },
            errorWrapper: true,
            errorCode: -1,
            emptyResponseAllowed: true,
            hideLoader: true,
            success: function(h, g, i) {
                if (i && i.status == 200) {
                    var j = DataStore.getFromObject(h, "data_userName", "");
                    if (j && j == c) {
                        b()
                    } else {
                        f()
                    }
                } else {
                    f()
                }
            },
            errorPreAction: function() {
                f();
                return false
            }
        })
    },
    voidFn: function() {},
    getConfig: function(b) {
        var a = API.call({
            url: API.base_url + "config",
            data: {
                view: "all",
                ver: "2",
                deviceType: TVA.OTT.DEVICETYPE
            },
            errorWrapper: false,
            errorCode: -1,
            emptyResponseAllowed: true,
            error: function() {
                API.configLoaded = true;
                if (TVA.device === "ps3") {
                    setTimeout("API.getPromotions(0);", 500)
                }
            },
            errorPostAction: function() {
                API.configLoaded = true
            },
            success: function(k, i, q) {
                var d = 2880;
                var o = null;
                var p;
                try {
                    if (k && k.data) {
                        TVA.OTT.CONFIGDATA = k.data;
                        if (TVA.OTT.CONFIGDATA.recordingDisabled === 1 || TVA.OTT.CONFIGDATA.recordingDisabled === true || TVA.OTT.CONFIGDATA.recordingDisabled === "1") {
                            TVA.OTT.CONFIGDATA.recordingDisabled = true;
                            TVA.OTT.SHOW_THUMB_REC_ICON = false
                        } else {
                            if (TVA.OTT.CONFIGDATA.recordingDisabled === 0 || TVA.OTT.CONFIGDATA.recordingDisabled === false || TVA.OTT.CONFIGDATA.recordingDisabled === "0") {
                                TVA.OTT.CONFIGDATA.recordingDisabled = false;
                                TVA.OTT.SHOW_THUMB_REC_ICON = true
                            } else {
                                TVA.OTT.CONFIGDATA.recordingDisabled = false
                            }
                        }
                        var c = k.data;
                        if (c.ttl) {
                            d = c.ttl
                        }
                        if (c.beacon) {
                            var r = parseInt(c.beacon);
                            if (r > 0) {
                                EVT.beaconInterval = r * 1000
                            }
                        }
                        if (typeof c.auth !== "undefined") {
                            API.auth = API.getBoolFromConfig(c.auth, API.auth)
                        }
                        if (typeof c.analytics !== "undefined") {
                            OTTAnalytics.enabled = API.getBoolFromConfig(c.analytics, OTTAnalytics.enabled);
                            if (OTTAnalytics.enabled == false) {
                                TVA.OTT.NICEBALANCER = false;
                                TVA.OTT.NICETOKEN = "";
                                TVA.OTT.OTTBALANCER = false
                            }
                        }
                        if (typeof c.balancer !== "undefined") {
                            if (typeof c.balancer.code !== "undefined") {
                                TVA.OTT.ACODE = c.balancer.code
                            }
                            if (typeof c.balancer.ott !== "undefined") {
                                TVA.OTT.OTTBALANCER = API.getBoolFromConfig(c.balancer.ott, TVA.OTT.OTTBALANCER)
                            }
                            if (typeof c.balancer.nice !== "undefined") {
                                TVA.OTT.NICEBALANCER = API.getBoolFromConfig(c.balancer.nice, TVA.OTT.NICEBALANCER)
                            }
                            if (typeof c.balancer.token !== "undefined") {
                                TVA.OTT.NICETOKEN = c.balancer.token
                            }
                            if (typeof c.balancer.ocode !== "undefined") {
                                TVA.OTT.ORIGINCODE = c.balancer.ocode
                            }
                        }
                        if (typeof c.vodSubtitlesDisabled !== "undefined") {
                            Subtitles.DISABLED = API.getBoolFromConfig(c.vodSubtitlesDisabled, Subtitles.DISABLED)
                        } else {
                            if (typeof c.subtitlesDisabled !== "undefined") {
                                Subtitles.DISABLED = API.getBoolFromConfig(c.subtitlesDisabled, Subtitles.DISABLED)
                            }
                        }
                        if (typeof c.audioTracksDisabled !== "undefined") {
                            TVA_Player.multipleVodAudioTracksDisabled = API.getBoolFromConfig(c.audioTracksDisabled, TVA_Player.multipleVodAudioTracksDisabled);
                            TVA_Player.multipleLiveAudioTracksDisabled = API.getBoolFromConfig(c.audioTracksDisabled, TVA_Player.multipleLiveAudioTracksDisabled)
                        }
                        if (typeof c.vodAudioTracksDisabled !== "undefined") {
                            TVA_Player.multipleVodAudioTracksDisabled = API.getBoolFromConfig(c.vodAudioTracksDisabled, TVA_Player.multipleVodAudioTracksDisabled)
                        }
                        if (typeof c.liveAudioTracksDisabled !== "undefined") {
                            TVA_Player.multipleLiveAudioTracksDisabled = API.getBoolFromConfig(c.liveAudioTracksDisabled, TVA_Player.multipleLiveAudioTracksDisabled)
                        }
                        if (typeof c.subtitlesLimit !== "undefined" && Subtitles.DISABLED == false) {
                            var f = parseInt(c.subtitlesLimit);
                            if (!isNaN(f) && f >= 0) {
                                Subtitles.tracksLimit = f
                            }
                        }
                        if (typeof c.view !== "undefined") {
                            o = c.view
                        }
                        if (typeof c.liveId !== "undefined") {
                            p = c.liveId
                        }
                        if (typeof c.showErrorCode !== "undefined") {
                            PopMsg.showErrorCode = API.getBoolFromConfig(c.showErrorCode, PopMsg.showErrorCode)
                        }
                        if (typeof c.log !== "undefined") {
                            if (typeof c.log.strlen !== "undefined") {
                                Messenger.STR_LEN = API.getIntFromConfig(c.log.strlen, Messenger.STR_LEN)
                            }
                            if (typeof c.log.buflen !== "undefined") {
                                Messenger.BUF_LEN = API.getIntFromConfig(c.log.buflen, Messenger.BUF_LEN)
                            }
                        }
                    }
                } catch (l) {}
                View.initButtons();
                View.processConfig(o);
                var j = 10;
                if (TVA.device === "ps3") {
                    j = 2000
                }
                try {
                    if (document.location.href.toLowerCase().indexOf("nolive") > 0) {
                        API.goLive = false
                    }
                } catch (n) {}
                API.nextStepFunction = null;
                if (API.reloading === true) {
                    API.goLive = false
                }
                var m = false;
                if (b == true && API.auth == true && Main.username == "") {
                    m = true;
                    $("#big-slider").removeClass("big-slider-starttup");
                    API.startPairing(false, function() {
                        API.nextStepFunction = function() {
                            API.videoPlayerLoaded = true;
                            API.startPairingFn = null;
                            if (API.goLive == true && typeof p !== "undefined") {
                                setTimeout(function() {
                                    API.getChannels("direct-start", -1, p)
                                }, j)
                            }
                        };
                        if (PopUp.showTutorial() == false && API.nextStepFunction != null) {
                            API.nextStepFunction();
                            API.nextStepFunction = null
                        }
                    });
                    API.configLoaded = true
                } else {
                    if (API.goLive == true && typeof p !== "undefined" && API.videoPlayerLoaded !== true) {
                        API.nextStepFunction = function() {
                            setTimeout(function() {
                                API.getChannels("direct-start", -1, p)
                            }, j);
                            API.videoPlayerLoaded = true
                        }
                    } else {
                        $("#big-slider").removeClass("big-slider-starttup");
                        API.configLoaded = true
                    }
                }
                var h = d;
                if (d <= 0 || d > 3600) {
                    d = 3600
                }
                if (API.nopActionInterval != null) {
                    try {
                        clearInterval(API.nopActionInterval)
                    } catch (g) {}
                    API.nopActionInterval = null
                }
                API.nopActionInterval = setInterval(API.nopAction, d * 1000);
                if (TVA.device === "ps3") {
                    setTimeout("API.getPromotions(0);", 500)
                }
                if (OTTAnalytics.enabled == true && typeof youboraData == "undefined") {
                    OTTAnalytics.enabled = false
                }
                if (OTTAnalytics.enabled == false) {
                    if (typeof youboraData != "undefined") {
                        if (youboraData.setMediaResource) {
                            youboraData.setMediaResource("")
                        } else {
                            youboraData.mediaResource = ""
                        }
                    }
                }
                if (m == false && PopUp.showTutorial() == false && API.nextStepFunction != null) {
                    API.nextStepFunction();
                    API.nextStepFunction = null
                }
            }
        })
    },
    getIntFromConfig: function(b, a) {
        try {
            var d = parseInt(b);
            if (isNaN(d) || d <= 0) {
                d = a
            }
        } catch (c) {
            d = a
        }
        return d
    },
    getBoolFromConfig: function(b, a) {
        if (typeof b === "boolean") {
            return b
        } else {
            if (typeof b === "string") {
                return (b.toLowerCase() == "true")
            } else {
                if (typeof b === "number") {
                    return (b > 0)
                }
            }
        }
        return a
    },
    nopActionInterval: null,
    nopAction: function() {
        var a = API.call({
            url: API.base_url + "nop",
            errorWrapper: false,
            errorCode: -1,
            emptyResponseAllowed: true,
            success: function(c, b, d) {}
        })
    },
    authSuccess: function(f, c, i, h) {
        var a = false,
            b = false;
        var d = DataStore.getFromObject(f, "data_userName", "");
        var j = $(".header-menu-last");
        if (TVA.GUI.REGISTER == false && j && j.length) {
            j.html(j.html().replace("REGISTRAR", "").replace("<hr>", "")).addClass("header-menu-register")
        }
        if (d) {
            a = true;
            var g = d.split(" ");
            if (g.length == 2 && g[0] == g[1]) {
                d = g[0]
            }
            Main.username = d;
            Footer.setUser(d);
            if (TVA.GUI.LOGOUT == true) {
                if (!j.attr("loginhtml")) {
                    j.attr("loginhtml", j.html())
                }
                j.html("LOGOUT").addClass("header-menu-logout").removeClass("hidden-header-element").removeClass("hide-this")
            } else {
                if (j.attr("loginhtml")) {
                    j.html(j.attr("loginhtml"))
                }
                j.addClass("hidden-header-element").addClass("hide-this")
            }
            ThumbSliderFilter.setOptions("home-logged-in");
            if (API.pairingTimeout != null || PopUp.type == "pairing-login" || PopUp.type == "pairing" || PopUp.type == "pairing-alta") {
                clearInterval(API.pairingTimeout);
                API.pairingTimeout = null;
                b = true;
                View.getMainPage(function(k) {
                    View.changeView(k)
                })
            }
            OTTAnalytics.authOk(DataStore.getFromObject(f, "data_duid", d));
            if (TVA.device === "ps3") {
                setTimeout("API.getConfig(false);", 1000)
            } else {
                API.getConfig(false)
            }
        } else {
            if (View.actualPage !== PopUp) {
                ThumbSliderFilter.setOptions("home-not-logged-in");
                if (j) {
                    j.removeClass("hidden-header-element")
                }
                if (TVA.device === "ps3") {
                    setTimeout("API.getConfig(true);", 1000)
                } else {
                    API.getConfig(true)
                }
            }
        }
        if (View.actualPage !== PopUp && b == false) {
            View.getMainPage(function(k) {
                View.changeView(k)
            })
        }
        if (h) {
            h()
        }
        if (c == 200) {
            setTimeout("API.startPairingFn();", 500)
        }
        return a
    },
    videoPlayerLoaded: false,
    startPairingFn: null,
    startPairing: function(a, b) {
        if ($(".header-menu-last").hasClass("header-menu-logout")) {
            API.doLogout();
            return
        }
        if (TVA.OTT.PAIRING === false) {
            if (View.actualPageIs(VideoPlayer)) {
                View.previousPage()
            }
            PopUp.showMe("pairing", false, "");
            PopUp.setCode("");
            View.changeView(PopUp);
            return
        }
        API.startPairingFn = b;
        if (a !== false) {
            API.auth = false
        } else {}
        $("#ventana").removeClass("ventana_login");
        $(".salir").removeClass("ventana_login");
        var c = API.call({
            url: API.base_url + "auth/pair",
            data: {},
            errorWrapper: true,
            errorCode: 33,
            emptyResponseAllowed: false,
            success: function(f) {
                var d = DataStore.getFromObject(f, "data", false);
                var g = DataStore.getFromObject(f, "message", false);
                if (d && g) {
                    if (View.actualPageIs(VideoPlayer)) {
                        View.previousPage()
                    }
                    PopUp.showMe("pairing", false, g);
                    PopUp.setCode(d);
                    View.changeView(PopUp);
                    clearInterval(API.pairingTimeout);
                    API.pairingTimeout = setInterval(API.authDevice, 10000)
                }
            }
        })
    },
    getPromotions: function(b) {
        if (!View.actualPageIs(Home)) {
            return
        }
        var a = API.call({
            url: API.base_url + "promos/list",
            data: {
                bbq: API.bbq
            },
            errorWrapper: true,
            errorCode: 5,
            errorPreAction: function() {
                Header.setFocus();
                if (b === 0) {
                    setTimeout("API.getPromotions(1);", 1000);
                    return false
                }
                return true
            },
            emptyResponseAllowed: false,
            success: function(c) {
                Home.buildPromos(DataStore.parseAndStore(c))
            }
        })
    },
    getSliderContent: function(f, c, g, d) {
        var a = {
            bbq: API.bbq,
            nocache: Utils.now()
        };
        var b = f;
        var h = 26;
        if (f == "catch") {
            h = 26;
            b = "catch/child-programs";
            a.id = c
        } else {
            if (c !== "") {
                a.id = c
            }
            if (f == "related") {
                h = 26
            } else {
                if (f == "featured") {
                    h = 6
                } else {
                    if (f == "recommended") {
                        h = 7
                    } else {
                        if (f == "most-viewed") {
                            h = 14
                        } else {
                            if (f == "highest-rated") {
                                h = 15
                            } else {
                                if (f == "similar-programs") {
                                    h = 26
                                } else {
                                    if (f == "watch-now") {
                                        b = "catch";
                                        h = 26
                                    } else {
                                        if (f == "seasons") {
                                            h = 26
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (d) {
            a.channel = d
        }
        var k = b + JSON.stringify(a);
        try {
            if (API.getSliderContentQuery && API.getSliderContentQuery.url == k && API.getSliderContentQuery.data) {
                ThumbSlider.build(DataStore.parseAndStore(API.getSliderContentQuery.data));
                return true
            }
        } catch (j) {}
        try {
            if (API.getSliderContentRequest) {
                API.getSliderContentRequest.errorCode = -2;
                API.removeRequest(API.getSliderContentRequest);
                API.getSliderContentRequest = null
            }
        } catch (i) {}
        API.getSliderContentRequest = API.call({
            url: API.base_url + b,
            data: a,
            errorWrapper: true,
            errorCode: h,
            emptyResponseAllowed: true,
            cached: 0.5,
            errorPostAction: function() {
                API.getSliderContentRequest = null
            },
            success: function(m, l, n) {
                API.getSliderContentRequest = null;
                if (!n || n.errorCode == -2 || !m) {
                    ThumbSlider.sliderArrowsVisibility("hide");
                    if ((f == "catch" || f == "similar-programs") && View.actualPageIs(DataSheet)) {
                        $("#filter-thumbs0").addClass("hide-this");
                        ThumbSliderFilter.loadTab()
                    }
                    return
                }
                ThumbSlider.build(DataStore.parseAndStore(m));
                API.getSliderContentQuery = {
                    url: k,
                    data: m
                }
            }
        });
        return false
    },
    getChannels: function(h, c, f) {
        var g = {
            bbq: API.bbq,
            pf: 1
        };
        var b = "channels";
        if (h === "direct" || h === "direct-start" || h === "live") {
            VideoControls.lastButtonPress = 0;
            if (!VideoControls.isHidden && h === "live" && View.actualPage === VideoPlayer) {
                VideoControls.showLiveInfo = false;
                VideoControls.hideControls()
            }
            b = "channels/live";
            g.multichannel = 1;
            if (API.getChannelsLive) {
                if (Utils.now() - API.getChannelsLive.acess < 30000 && API.getChannelsLive.data) {
                    API.getChannelsLive.access = Utils.now();
                    var a = DataStore.parseAndStore(API.getChannelsLive.data);
                    if (a && a.length > 0) {
                        API.getChannelsCallback(h, a, c, f);
                        return true
                    }
                }
            }
        } else {
            if (h === "epg") {
                g.epgmultichannel = 1;
                b = "channels"
            }
        }
        var d = API.call({
            url: API.base_url + b,
            data: g,
            errorWrapper: true,
            errorCode: 1,
            emptyResponseAllowed: false,
            success: function(j) {
                var i = DataStore.parseAndStore(j);
                if (h === "direct" || h === "direct-start" || h === "live") {
                    if (i && i.length > 0) {
                        API.getChannelsLive = {
                            acess: Utils.now(),
                            data: j
                        }
                    }
                }
                API.getChannelsCallback(h, i, c, f)
            },
            errorPreAction: function() {
                API.configLoaded = true;
                return true
            }
        });
        return true
    },
    channelsCallbackMode: "",
    getChannelsCallback: function(h, g, a, b) {
        API.configLoaded = true;
        API.channelsCallbackMode = h;
        try {
            if (API.returnsDRM === null && API.getChannelsLive.data && API.getChannelsLive.data.data) {
                var f = API.getChannelsLive.data.data;
                API.returnsDRM = false;
                for (var c in f) {
                    if (f.hasOwnProperty(c)) {
                        var d = f[c];
                        if (d.hasOwnProperty("liveAsset") && d.liveAsset.hasOwnProperty("drms")) {
                            API.returnsDRM = true
                        }
                    }
                }
            }
        } catch (j) {}
        if (h === "direct-start") {
            a = -1
        }
        var i = VideoPlayer.getLive(g, a, b);
        if (g && g.length && g.length == 1 && h == "live") {
            h = "direct"
        }
        if (h === "direct" || h === "direct-start") {
            if (Main.username == "") {
                setTimeout(API.startPairing, 100);
                return
            }
            DataStore.LiveChannels = g;
            VideoPlayer.setDetails("directo", {
                channelId: i.id,
                programId: null,
                eventId: null,
                assetId: i.liveAsset,
                isLive: true,
                directMode: (h === "direct-start")
            });
            totalChannelStorage.setItem("API.channel.id", i.id);
            View.changeView(VideoPlayer)
        } else {
            if (h === "live") {
                DataStore.LiveChannels = g;
                SidePanel.init({
                    displayItems: 7,
                    scrollLimit: 4,
                    modal: true,
                    classC: ((View.actualPage === VideoPlayer) ? "side-panel-home-videoplayer" : "side-panel-home")
                });
                SidePanel.build(g, i)
            } else {
                if (h === "epg") {
                    if (View.actualPageIs(EPG)) {
                        EPG.buildChannelGrid(g)
                    }
                }
            }
        }
    },
    getDetails: function(a, c) {
        var b = API.call({
            url: API.base_url + "details/" + a,
            data: {
                id: c
            },
            errorWrapper: true,
            errorCode: (View.actualPageIs(EPG) ? -1 : 28),
            emptyResponseAllowed: false,
            success: function(d) {
                if (View.actualPageIs(EPG)) {
                    EPG.buildDetails(DataStore.parseAndStore(d))
                } else {
                    DataSheet.build(DataStore.parseAndStore(d))
                }
            }
        })
    },
    getProgramDetails: function(a, b) {
        var c = API.call({
            url: API.base_url + "details/program",
            data: {
                id: a,
                channel: b
            },
            errorWrapper: true,
            errorCode: (View.actualPageIs(EPG) ? -1 : 28),
            emptyResponseAllowed: false,
            success: function(f, d, g) {
                if (View.actualPageIs(EPG)) {
                    EPG.buildDetails(DataStore.parseAndStore(f))
                } else {
                    DataSheet.build(DataStore.parseAndStore(f))
                }
            }
        })
    },
    getAsset: function(b) {
        if (Main.username == "") {
            View.previousPage(true);
            PopMsg.showMessage("error", PopMsg.getText(31));
            return true
        }
        var a = API.call({
            url: API.base_url + "play/asset",
            data: {
                id: b,
                drm: TVA.OTT.DRM.toString()
            },
            errorWrapper: true,
            errorCode: 47,
            emptyResponseAllowed: false,
            success: function(g) {
                g.id = b;
                VideoPlayer.isUHD = false;
                if (TVA.OTT.TEST_UHD == true) {
                    if (b == "b41a010ba3b60d7a" || b == "89c9c0e1a4104cb1") {
                        if (g.data["drm"]) {
                            VideoPlayer.isUHD = true;
                            g.data["drm"]["url"] = "http://h01.22a.cdn.imagina.tv/golt/golt_24h_4k/test.mpd";
                            g.data["drm"]["emmUrl"] = ""
                        }
                    }
                }
                var f = DataStore.parseAndStore(g);
                if (!f.url && f.drm && f.drm["url"]) {
                    f.url = f.drm["url"]
                }
                if (f.url) {
                    VideoPlayer.initPlayer(f, g)
                } else {
                    if (VideoPlayer.details.isLive && VideoPlayer.details.channelId) {
                        VideoPlayer.checkChannelError();
                        var d = DataStore.get(Type.Channel, VideoPlayer.details.channelId);
                        try {
                            if (g && g.data && g.data.pbId) {
                                VideoPlayer.lastPlayerResponseVideo = {
                                    pbId: g.data.pbId
                                }
                            }
                        } catch (c) {}
                        View.previousPage(true);
                        View.changeView(PopUp);
                        var h = d ? (d.name ? '"' + d.name + '"' : (d.abrev ? '"' + d.abrev + '"' : "")) : "";
                        PopUp.showMe("error", false, PopMsg.getText(52).replace("#CH#", h));
                        return
                    }
                    throw new API.Exception(API.Exception.URL_NOT_FOUND)
                }
            },
            errorPostAction: function() {
                VideoPlayer.checkChannelError()
            }
        });
        return true
    },
    getStorefrontOps: function() {
        var a = API.call({
            data: {
                bbq: API.bbq
            },
            url: API.base_url + "channel-content/categories",
            errorWrapper: true,
            errorCode: 46,
            emptyResponseAllowed: false,
            success: function(b) {
                Home.buildStorefronts(b.data)
            }
        })
    },
    getStorefrontFilters: function(b) {
        var a = API.call({
            url: API.base_url + "channel-content/ops",
            data: {
                cat: b,
                version: 2,
                bbq: API.bbq
            },
            errorWrapper: true,
            errorCode: 24,
            emptyResponseAllowed: false,
            cached: 2,
            success: function(d, c, f) {
                if (View.actualPageIs(Storefront)) {
                    Storefront.buildPage(2, d.data)
                }
            }
        })
    },
    getStorefrontChannels: function(d, b, a) {
        var c = API.call({
            url: API.base_url + "channel-content/rows",
            data: {
                op: b,
                arg: a,
                cat: d,
                bbq: API.bbq
            },
            errorWrapper: true,
            errorCode: 45,
            emptyResponseAllowed: false,
            cached: 2,
            success: function(g) {
                var f = DataStore.parseAndStore(g);
                if (View.actualPageIs(Storefront)) {
                    Storefront.buildPage(3, f, b, a)
                }
            }
        })
    },
    getStorefrontContent: function(g, c, f, h, a, b) {
        var d = API.call({
            url: API.base_url + "channel-content/contents",
            data: {
                cat: g,
                op: c,
                arg: a,
                row: f,
                bbq: API.bbq
            },
            errorWrapper: true,
            errorCode: 45,
            emptyResponseAllowed: true,
            cached: 2,
            success: function(j) {
                var i = DataStore.parseAndStore(j);
                if (View.actualPageIs(Storefront)) {
                    Storefront.buildPage(4, i, h);
                    if (typeof b !== "undefined") {
                        try {
                            b()
                        } catch (k) {}
                    }
                }
            }
        })
    },
    getCurrentLiveContent: function(c, b) {
        b = b || false;
        var a = API.call({
            url: API.base_url + "guide/pf",
            data: {
                id: c
            },
            errorWrapper: true,
            errorCode: -1,
            emptyResponseAllowed: false,
            hideLoader: b,
            success: function(k, d, l) {
                var j = DataStore.parseAndStore(k);
                var i = j[0];
                VideoPlayer.setDetails("live", {
                    channelId: VideoPlayer.details.channelId,
                    programId: i.program,
                    eventId: i.event,
                    assetId: VideoPlayer.details.assetId,
                    isLive: true,
                    directMode: false
                });
                VideoPlayer.setDetailsHTML();
                var h = DataStore.get(Type.Event, i.event);
                VideoPlayer.currentTotalSeconds = Utils.getSecondsBetweenDates(h.startTime, h.endTime);
                VideoPlayer.additionalSeconds = 0;
                var f = l.getResponseHeader("Date");
                var g = new Date();
                if (f) {
                    g = Date.parse(f)
                }
                VideoPlayer.additionalSeconds = Math.round(Utils.getSecondsBetweenDates(h.startTime, g));
                VideoPlayer.currentSecondsOff = VideoPlayer.currentSeconds
            }
        })
    },
    getDataListContent: function(c, a) {
        var b = API.call({
            url: API.base_url + "catch/child-programs",
            data: {
                extended: true,
                id: c.parentId
            },
            errorWrapper: true,
            errorCode: 20,
            emptyResponseAllowed: true,
            success: function(d) {
                if (View.actualPageIs(DataList)) {
                    if (!d || !d.data) {
                        if (c && (c.programId || c.eventId)) {
                            DataSheet.setDetails(c.programId, c.eventId, c.channelId, c.assetId);
                            View.changeView(DataSheet, false);
                            return
                        }
                    }
                    if (a == true) {
                        API.getDataListMasters(DataStore.parseAndStore(d), d)
                    } else {
                        DataList.appendToLeftPanel(DataStore.parseAndStore(d), d)
                    }
                }
            }
        });
        return false
    },
    getDataListMasters: function(d, f) {
        try {
            if (d && d.length && d[0]["program"]) {
                var c = null;
                if (f && f.data && f.data.length && f.data[0]["event"] && f.data[0]["event"]["channel"]) {
                    c = f.data[0]["event"]["channel"]["id"]
                }
                var h = DataStore.get(Type.Program, d[0]["program"]);
                if (c != null && h && h.master) {
                    var b = DataStore.get(Type.Program, h.master);
                    if (b && b.isMaster == true) {
                        var a = API.call({
                            url: API.base_url + "seasons",
                            data: {
                                channel: c,
                                id: h.master
                            },
                            errorWrapper: true,
                            errorCode: 20,
                            emptyResponseAllowed: true,
                            success: function(j) {
                                if (View.actualPageIs(DataList)) {
                                    var i = DataStore.parseAndStore(j);
                                    DataList.buildLeftPanel(d, i)
                                }
                            },
                            error: function() {
                                if (View.actualPageIs(DataList)) {
                                    DataList.buildLeftPanel(d)
                                }
                            }
                        });
                        return
                    }
                }
            }
        } catch (g) {}
        DataList.buildLeftPanel(d)
    },
    getMyTVContent: function(a) {
        var c = 16;
        switch (a) {
            case "program-recording":
            case "pending-recordings":
                c = 17;
                break;
            case "watch-later":
                c = 18;
                break
        }
        var b = API.call({
            url: API.base_url + "my-tv/" + a,
            data: {
                extended: true
            },
            errorWrapper: true,
            errorCode: c,
            emptyResponseAllowed: true,
            success: function(d) {
                if (View.actualPageIs(Mytv)) {
                    Mytv.buildLeftPanel(DataStore.parseAndStore(d))
                }
            }
        })
    },
    getMyTVProgramDetails: function(c, b) {
        if (!c) {
            return
        }
        var a = API.call({
            url: API.base_url + "details/program",
            data: {
                id: c
            },
            errorWrapper: true,
            errorCode: -1,
            emptyResponseAllowed: false,
            success: function(f) {
                var d = DataStore.parseAndStore(f);
                d.id = c;
                if (View.actualPageIs(Mytv) && !b) {
                    Mytv.buildMiddlePanel(d)
                } else {
                    if (View.actualPageIs(DataList) && b === true) {
                        DataList.buildMiddlePanel(d)
                    }
                }
            }
        })
    },
    addMyTVItem: function(c, i, g, b) {
        var a;
        var h = 11;
        var f = {
            id: i
        };
        switch (c) {
            case "recording":
                a = "my-tv/add-recording";
                if (b === false) {
                    f.single = "1"
                }
                if (b === false || typeof b == "undefined") {
                    h = 50
                }
                break;
            case "program-recording":
                a = "my-tv/add-program-recording";
                f.channel = g;
                h = 50;
                break;
            case "watch-later":
                a = "my-tv/add-watch-later";
                h = 12;
                break;
            default:
                return
        }
        var d = API.call({
            url: API.base_url + a,
            data: f,
            errorWrapper: true,
            errorCode: h,
            emptyResponseAllowed: true,
            success: function(j) {
                if (c === "watch-later") {
                    PopMsg.show("info", 41)
                } else {
                    if (j && j.data && j.data.program) {
                        var k = j.data.program;
                        if (parseInt(k.season) > 0 && parseInt(k.episode) <= 0 && parseInt(k.episodePartial) <= 0) {
                            PopMsg.show("info", 49);
                            return
                        }
                    }
                    PopMsg.show("info", 42)
                }
            }
        })
    },
    deleteMyTVItem: function(b, f) {
        var d = 36;
        var a = "my-tv/remove-recording";
        switch (b) {
            case "watch-later":
                a = "my-tv/remove-watch-later";
                d = 38;
                break;
            case "pending-recordings":
                a = "my-tv/cancel-recording";
                d = 37;
                break;
            case "you-missed-it":
                return false
        }
        var c = API.call({
            url: API.base_url + a,
            data: {
                id: f
            },
            errorWrapper: true,
            errorCode: d,
            emptyResponseAllowed: true,
            success: function(h, g, i) {
                View.changeView(Mytv)
            }
        });
        return true
    },
    voteProgram: function(d, b) {
        var a = DataStore.get(Type.Program, d);
        if (a) {
            a.userVote = b
        }
        var c = API.call({
            url: API.base_url + "vote",
            data: {
                id: d,
                v: b
            },
            errorWrapper: true,
            errorCode: 9,
            emptyResponseAllowed: true,
            success: function() {
                PopUp.deInitView()
            }
        })
    },
    getEPGContent: function(b, d) {
        var c = new Date();
        var h = 86400;
        if (d.length == 1) {
            b = 0;
            h = h * 7
        }
        if (b != 0) {
            c.setDate(c.getDate() + b)
        }
        c.setHours(0, 0, 0, 0);
        var f = c.getTime() / 1000;
        var a = d.join(",");
        var i = {
            start: f,
            duration: h,
            ids: a
        };
        if (d.length == 1) {
            i.extended = "true"
        }
        var g = API.call({
            url: API.base_url + "guide",
            data: i,
            errorWrapper: true,
            errorCode: 8,
            emptyResponseAllowed: false,
            cached: 2,
            success: function(l, j, m) {
                if (l.data.channel) {
                    var k = DataStore.parseAndStore(l.data.channel);
                    if (View.actualPageIs(EPG)) {
                        EPG.buildGridContent(k, c)
                    }
                } else {
                    throw new API.Exception(API.Exception.NO_CONTENT)
                }
            }
        })
    },
    sendEVT: function(h, f, g, c, d) {
        if (g > 100000000 || c > 100000000) {
            return
        }
        var b = {
            pbid: h,
            asset: f,
            sec: g
        };
        if (d === true) {
            b.status = 2
        }
        if (arguments.length > 3 && parseInt(c) > 0) {
            b.played = c
        } else {
            return
        }
        var a = API.call({
            url: API.base_url + "evt/pb",
            data: b,
            hideLoader: true,
            noLogging: true,
            errorWrapper: false,
            errorCode: -1,
            emptyResponseAllowed: true,
            success: function(j, i, k) {
                if (j && j.data) {
                    if (parseInt(j.data) > -10) {
                        EVT.initStopTimer(j.data)
                    } else {
                        EVT.stopPlayer()
                    }
                }
            }
        })
    },
    getDUID: function() {
        var g = "MUUID";
        var h = totalChannelStorage.getItem(g);
        if (h === null || h == "" || typeof h === "undefined") {
            var a = navigator.userAgent;
            var f = a;
            var c = "";
            try {
                var k = a.indexOf("Model/");
                if (k > 0) {
                    a = a.substr(k)
                }
                var b = a.lastIndexOf("(");
                if (b >= 0) {
                    a = a.substr(b + 1)
                }
                var d = a.indexOf(")");
                if (d > 0) {
                    f = a.substr(0, d - 1)
                }
                f = f.replace(/[^a-z0-9;]+/gi, "");
                f = f.split(";");
                if (f.length >= 3) {
                    c = f[2];
                    f = f[0];
                    f = f + "-" + c
                } else {
                    f = a
                }
            } catch (j) {
                f = a
            }
            if (f.length > 20) {
                f = f.substr(0, 20)
            }
            try {
                h = f + "-" + Utils.UUID();
                if (TVA.device && (TVA.device == "toshiba" || TVA.device == "philips")) {
                    h = TVA.device.substring(0, 3).toUpperCase() + "-" + h
                }
                totalChannelStorage.setItem(g, h, true)
            } catch (i) {}
        }
        if (h.length > 100) {
            h = h.substr(0, 100)
        }
        return h
    },
    getDeviceId: function() {
        try {
            if (Main.deviceId === null || typeof Main.deviceId === "undefined" || Main.deviceId === "" || Main.deviceId === "undefined" || Main.deviceId === "FOO") {
                if (typeof TVA_Widevine != "undefined") {
                    Main.deviceId = TVA_Widevine.getESN()
                }
            }
        } catch (a) {}
        try {
            if (Main.deviceId === null || typeof Main.deviceId === "undefined" || Main.deviceId === "" || Main.deviceId === "undefined" || Main.deviceId === "FOO") {
                if (typeof TVA_Widevine != "undefined") {
                    Main.deviceId = "DUID-" + API.getDUID()
                }
            }
        } catch (a) {}
    },
    doLogin: function(b, d, c) {
        API.getDeviceId();
        var a = API.getInfoTxt();
        var g = {
            deviceId: Main.deviceId,
            deviceType: TVA.OTT.DEVICETYPE,
            year: TVA.year,
            u: b,
            p: d
        };
        if (API.svcArgs && API.svcArgs.length) {
            g.svcArgs = API.svcArgs
        }
        g.info = a;
        if (TVA.OTT.DEVICETYPE == 3000 && TVA.OTT.JSONREQUEST == "json") {
            document.cookie = "TCHASID=;path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
            document.cookie = "TCHASID=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"
        }
        var f = API.call({
            url: API.base_url + "auth/device-login",
            type: "post",
            data: g,
            errorWrapper: true,
            errorCode: 29,
            emptyResponseAllowed: true,
            hideLoader: false,
            loaderIndex: $("#messages-frame").css("zIndex"),
            success: function(i, h, j) {
                API.authSuccess(i, h, j, c)
            }
        })
    },
    doLogout: function() {
        if (View.actualPageIs(VideoPlayer)) {
            View.previousPage();
            setTimeout(API.doLogout, 2 * 1000);
            return
        }
        var a = API.call({
            url: API.base_url + "auth/logout",
            errorWrapper: false,
            errorCode: -1,
            emptyResponseAllowed: true,
            hideLoader: false,
            loaderIndex: $("#messages-frame").css("zIndex"),
            success: function() {
                var b = $(".header-menu-last");
                b.html(b.attr("loginhtml")).removeClass("header-menu-logout");
                View.loaderHide();
                Main.onLoad()
            }
        })
    },
    registerAndLogin: function(c, f, b, d) {
        API.getDeviceId();
        var a = API.getInfoTxt();
        var h = {
            deviceId: Main.deviceId,
            deviceType: TVA.OTT.DEVICETYPE,
            year: TVA.year,
            u: c,
            p: f,
            mail: b
        };
        if (API.svcArgs && API.svcArgs.length) {
            h.svcArgs = API.svcArgs
        }
        h.info = a;
        var g = API.call({
            url: API.base_url + "auth/register",
            type: "post",
            data: h,
            errorWrapper: true,
            errorCode: 29,
            hideLoader: false,
            loaderIndex: $("#messages-frame").css("zIndex"),
            emptyResponseAllowed: true,
            success: function(k, i, l) {
                API.authSuccess(k, i, l, d);
                var j = DataStore.getFromObject(k, "data_message", "");
                if (j != "") {
                    setTimeout(function() {
                        View.loaderElement.css("zIndex", View.loaderElement.attr("zidx"));
                        PopUp.showMe("info", false, j)
                    }, 1000)
                }
            }
        })
    },
    sendPlayResult: function(b) {
        var a = API.call({
            data: b,
            url: API.base_url + "play/result",
            errorWrapper: false,
            errorCode: -1,
            emptyResponseAllowed: true,
            success: function() {}
        })
    }
};
API.Exception = function(b, a) {
    this.message = b || "";
    this.txt = a || "";
    this.toString = function() {
        var c = this.message || "";
        try {
            if (this.txt) {
                c += (this.txt ? ": " + this.txt : "")
            }
        } catch (d) {}
        return c
    }
};
API.isRecordingDisabled = function() {
    try {
        return TVA.OTT.CONFIGDATA.recordingDisabled
    } catch (a) {}
    return false
};
API.Exception.NOT_ENOUGH_ARGS = "NOT_ENOUGH_ARGS";
API.Exception.EMPTY_RESPONSE = "EMPTY_RESPONSE";
API.Exception.API_ERROR = "API_ERROR";
API.Exception.URL_NOT_FOUND = "URL_NOT_FOUND";
API.Exception.NO_CONTENT = "NO_CONTENT";
var Type = {
    Featured: "Featured",
    Related: "Related",
    Recommended: "Recommended",
    MostViewed: "MostViewed",
    HighestRated: "HighestRated",
    SimilarProgram: "SimilarProgram",
    Content: "Content",
    Promo: "Promo",
    Event: "Event",
    Channel: "Channel",
    Program: "Program",
    Asset: "Asset",
    Master: "Master",
    Country: "Country",
    Language: "Language",
    Cast: "Cast",
    Recording: "Recording",
    WatchLater: "WatchLater",
    Schedule: "Schedule"
};
var TypeFeatured = {
    iotype: "Featured",
    event: null,
    program: null,
    asset: null
};
var TypeRelated = {
    iotype: "Related",
    event: null,
    program: null,
    asset: null
};
var TypeRecommended = {
    iotype: "Recommended",
    event: null,
    program: null,
    asset: null
};
var TypeMostViewed = {
    iotype: "MostViewed",
    event: null,
    program: null,
    asset: null
};
var TypeHighestRated = {
    iotype: "HighestRated",
    event: null,
    program: null,
    asset: null
};
var TypeSimilarProgram = {
    iotype: "SimilarProgram",
    event: null,
    program: null,
    asset: null
};
var TypeContent = {
    iotype: "Content",
    event: null,
    program: null,
    asset: null
};
var TypePromo = {
    iotype: "Promo",
    event: null,
    program: null,
    backgroundUrl: null
};
var TypeEvent = {
    iotype: "Event",
    id: null,
    program: null,
    asset: null,
    startTime: "2012-01-01T12:00:00+0000",
    endTime: "2012-01-01T13:00:00+0000",
    channel: null,
    title: null,
    type: null,
    genre: null,
    dual: null,
    subtitle: null,
    deafSubtitle: null,
    originalVersion: null,
    blindCommentary: null,
    live: null,
    repeated: null,
    firstShowing: null,
    lastShowing: null,
    hd: null,
    prerecorded: null,
    stereo: null
};
var TypeChannel = {
    iotype: "Channel",
    id: null,
    name: "",
    abrev: "",
    logoUrl: null,
    subscribed: null,
    free: null,
    liveAsset: null,
    events: null
};
var TypeProgram = {
    iotype: "Program",
    id: null,
    event: null,
    asset: null,
    title: "",
    episodeTitle: "",
    season: 0,
    episode: 0,
    episodePartial: 0,
    type: "",
    genre: "",
    parentalRating: 0,
    artisticReview: 0,
    comercialReview: 0,
    usersReview: 0,
    userVote: 0,
    productionYear: 0,
    productionCountry: null,
    language: null,
    synopsis: "",
    shortestSynopsis: "",
    thumbnailUrl: null,
    promoBgUrl: null,
    backgroundUrl: null,
    listBgUrl: null,
    coverUrl: null,
    cast: null,
    hashTag: null,
    trailerUrl: null,
    isMaster: null,
    master: null
};
var TypeAsset = {
    iotype: "Asset",
    id: null,
    keyName: null,
    duration: null,
    program: null,
    channel: null,
    url: null,
    drm: {
        type: "widevine",
        portalId: null,
        signonUrl: null,
        logUrl: null,
        emmUrl: null
    },
    pbId: null,
    adsvcUrl: null
};
var TypeMaster = {
    iotype: "Program",
    id: null,
    title: ""
};
var TypeCountry = {
    iotype: "Country",
    id: null,
    name: ""
};
var TypeLanguage = {
    iotype: "Language",
    id: null,
    name: ""
};
var TypeCast = {
    iotype: "Cast",
    id: null,
    name: "",
    surname: "",
    fullName: "",
    role: null
};
var TypeRecording = {
    iotype: "Recording",
    id: null,
    schedule: null,
    event: null,
    program: null,
    asset: null
};
var TypeWatchLater = {
    iotype: "WatchLater",
    id: null,
    asset: null
};
var TypeSchedule = {
    iotype: "Schedule",
    id: null
};
var APICache = {
    cache: {},
    cacheTimeout: 30 * 1000,
    cleanData: function() {
        try {
            var a = Utils.now();
            for (var b in APICache.cache) {
                if (APICache.cache.hasOwnProperty(b)) {
                    if (a - APICache.cache[b].now > APICache.cacheTimeout * APICache.cache[b].cached) {
                        delete APICache.cache[b]
                    }
                }
            }
        } catch (c) {}
    },
    getKey: function(b) {
        if (b) {
            var a = b.url + ":" + JSON.stringify(b.data);
            return a.replace(/([^A-Za-z0-9\:])+/gi, "")
        }
        return ""
    },
    getData: function(c) {
        try {
            var b = APICache.getKey(c);
            if (APICache.cache[b]) {
                var a = Utils.now();
                if (a - APICache.cache[b].now > APICache.cacheTimeout * APICache.cache[b].cached) {
                    delete APICache.cache[b];
                    return null
                }
                return APICache.cache[b].data
            }
        } catch (d) {}
        return null
    },
    saveData: function(b, c) {
        try {
            var a = APICache.getKey(b);
            if (APICache.cache[a]) {
                return false
            } else {
                if (b.cached < 1) {
                    b.cached = 1
                } else {
                    if (b.cached > 5) {
                        b.cached = 5
                    }
                }
                APICache.cache[a] = {
                    now: Utils.now(),
                    data: c,
                    cached: b.cached
                }
            }
            return true
        } catch (d) {}
        return false
    }
};
var DataStore = {
    Event: null,
    Channel: null,
    Program: null,
    Asset: null,
    Master: null,
    Country: null,
    Language: null,
    Cast: null,
    Recording: null,
    Content: null,
    WatchLater: null,
    LiveChannels: null,
    canPlay: function(c) {
        var b = false;
        for (var a in TVA.OTT.DRM) {
            if (TVA.OTT.DRM.hasOwnProperty(a)) {
                if (c.drms.indexOf(TVA.OTT.DRM[a]) >= 0) {
                    b = true
                }
            }
        }
        return b
    },
    parseAndStore: function(b) {
        if (!b) {
            return false
        }
        if (b.drms && !DataStore.canPlay(b)) {
            b.id = null
        }
        if (b.data) {
            return DataStore.parseAndStore(b.data)
        }
        var p = [];
        if (b instanceof Array) {
            for (var g in b) {
                var h = DataStore.parseAndStore(b[g]);
                if (h.iotype) {
                    var k = DataStore.getDummyObj(h.iotype);
                    h = jQuery.extend(k, h)
                }
                p.push(h)
            }
            return p
        } else {
            var o = {};
            for (var g in b) {
                if (b[g]) {
                    if (typeof b[g] === "object" && b[g].id) {
                        var m = DataStore.parseAndStore(b[g]);
                        o[g] = b[g].id
                    } else {
                        if (b[g] instanceof Array) {
                            p = [];
                            for (var d in b[g]) {
                                if (b[g][d].id) {
                                    var m = DataStore.parseAndStore(b[g][d]);
                                    p.push(b[g][d].id)
                                } else {
                                    if (b[g][d]["iotype"] == "Content") {
                                        var n = {};
                                        if (b[g][d]["event"]) {
                                            n.event = DataStore.parseAndStore(b[g][d]["event"])
                                        }
                                        if (b[g][d]["program"]) {
                                            n.program = DataStore.parseAndStore(b[g][d]["program"])
                                        }
                                        p.push(n)
                                    }
                                }
                            }
                            o[g] = p
                        } else {
                            if (g === "startTime" || g === "endTime") {
                                o[g] = Utils.getDateObj(b[g])
                            } else {
                                o[g] = b[g]
                            }
                        }
                    }
                } else {
                    if (b[g] === false || b[g] === 0) {
                        o[g] = b[g]
                    }
                }
            }
            if (o && o.id) {
                DataStore.store(o)
            }
            try {
                var c = null;
                var f = null;
                var a = null;
                if (o.asset) {
                    c = DataStore.get(Type.Asset, o.asset)
                } else {
                    if (o.liveAsset) {
                        c = DataStore.get(Type.Asset, o.liveAsset)
                    }
                }
                if (o.program) {
                    f = DataStore.get(Type.Program, o.program)
                } else {
                    if (c && c.program) {
                        f = DataStore.get(Type.Program, c.program)
                    }
                }
                if (o.event) {
                    a = DataStore.get(Type.Event, o.event)
                }
                if (c && f) {
                    f.asset = o.asset
                }
                if (c && a) {
                    a.asset = o.asset
                }
                if (f && a) {
                    f.event = a.id;
                    a.program = f.id
                }
            } catch (l) {}
            return o
        }
    },
    getFromObject: function(obj, path, defaultReturn) {
        defaultReturn = defaultReturn || "";
        try {
            var pathArr = path.split("_");
            var varStr = "obj";
            for (var x = 0; x < pathArr.length; x++) {
                var tmp = pathArr[x];
                if (typeof tmp === "number") {
                    varStr += "[" + tmp + "]"
                } else {
                    varStr += "['" + tmp + "']"
                }
            }
            return eval(varStr)
        } catch (e) {
            return defaultReturn
        }
    },
    getType: function(a) {
        try {
            if (a.indexOf("Schedule") === 0) {
                return "Schedule"
            }
        } catch (b) {}
        return a
    },
    store: function(c) {
        try {
            var a = DataStore.getType(c.iotype);
            var f = c.id;
            if (!DataStore[a]) {
                DataStore[a] = {}
            }
            if (DataStore[a][f]) {
                jQuery.extend(DataStore[a][f], c)
            } else {
                var d = DataStore.getDummyObj(a);
                DataStore[a][f] = jQuery.extend(d, c)
            }
            return f
        } catch (b) {
            return false
        }
    },
    get: function(a, c) {
        a = DataStore.getType(a);
        try {
            return DataStore[a][c] || DataStore.getDummyObj(a)
        } catch (b) {
            return DataStore.getDummyObj(a)
        }
    },
    remove: function(a, c) {
        a = DataStore.getType(a);
        try {
            if (DataStore[a][c]) {
                return delete DataStore[a][c]
            }
            return false
        } catch (b) {
            return false
        }
    },
    cleanRefs: function() {
        try {
            var c = Type.Program;
            var a = DataStore[c];
            for (var b in a) {
                if (a.hasOwnProperty(b)) {
                    var e = a[b];
                    if (e.master) {
                        e.master = null
                    }
                    if (e.parent) {
                        e.parent = null
                    }
                }
            }
        } catch (d) {}
    },
    getDummyObj: function(type) {
        type = DataStore.getType(type);
        try {
            var objName = eval("Type" + type);
            return jQuery.extend({}, objName)
        } catch (e) {
            return false
        }
    }
};
var Messenger = {
    BUF_LEN: 60,
    STR_LEN: 160,
    notifyPopup: function(a, b, c, d) {
        if (a == "error") {
            if (typeof c === "undefined") {
                c = "-"
            }
            switch (b) {
                case 51:
                case 47:
                case 34:
                    this._sendInfo("notifyPopup", a, {
                        stat: d + " [" + c + "]",
                        nr: b
                    });
                    break
            }
        }
    },
    videoPlayerStoppedDisabled: false,
    videoPlayerStopped: function() {
        try {
            var b = VideoPlayer.bufferEmptyMessages.length;
            if (b > 0) {
                var a = b > Messenger.BUF_LEN ? Messenger.BUF_LEN : b;
                var d = {
                    len: b,
                    res: VideoPlayer.bufferEmptyMessages.slice(0, a)
                };
                this._sendInfo("videoPlayerStopped", "buffering", JSON.stringify(d));
                VideoPlayer.bufferEmptyMessages = []
            }
        } catch (c) {}
        if (this.videoPlayerStoppedDisabled == true) {
            this.videoPlayerStoppedDisabled = false;
            return
        }
        this._sendInfo("videoPlayerStopped", "result", "STOP")
    },
    videoPlayerCanceled: function() {
        this._sendInfo("videoPlayerCanceled", "result", "CANCELED")
    },
    balancedUrl: function(a, c) {
        if (a) {
            var d = a;
            try {
                if (SmartPlugin) {
                    SmartPlugin.urlResource = a
                }
            } catch (b) {}
            this._sendInfo("balancedUrl", "url", d)
        }
    },
    videoPlayerResponseReceived: function(a) {
        try {
            if (typeof a === "string" && a.length > 0) {
                if (a.length > Messenger.STR_LEN) {
                    a = a.substring(0, Messenger.STR_LEN) + "..."
                }
                this._sendInfo("videoPlayerResponseReceived", "result", "RESPONSE_RECEIVED:" + a)
            } else {
                this._sendInfo("videoPlayerResponseReceived", "result", "RESPONSE_RECEIVED")
            }
        } catch (b) {}
    },
    videoPlayerConnecting: function() {
        this._sendInfo("videoPlayerConnecting", "result", "CONNECTING")
    },
    _sendInfo: function(c, b, a, d) {
        if (typeof a === "object") {
            a = JSON.stringify(a)
        }
        API.sendPlayResult({
            k: b,
            v: a,
            id: this._getAssetId(),
            pbid: this._getPbId(d),
            fn: c
        })
    },
    _getAssetId: function() {
        var a = "";
        try {
            a = VideoPlayer.details.assetId
        } catch (b) {}
        return a
    },
    _getPbId: function() {
        var a = "";
        try {
            a = VideoPlayer.lastPlayerResponseVideo.pbId
        } catch (b) {}
        return a
    }
};
var Commons = {
    lastTextScroll: null
};
Commons.scroll = function(j, c, f) {
    var k = 0;
    var i = 250;
    var e = false;
    if (c.movement != "top") {
        k = $(c.list + " " + c.listItem).width()
    } else {
        k = $(c.list + " " + c.listItem).height()
    }
    var g = parseInt($(c.list).css(c.movement));
    var h = 0;
    if (j < 0) {
        h = 0;
        if (g + k <= 0) {
            h = g + (k * f)
        } else {
            h = c.offset
        }
    } else {
        var b = $(c.list + " " + c.listItem).length;
        var d = (c.displayItems - 1);
        var a = (b - d) * k;
        h = Math.abs(g - (k * f));
        if (h < a) {
            h = g - (k * f)
        } else {
            h = k - a
        }
        if (c.movement == "top" && h > 0) {
            return
        }
    }
    if (h > 0) {
        h = 0
    }
    if (e) {
        if (c.movement == "top") {
            $(c.itemMove).animate({
                top: h
            }, i, function() {
                this.top = h
            })
        } else {
            $(c.itemMove).animate({
                left: h
            }, i, function() {})
        }
    } else {
        $(c.itemMove).css(c.movement, h)
    }
};
Commons.scrollIni = function(a) {
    $(a.list).css(a.movement, a.offset)
};
Commons.scrollEnd = function(a) {
    var b = 0;
    if (a.movement != "top") {
        b = $(a.list + " " + a.listItem).width()
    } else {
        b = $(a.list + " " + a.listItem).height()
    }
    var c = ($(a.list + " " + a.listItem).length - (a.displayItems)) * b;
    if (c >= 0) {
        $(a.list).css(a.movement, -(a.offset + c))
    }
};
Commons._textScrollById = function(k, a) {
    var d = $("#" + a);
    var f = d.height();
    var b = parseInt(d.css("top"));
    var l = $("#datasheet-description-container").height();
    var c = l - f;
    var e = c / l;
    var j = 0;
    var g = null;
    if (Math.abs(b) < Math.abs(c)) {
        if (k < 0 && f > l) {
            g = (b + ((Math.abs(c) / Math.abs(e)) * k));
            j = l - (f + g);
            d.css("top", j > 0 ? g + j : g);
            if (j > 0) {
                g = null
            }
        } else {
            if (b < 0) {
                g = (b + ((Math.abs(c) / Math.abs(e)) * k));
                j = l - (f + g);
                d.css("top", g > 0 ? 0 : g);
                if (g <= 0) {
                    g = null
                }
            } else {
                g = 0
            }
        }
    } else {
        if (k > 0) {
            if (b < 0) {
                if (Commons.lastTextScroll != 0) {
                    g = (b + (Commons.lastTextScroll))
                } else {
                    g = (b + ((Math.abs(c) / Math.abs(e)) * k))
                }
                d.css("top", g > 0 ? 0 : g);
                $("#prev-datasheet-description").removeClass("active");
                $("#next-datasheet-description").addClass("active");
                if (g <= 0) {
                    g = null
                }
            } else {
                g = 0
            }
        } else {
            g = 0
        }
    }
    var i = false;
    if (k > 0) {
        var h = parseInt(d.css("top"));
        i = (g !== null && g <= 0)
    } else {
        if (k < 0) {
            j = l - (f + parseInt(d.css("top")));
            i = (j >= 0 && g !== null)
        }
    }
    return i
};
Commons.textScroll = function(a) {
    var c = Commons._textScrollById(a, "datasheet-description");
    var b = Commons._textScrollById(a, "datasheet-cast");
    return c && b
};
Commons.scrollBySize = function(b, a, f, c) {
    var d = ($(a.list + " " + a.listItem).length - (a.displayItems - 1)) * c;
    var e = parseInt($(a.list).css(a.movement));
    if (b < 0) {
        if (e + c <= 0) {
            $(a.itemMove).css(a.movement, e + (c * f))
        } else {
            $(a.itemMove).css(a.movement, a.offset)
        }
    } else {
        if (Math.abs(e - c) < d) {
            $(a.itemMove).css(a.movement, e - (c * f))
        }
    }
};
Commons.setHover = function(d) {
    d = d.replace(/#/g, "");
    if (!d || d.length == 0) {
        return
    }
    var a = $("#" + d);
    if (a.length > 0) {
        var c = View.actualHover;
        try {
            Commons.offHover(c)
        } catch (b) {}
        View.actualHover = d;
        TVA.setHover(d)
    }
};
Commons.offHover = function(a) {
    a = a.replace(/#/g, "");
    if (a && $("#" + a).length > 0) {
        TVA.offHover(a)
    }
};
Commons.setFocus = function(b) {
    b = b.replace(/#/g, "");
    if (b && $("#" + b).length > 0) {
        try {
            Commons.offFocus(View.actualFocus)
        } catch (a) {}
        View.actualFocus = b;
        TVA.setFocus(b)
    }
};
Commons.offFocus = function(a) {
    a = a.replace(/#/g, "");
    if (a && $("#" + a).length > 0) {
        TVA.offFocus(a)
    }
};
Commons.hideVersion = function() {
    $(".bookmark").addClass("hide-this")
};
var Header = {
    actualPage: 0,
    headerPages: 0,
    activePage: 0,
    previousActivePage: -1,
    storeFrontCount: 0,
    storeFrontLoaded: false,
    init: function() {
        Header.actualPage = 0;
        Header.headerPages = 0;
        Header.activePage = 0;
        Header.previousActivePage = -1;
        Header.storeFrontCount = 0;
        Header.storeFrontLoaded = false;
        $(".header-menu-help").html("AYUDA")
    },
    jsonResponse: function(b) {
        if (typeof b === "object" && b !== null && b.data && b.data.length > 0) {
            var a = $(".header-menu-totalfan");
            a.removeClass("hide-this");
            TVA.putInnerHTML(a.get(0), "TOTALSTORE")
        }
        TotalStore.options = b && b.data ? b.data : null
    },
    setFocus: function(a) {
        if (a === true && Header.previousActivePage < 0) {
            try {
                if (View.actualPage == Home) {
                    Header.previousActivePage = 0
                } else {
                    if (View.actualPage == EPG) {
                        Header.previousActivePage = 2
                    } else {
                        if (View.actualPage == Mytv) {
                            Header.previousActivePage = 3
                        } else {
                            if (View.actualPage == TotalStore) {
                                Header.previousActivePage = -1;
                                $(".header-menu").each(function() {
                                    if ($(this).hasClass("header-menu-totalfan")) {
                                        Header.previousActivePage = 3
                                    }
                                })
                            } else {
                                if (View.actualPage == Storefront) {
                                    Header.previousActivePage = -1;
                                    $(".header-menu").each(function(d) {
                                        var e = $(this).get(0).getAttribute("data-id");
                                        if (Storefront.mode === e && Header.previousActivePage < 0) {
                                            Header.previousActivePage = d
                                        }
                                    })
                                }
                            }
                        }
                    }
                }
            } catch (c) {}
        }
        Header.checkActive();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Commons.setFocus("header");
        Commons.setHover("header" + Header.actualPage);
        Header.headerPages = $(".header-list").find("li").length;
        if (View.actualPage === Mytv && $("#left-panel-list").find(".displayed").length === 0) {
            Footer.enableLeft();
            var b = $("#left-controls");
            b.find(".one-button-footer").addClass("disabled");
            b.find(".two-button-footer").addClass("disabled")
        } else {
            Footer.disableLeft()
        }
    },
    checkActive: function() {
        if (Header.previousActivePage >= 0) {
            $(".header-list").find("li").removeClass("active");
            Header.activePage = Header.previousActivePage;
            $("#header" + Header.previousActivePage).addClass("active");
            Header.previousActivePage = -1
        }
    },
    hideMe: function(a) {
        if (a) {
            $("#header").addClass("hide-this")
        } else {
            $("#header").removeClass("hide-this")
        }
    },
    isVisible: function() {
        return !$("#header").hasClass("hide-this")
    },
    removeElement: function(b) {
        var a = $("#header" + b).not(".header-important");
        if (a && a.length) {
            a.addClass("hidden-header-element");
            return true
        }
        return false
    },
    keyHandler: function(a) {
        var c, e = 0;
        var b = $(".header-list");
        var f = null;
        if (Header.headerPages == 0) {
            f = b.find("li");
            Header.headerPages = f.length
        }
        switch (a) {
            case TVA.tvKey.KEY_RIGHT:
                for (e = Header.actualPage + 1; e < Header.headerPages; e++) {
                    c = $("#header" + e);
                    if (c && !c.hasClass("hidden-header-element") && !c.hasClass("hide-this")) {
                        break
                    }
                    c = null
                }
                if (!c && (Header.actualPage < 10 || Header.actualPage >= Header.headerPages)) {
                    e = 0;
                    Header.actualPage = e;
                    c = $("#header" + e)
                }
                if (c) {
                    Commons.offHover(View.actualHover);
                    Header.actualPage = e;
                    Commons.setHover("header" + Header.actualPage)
                }
                break;
            case TVA.tvKey.KEY_LEFT:
                for (e = Header.actualPage - 1; e >= 0; e--) {
                    c = $("#header" + e);
                    if (c && !c.hasClass("hidden-header-element") && !c.hasClass("hide-this")) {
                        break
                    }
                    c = null
                }
                if (!c) {
                    e = 0;
                    Header.actualPage = e;
                    c = $("#header" + e)
                }
                if (c) {
                    Commons.offHover(View.actualHover);
                    Header.actualPage = e;
                    Commons.setHover("header" + Header.actualPage)
                }
                break;
            case TVA.tvKey.KEY_DOWN:
                if (TVA.OTT.CLOSE_CHLIST == false && !View.actualPageIs(VideoPlayer) && SidePanel.isVisible()) {
                    SidePanel.setFocus();
                    return false
                }
                View.actualPage.setFocus();
                break;
            case TVA.tvKey.KEY_ENTER:
                e = Header.activePage;
                c = Header.actualPage;
                $("#header" + Header.activePage).removeClass("active");
                if (f == null || !f.length) {
                    f = b.find("li")
                }
                f.removeClass("active");
                $("#header" + Header.actualPage).addClass("active");
                Header.activePage = Header.actualPage;
                if (Header.actualPage == 0) {
                    View.changeView(Home)
                } else {
                    if (Header.actualPage == 3) {
                        if (Main.username !== "") {
                            if (API.isRecordingDisabled() == false) {
                                View.changeView(Mytv)
                            } else {
                                View.changeView(EPG)
                            }
                        } else {
                            Header.activePage = e;
                            Header.actualPage = c;
                            $("#header" + c).removeClass("active");
                            f.removeClass("active");
                            $("#header" + e).addClass("active");
                            PopMsg.show("info", 35)
                        }
                    } else {
                        if (Header.actualPage == 2) {
                            View.changeView(EPG)
                        } else {
                            if (Header.actualPage == 1) {
                                if (TVA.OTT.CLOSE_CHLIST == true) {
                                    Header.previousActivePage = e
                                }
                                API.getChannels("live")
                            } else {
                                if ($("#header" + Header.actualPage).hasClass("header-menu-totalfan")) {
                                    View.changeView(TotalStore)
                                } else {
                                    if ($("#header" + Header.actualPage).hasClass("header-menu-last")) {
                                        API.startPairing()
                                    } else {
                                        if ($("#header" + Header.actualPage).hasClass("header-menu-help")) {
                                            Header.previousActivePage = e;
                                            PopUp.showTutorial(true)
                                        } else {
                                            if ((Header.actualPage >= 4) && (Header.actualPage <= (4 + Header.storeFrontCount))) {
                                                var d = document.getElementById("header" + Header.actualPage);
                                                Storefront.mode = d.getAttribute("data-id");
                                                Storefront.pageIdx = 4 + parseInt(d.getAttribute("data-page-idx"));
                                                View.changeView(Storefront)
                                            } else {
                                                if (Header.actualPage == (Header.headerPages - 1)) {
                                                    API.startPairing()
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case TVA.tvKey.KEY_PLAY:
            case TVA.tvKey.KEY_PAUSE:
            case TVA.tvKey.KEY_RW:
            case TVA.tvKey.KEY_FF:
            case TVA.tvKey.KEY_FAST_FW:
            case TVA.tvKey.KEY_FAST_RW:
            case TVA.tvKey.KEY_STOP:
            case TVA.tvKey.KEY_INFO:
                return true;
                break
        }
        return false
    },
    setPage: function(b, a) {
        Header.actualPage = a;
        Commons.setHover(b)
    },
    handleSpecialKeys: function(c) {
        try {
            if (TVA.tvKey && TVA.tvKey.hasOwnProperty("KEY_CHLIST") && TVA.tvKey.KEY_CHLIST && c === TVA.tvKey.KEY_CHLIST && Main.username != "" && View.actualPageIs(PopUp) == false) {
                if (View.actualFocus !== "side-panel-container" && View.actualFocus !== "side-panel-container-video") {
                    API.getChannels("live")
                } else {
                    SidePanel.hideMe(true);
                    View.actualPage.setFocus()
                }
                return true
            }
            if (TVA.tvKey && TVA.tvKey.hasOwnProperty("KEY_GUIDE") && TVA.tvKey.KEY_GUIDE && c === TVA.tvKey.KEY_GUIDE && View.actualPageIs(PopUp) == false) {
                var a = false;
                if (View.actualFocus === "side-panel-container" || View.actualFocus === "side-panel-container-video") {
                    SidePanel.hideMe(true);
                    a = true
                }
                if (View.actualPageIs(EPG) == false) {
                    Header.actualPage = 2;
                    Header.keyHandler(TVA.tvKey.KEY_ENTER)
                } else {
                    if (a == true) {
                        View.actualPage.setFocus()
                    }
                }
                return true
            }
            if (TVA.tvKey && (c === TVA.tvKey.KEY_CH_UP || c === TVA.tvKey.KEY_CH_DOWN) && View.actualPageIs(VideoPlayer) == false && View.actualPageIs(PopUp) == false) {
                if (View.actualFocus !== "side-panel-container" && View.actualFocus !== "side-panel-container-video") {
                    API.getChannels("live");
                    return true
                } else {
                    return (c === TVA.tvKey.KEY_CH_UP) ? TVA.tvKey.KEY_UP : TVA.tvKey.KEY_DOWN
                }
            }
        } catch (b) {}
        return false
    }
};
var Footer = {
    element: {
        "logged-user": null,
        "left-controls": null,
        "center-controls": null,
        "right-controls": null
    },
    leftMethods: {},
    leftDisabled: false,
    centerMethods: {},
    centerDisabled: false,
    rightMethods: {},
    rightDisabled: false,
    init: function() {
        Footer.element["logged-user"] = $("#logged-user");
        Footer.element["left-controls"] = $("#left-controls");
        Footer.element["center-controls"] = $("#center-controls");
        Footer.element["right-controls"] = $("#right-controls");
        try {
            Footer.setUser("");
            Footer.clean()
        } catch (a) {}
    },
    clean: function() {
        try {
            TVA.putInnerHTML(Footer.element["left-controls"].get(0), "");
            TVA.putInnerHTML(Footer.element["center-controls"].get(0), "")
        } catch (a) {}
    },
    setUser: function(a) {
        TVA.putInnerHTML(Footer.element["logged-user"].get(0), a)
    },
    setLeft: function(b, e) {
        var j = b.slice(0);
        if (e === true) {
            Footer.element["left-controls"].addClass("hide-this")
        } else {
            Footer.element["left-controls"].removeClass("hide-this")
        }
        var h = "";
        if (TVA.zoomMargins != null && View.actualPage == Home) {
            var f, d;
            h = "yellow-button-footer";
            var g = TVA.tvKey.KEY_YELLOW;
            if (TVA.device == "ps3") {
                h = "green-button-footer";
                g = TVA.tvKey.KEY_GREEN
            }
            f = {
                text: "Zoom +",
                className: h,
                keycode: g,
                method: function() {
                    Utils.setZoom(+1);
                    Footer.checkButtons(false);
                    return false
                }
            };
            h = "blue-button-footer";
            g = TVA.tvKey.KEY_BLUE;
            if (TVA.device == "ps3") {
                h = "red-button-footer";
                g = TVA.tvKey.KEY_RED
            }
            d = {
                text: "Zoom -",
                className: h,
                keycode: g,
                method: function() {
                    Utils.setZoom(-1);
                    Footer.checkButtons(false);
                    return false
                }
            };
            if (TVA.device == "ps3") {
                j.push(d);
                j.push(f)
            } else {
                j.push(f);
                j.push(d)
            }
        }
        var c = "";
        Footer.leftMethods = {};
        for (var a = 0; a < j.length; a++) {
            var k = j[a];
            h = k.className;
            if (k.disabled) {
                h += " disabled"
            }
            c += '<li id="leftFooterButton' + a + '" class="leftFooterButton-' + k.keycode + " " + h + '" onmouseover="Commons.setHover(this.id);" onmouseout="Commons.offHover(this.id);" onclick="Footer.keyHandler(' + k.keycode + ');">' + k.text + "</li>";
            Footer.leftMethods[k.keycode] = k.method
        }
        TVA.putInnerHTML(Footer.element["left-controls"].get(0), c);
        if (TVA.zoomMargins != null && View.actualPage == Home) {
            Footer.checkButtons(false)
        }
    },
    showLeft: function() {
        Footer.element["left-controls"].removeClass("hide-this")
    },
    setCenter: function(f, d) {
        var a = f.slice(0);
        var c = "";
        if (d === true) {
            Footer.element["center-controls"].addClass("hide-this")
        } else {
            Footer.element["center-controls"].removeClass("hide-this")
        }
        Footer.centerMethods = {};
        for (var b = 0; b < a.length; b++) {
            var g = a[b];
            var e = g.className;
            if (g.disabled) {
                e += " disabled"
            }
            c += '<li id="centerFooterButton' + b + '" class="centerFooterButton-' + g.keycode + " " + e + '" onmouseover="Commons.setHover(this.id);" onmouseout="Commons.offHover(this.id);" onclick="Footer.keyHandler(' + g.keycode + ');">' + g.text + "</li>";
            Footer.centerMethods[g.keycode] = g.method
        }
        TVA.putInnerHTML(Footer.element["center-controls"].get(0), c)
    },
    showCenter: function() {
        Footer.element["center-controls"].removeClass("hide-this")
    },
    setRight: function(e, d) {
        var a = e.slice(0);
        var c = "";
        if (d === true) {
            Footer.element["right-controls"].addClass("hide-this")
        } else {
            Footer.element["right-controls"].removeClass("hide-this")
        }
        Footer.rightMethods = {};
        for (var b = 0; b < a.length; b++) {
            var f = a[b];
            c += '<li id="rightFooterButton' + b + '" class="rightFooterButton-' + f.keycode + " " + f.className + '" onmouseover="Commons.setHover(this.id);" onmouseout="Commons.offHover(this.id);" onclick="Footer.keyHandler(' + f.keycode + ');">' + f.text + "</li>";
            Footer.rightMethods[f.keycode] = f.method
        }
        TVA.putInnerHTML(Footer.element["right-controls"].get(0), c)
    },
    showRight: function() {
        Footer.element["right-controls"].removeClass("hide-this")
    },
    enableLeft: function() {
        if (Footer.element["left-controls"]) {
            Footer.element["left-controls"].removeClass("disabled")
        }
        Footer.leftDisabled = false
    },
    disableLeft: function() {
        if (Footer.element["left-controls"]) {
            Footer.element["left-controls"].addClass("disabled")
        }
        Footer.leftDisabled = true;
        if (TVA.zoomMargins != null && View.actualPage == Home) {
            Footer.checkButtons(false)
        }
    },
    checkButtons: function(d) {
        if (TVA.zoomMargins === null || (View.tempPage !== Home && View.actualPage !== Home)) {
            return
        }
        var a = ".yellow-button-footer";
        var b = ".blue-button-footer";
        if (TVA.device == "ps3") {
            a = ".green-button-footer";
            b = ".red-button-footer"
        }
        if (d === true) {
            $(a).removeClass("notdisabled").addClass("disabled");
            $(b).removeClass("notdisabled").addClass("disabled");
            return
        }
        var c = Utils.getZoom();
        if (TVA.zoomMargins.min == c) {
            $(a).addClass("notdisabled").removeClass("disabled");
            $(b).removeClass("notdisabled").addClass("disabled")
        } else {
            if (TVA.zoomMargins.max == c) {
                $(a).removeClass("notdisabled").addClass("disabled");
                $(b).addClass("notdisabled").removeClass("disabled")
            } else {
                $(a).addClass("notdisabled").removeClass("disabled");
                $(b).addClass("notdisabled").removeClass("disabled")
            }
        }
    },
    enableCenter: function() {
        Footer.element["center-controls"].removeClass("disabled");
        Footer.centerDisabled = false
    },
    disableCenter: function() {
        Footer.element["center-controls"].addClass("disabled");
        Footer.centerDisabled = true
    },
    disableRight: function() {
        Footer.element["right-controls"].addClass("disabled");
        Footer.rightDisabled = true
    },
    enableRight: function() {
        Footer.element["right-controls"].removeClass("disabled");
        Footer.rightDisabled = false
    },
    keyHandler: function(b, d) {
        if (View.actualFocus === "footer" && d !== true) {
            return Footer.footerKeyHandler(b)
        }
        var a = b;
        if (Main.keyHistoryMatches(Main.SHORTCUT_SHOW_INFOBAR_CLOCK) == true) {
            a = TVA.tvKey.FN_12
        }
        switch (a) {
            case TVA.tvKey.KEY_DOWN:
            case TVA.tvKey.KEY_UP:
            case TVA.tvKey.KEY_RIGHT:
            case TVA.tvKey.KEY_LEFT:
                return true
        }
        if (a == TVA.tvKey.KEY_PLAY && View.actualPage != VideoPlayer && (d == true || View.actualPage != EPG)) {
            API.getChannels("direct");
            return false
        } else {
            if (!Footer.leftDisabled && Footer.leftMethods.hasOwnProperty(a) && !$(".leftFooterButton-" + a).hasClass("disabled")) {
                return Footer.leftMethods[a]()
            } else {
                if (TVA.zoomMargins != null && Footer.leftDisabled && View.actualPage == Home && ((TVA.device != "ps3" && (a == TVA.tvKey.KEY_YELLOW || a == TVA.tvKey.KEY_BLUE)) || (TVA.device == "ps3" && (a == TVA.tvKey.KEY_GREEN || a == TVA.tvKey.KEY_RED))) && Footer.leftMethods.hasOwnProperty(a) && !$(".leftFooterButton-" + a).hasClass("disabled")) {
                    return Footer.leftMethods[a]()
                } else {
                    if (!Footer.centerDisabled && Footer.centerMethods.hasOwnProperty(a) && !$(".centerFooterButton-" + a).hasClass("disabled")) {
                        return Footer.centerMethods[a]()
                    } else {
                        if (Footer.rightMethods.hasOwnProperty(a) && !$(".rightFooterButton-" + a).hasClass("disabled")) {
                            return Footer.rightMethods[a]()
                        }
                    }
                }
            }
        }
        if (a == TVA.tvKey.FN_12) {
            var c = totalChannelStorage.getItem("clock");
            if (c == "1") {
                c = "0"
            } else {
                c = "1"
            }
            totalChannelStorage.setItem("clock", c);
            View.showClock();
            return false
        }
        return true
    },
    lastFocus: null,
    lastHover: null,
    footerKeyHandler: function(a) {
        switch (a) {
            case TVA.tvKey.KEY_UP:
                Commons.setFocus(Footer.lastFocus);
                Commons.setHover(Footer.lastHover);
                return false;
            case TVA.tvKey.KEY_DOWN:
                if (View.actualPage === VideoPlayer) {
                    VideoControls.hideControls()
                }
                return false;
            case TVA.tvKey.KEY_ENTER:
                Footer.keyHandler(TVA.tvKey.KEY_PLAY, true);
                return false;
            default:
                break
        }
        return true
    },
    setFocus: function(a) {
        if (TVA.GUI.FOCUS_FOOTER == false) {
            Commons.setHover(a ? a : "directo");
            return
        }
        if (View.actualFocus === "footer") {
            return
        }
        Footer.lastFocus = View.actualFocus;
        Footer.lastHover = View.actualHover;
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Commons.setFocus("footer");
        Commons.setHover("directo")
    }
};
var SidePanel = {
    actualItem: 0,
    itemLength: 0,
    visibleItem: 0,
    listBoxDisplay: 0,
    scrollLimit: 0,
    elementNames: {},
    rightFooterWasEnabled: false,
    leftFooterWasEnabled: false,
    timer: null,
    movingFocus: true,
    setFocus: function() {
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Commons.setFocus(SidePanel.elementNames.container);
        Commons.setHover(SidePanel.elementNames.tableItem + SidePanel.actualItem);
        SidePanel.checkScrollIcons();
        SidePanel.hideMe(false)
    },
    isVisible: function() {
        return $("#" + SidePanel.elementNames.container).is(":visible")
    },
    unloadFooter: function() {
        var a = [];
        Footer.disableCenter();
        Footer.setCenter(a);
        if (this.rightFooterWasEnabled) {
            Footer.enableRight()
        }
        if (this.leftFooterWasEnabled) {
            Footer.enableLeft()
        }
        Footer.checkButtons()
    },
    loadFooter: function() {
        this.rightFooterWasEnabled = false;
        this.leftFooterWasEnabled = false;
        if (!Footer.rightDisabled) {
            this.rightFooterWasEnabled = true
        }
        if (!Footer.leftDisabled) {
            this.leftFooterWasEnabled = true;
            Footer.disableLeft()
        }
        var a = [];
        a.push({
            text: "Ver",
            className: "enter-button-footer",
            keycode: false,
            method: false
        });
        Footer.enableCenter();
        Footer.setCenter(a);
        Footer.checkButtons(View.actualPageIs(Home) == false)
    },
    init: function(a) {
        SidePanel.reset();
        if (View.actualPage === VideoPlayer) {
            SidePanel.elementNames = {
                container: "side-panel-container-video",
                overlay: "side-panel-container-overlay-video",
                inner: "side-panel-channels-video",
                table: "side-panel-table-video",
                tableItem: "video-side-option"
            }
        } else {
            SidePanel.elementNames = {
                container: "side-panel-container",
                overlay: "side-panel-container-overlay",
                inner: "side-panel-describe",
                table: "side-panel-table",
                tableItem: "side-option"
            };
            SidePanel.loadFooter()
        }
        SidePanel.listBoxDisplay = a.displayItems;
        SidePanel.scrollLimit = a.scrollLimit - 1;
        $("#" + SidePanel.elementNames.inner).removeClass().addClass(a.classC);
        if (a.modal) {
            $("#" + SidePanel.elementNames.overlay).removeClass("hide-this")
        } else {
            $("#" + SidePanel.elementNames.overlay).addClass("hide-this")
        }
    },
    resetTimeout: function(a) {
        VideoControls.lastButtonPress = 0;
        window.clearTimeout(SidePanel.timer);
        if (a == true && View.actualPage === VideoPlayer && View.actualFocus === "side-panel-container-video") {
            var b = TVA.OTT.HIDE_CONTROLS_TO;
            if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA) {
                b = b + (b / 2)
            }
            SidePanel.timer = window.setTimeout(SidePanel.closePanel, b)
        }
    },
    reset: function() {
        $("#" + SidePanel.elementNames.table).css("top", 0);
        SidePanel.actualItem = 0;
        SidePanel.itemLength = 0;
        SidePanel.visibleItem = 0;
        SidePanel.elementNames = {}
    },
    hideMe: function(a) {
        if (a) {
            $("#" + SidePanel.elementNames.container).addClass("hide-this");
            if (View.actualPageIs(PopUp) == false) {
                Commons.offFocus(View.actualFocus);
                Commons.offHover(View.actualHover)
            }
            SidePanel.unloadFooter();
            SidePanel.resetTimeout(false)
        } else {
            $("#" + SidePanel.elementNames.container).removeClass("hide-this");
            SidePanel.resetTimeout(true)
        }
    },
    scroll: function(a) {
        Commons.scroll(a, {
            list: "#" + SidePanel.elementNames.table,
            listItem: "tr",
            itemMove: "#" + SidePanel.elementNames.table,
            displayItems: SidePanel.listBoxDisplay,
            movement: "top",
            offset: 0
        }, 1)
    },
    checkScrollIcons: function() {
        var d = (SidePanel.actualItem < SidePanel.itemLength - 1);
        var a = (SidePanel.actualItem != 0);
        var c = "side-panel-scroll-up";
        var b = "side-panel-scroll-down";
        if (View.actualPage === VideoPlayer) {
            c += "-video";
            b += "-video"
        }
        if (d) {
            $("#" + b).removeClass("hide-this")
        } else {
            $("#" + b).addClass("hide-this")
        }
        if (a) {
            $("#" + c).removeClass("hide-this")
        } else {
            $("#" + c).addClass("hide-this")
        }
    },
    build: function(a, o) {
        var z = true;
        var g = $("#" + SidePanel.elementNames.table);
        g.addClass("sidepanel-home");
        g.parent().parent().find(".side-panel-info").show();
        var m = "";
        var j = -1;
        var x = "";
        for (var t in a) {
            if (a.hasOwnProperty(t)) {
                var A = a[t];
                if (o && A.id === o.id) {
                    j = parseInt(t)
                }
                var f = "" + A.logoUrl;
                if (f == "" || f == "undefined" || f == "null") {
                    f = "resource/channelicon.png";
                    x = "<img src='" + f + "'>"
                } else {
                    x = "<img src='" + API.image_base_url + f + "'>"
                }
                var u = true;
                try {
                    u = (A.subscribed !== false)
                } catch (d) {
                    u = true
                }
                m += "<tr id='" + SidePanel.elementNames.tableItem + t + "' data-channelId='" + A.id + "' data-assetId='" + A.liveAsset + "' onmouseover='SidePanel.hoverTo(" + t + ",this.id);' onclick='SidePanel.keyHandler(TVA.tvKey.KEY_ENTER);' ><td><div class='channel-logo'>" + x + "</div></td><td class='channel-name " + (u ? "" : "grayed-txt") + "'><div class='sidepanel-chname'>" + A.name + "</div></td>";
                if (z == true) {
                    var r = [];
                    try {
                        r[r.length] = A.pf[0]["program"]["title"];
                        if (A.pf[0]["program"]["episodeTitle"]) {
                            r[r.length] = A.pf[0]["program"]["episodeTitle"]
                        }
                    } catch (y) {}
                    r = r.join(": ");
                    var n = [];
                    try {
                        n[n.length] = A.pf[1]["program"]["title"];
                        if (A.pf[1]["program"]["episodeTitle"]) {
                            n[n.length] = A.pf[1]["program"]["episodeTitle"]
                        }
                    } catch (y) {}
                    n = n.join(": ");
                    m += "<td class='channel-name channel-pf " + (u ? "" : "grayed-txt") + " sidepanel-present'><div class='sidepanel-present-txt'>" + r + "</div></td>";
                    m += "<td class='channel-name channel-pf " + (u ? "" : "grayed-txt") + " sidepanel-following'><div class='sidepanel-following-txt'>" + n + "</div></td>"
                }
                m += "</tr>"
            }
        }
        TVA.putInnerHTML(document.getElementById(SidePanel.elementNames.table), m);
        var p = SidePanel.elementNames.table;
        var l = $("#" + p);
        var b = l.find("tr");
        SidePanel.itemLength = b.length;
        if (j > 0) {
            SidePanel.hideMe(false);
            var h = b.height();
            var q = h * j;
            var w = q;
            var v = l.parent().height();
            var s = l.height() - q;
            if (s < v) {
                q -= (v - s)
            }
            var c = (w - q) / h;
            if (c < SidePanel.scrollLimit) {
                q -= ((SidePanel.scrollLimit - c) * h)
            }
            if (q < 0) {
                q = 0
            }
            SidePanel.actualItem = j;
            SidePanel.visibleItem = (w - q) / h;
            l.css("top", -q)
        }
        SidePanel.setFocus()
    },
    hoverTo: function(b, c) {
        var a = (SidePanel.visibleItem - SidePanel.actualItem);
        SidePanel.actualItem = b;
        SidePanel.visibleItem = SidePanel.actualItem + a;
        Commons.setHover(c);
        SidePanel.checkScrollIcons()
    },
    next: function() {
        var b = SidePanel.actualItem + 1;
        if (b < SidePanel.itemLength) {
            SidePanel.visibleItem = SidePanel.visibleItem + 1;
            if ((SidePanel.visibleItem > SidePanel.scrollLimit) && (SidePanel.actualItem < (SidePanel.itemLength - (SidePanel.listBoxDisplay - SidePanel.scrollLimit)))) {
                SidePanel.visibleItem = SidePanel.scrollLimit;
                SidePanel.scroll(1)
            }
            SidePanel.actualItem = b;
            var a = $("#" + SidePanel.elementNames.table);
            var d = $("#" + SidePanel.elementNames.tableItem + SidePanel.actualItem);
            var c = 0;
            while (a.position().top + d.position().top >= a.parent().height() && c++ < SidePanel.scrollLimit) {
                SidePanel.scroll(1)
            }
            if (SidePanel.movingFocus == true) {
                Commons.setHover(SidePanel.elementNames.tableItem + SidePanel.actualItem);
                SidePanel.checkScrollIcons()
            }
        }
    },
    previous: function(e) {
        var b = SidePanel.actualItem - 1;
        if (b >= 0) {
            SidePanel.visibleItem = SidePanel.visibleItem - 1;
            if ((SidePanel.visibleItem < SidePanel.scrollLimit) && (SidePanel.actualItem > SidePanel.scrollLimit)) {
                SidePanel.visibleItem = SidePanel.scrollLimit;
                SidePanel.scroll(-1)
            }
            SidePanel.actualItem = b;
            var a = $("#" + SidePanel.elementNames.table);
            var d = $("#" + SidePanel.elementNames.tableItem + SidePanel.actualItem);
            var c = 0;
            while (a.position().top + d.position().top < 0 && c++ < SidePanel.scrollLimit) {
                SidePanel.scroll(-1)
            }
            Commons.setHover(SidePanel.elementNames.tableItem + SidePanel.actualItem)
        } else {
            if (!e) {
                if (TVA.OTT.CLOSE_CHLIST == true) {
                    SidePanel.closePanel()
                } else {
                    if (View.actualPageIs(VideoPlayer) && VideoControls.isHidden) {
                        VideoControls.showControls();
                        Header.setFocus()
                    } else {
                        if (Header.isVisible()) {
                            Header.setFocus()
                        }
                    }
                }
            }
        }
        SidePanel.checkScrollIcons()
    },
    closePanel: function() {
        SidePanel.actualItem = 0;
        SidePanel.visibleItem = 0;
        SidePanel.hideMe(true);
        Header.setFocus(true);
        if (View.actualPage === VideoPlayer) {
            VideoControls.hideControls()
        }
    },
    keyHandler: function(a) {
        SidePanel.resetTimeout(true);
        switch (a) {
            case TVA.tvKey.KEY_UP:
                SidePanel.previous();
                return false;
                break;
            case TVA.tvKey.KEY_DOWN:
                SidePanel.next();
                return false;
                break;
            case TVA.tvKey.KEY_RETURN:
            case TVA.tvKey.KEY_RIGHT:
            case TVA.tvKey.KEY_LEFT:
                SidePanel.closePanel();
                return false;
                break;
            case TVA.tvKey.KEY_ENTER:
                var b = $("#" + SidePanel.elementNames.tableItem + SidePanel.actualItem);
                var c = {
                    programId: b.data("programId"),
                    eventId: b.data("eventId"),
                    assetId: b.data("assetId"),
                    channelId: b.data("channelId")
                };
                if (c.assetId && c.channelId) {
                    VideoPlayer.setDetails("sidePanel", {
                        channelId: c.channelId,
                        programId: null,
                        eventId: null,
                        assetId: c.assetId,
                        isLive: true
                    });
                    SidePanel.hideMe(true);
                    if (View.actualPageIs(VideoPlayer)) {
                        VideoPlayer.changingChannel = true
                    }
                    View.changeView(VideoPlayer)
                } else {
                    PopMsg.show("error", 34, "SP01")
                }
                return false;
                break
        }
        return true
    }
};
var Slider = {
    actualSlide: 0,
    sliderNum: 0,
    slideTimer: null,
    element: null,
    circular: true,
    lastMovement: 0,
    setFocus: function(a) {
        if (View.actualPage == DataSheet) {
            Footer.disableCenter()
        } else {
            if (View.actualPage == Home) {
                var b = [];
                b.push({
                    text: "Ficha",
                    className: "one-button-footer",
                    keycode: TVA.tvKey.KEY_1,
                    method: function() {
                        Slider.moreInfo();
                        return false
                    }
                });
                Footer.setLeft(b)
            }
        }
        if (View.actualFocus === "big-slider") {
            return
        }
        Slider.element = $("#big-slider");
        Commons.offFocus(View.actualFocus);
        Commons.setFocus("big-slider");
        if (!a) {
            Commons.offHover(View.actualHover);
            Commons.setHover("big-slider")
        }
        if (!Slider.circular && Slider.actualSlide == 0) {
            $("#prev-big-slider").addClass("inactive")
        }
        $("#slider" + Slider.actualSlide).removeClass("hide-this");
        Footer.enableLeft()
    },
    reset: function() {
        $("#slider" + Slider.actualSlide).addClass("hide-this");
        Slider.actualSlide = 0;
        Slider.sliderNum = 0
    },
    hideMe: function(a) {
        if (a) {
            $("#big-slider").addClass("hide-this");
            Slider.stopInterval();
            Slider.reset()
        } else {
            $("#big-slider").removeClass("hide-this")
        }
    },
    checkForHoverClass: function() {
        if (!Slider.element.hasClass("hover")) {
            Commons.setHover("big-slider")
        }
    },
    next: function() {
        if (View.actualFocus === "side-panel-container" || View.actualPage === PopUp || PopUp.isVisible == true) {
            Slider.resetInterval();
            return
        }
        Slider.resetInterval();
        Slider.moving();
        Slider.sliderNum = $(".big-slider .info-slide").length;
        var a = (Slider.actualSlide + 1) % Slider.sliderNum;
        if (a <= Slider.sliderNum) {
            if (document.getElementById("slider" + Slider.actualSlide).className.indexOf("hide-this") == -1) {
                $("#slider" + Slider.actualSlide).addClass("hide-this")
            }
            Slider.actualSlide = a;
            $("#slider" + a).removeClass("hide-this");
            if (!Slider.circular) {
                $("#prev-big-slider").removeClass("inactive");
                if (a == Slider.sliderNum) {
                    $("#next-big-slider").addClass("inactive")
                }
            }
        } else {
            if (Slider.circular) {
                Slider.reset();
                $("#slider" + Slider.actualSlide).removeClass("hide-this")
            } else {
                $("#next-big-slider").addClass("inactive")
            }
        }
        if (View.actualPage == Home) {
            Home.loadPromoImg(Slider.actualSlide)
        }
    },
    previous: function() {
        Slider.resetInterval();
        Slider.moving();
        Slider.sliderNum = $(".big-slider .info-slide").length;
        var a = (Slider.actualSlide - 1 + Slider.sliderNum) % Slider.sliderNum;
        if (a >= 0) {
            if (document.getElementById("slider" + Slider.actualSlide).className.indexOf("hide-this") == -1) {
                $("#slider" + Slider.actualSlide).addClass("hide-this")
            }
            Slider.actualSlide = a;
            $("#slider" + a).removeClass("hide-this");
            if (!Slider.circular) {
                $("#next-big-slider").removeClass("inactive");
                if (a == 0) {
                    $("#prev-big-slider").addClass("inactive")
                }
            }
        } else {
            if (Slider.circular) {
                Slider.reset();
                $("#slider" + Slider.actualSlide).removeClass("hide-this")
            } else {
                $("#prev-big-slider").addClass("inactive")
            }
        }
        if (View.actualPage == Home) {
            Home.loadPromoImg(Slider.actualSlide)
        }
    },
    moving: function() {
        this.lastMovement = Utils.now()
    },
    startInterval: function() {
        Slider.moving();
        Slider.stopInterval();
        var a = TVA.OTT.SLIDER_TO;
        if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA) {
            a = a * 2
        }
        Slider.slideTimer = setInterval(Slider.next, a, true)
    },
    stopInterval: function() {
        clearInterval(Slider.slideTimer);
        Slider.slideTimer = null
    },
    resetInterval: function() {
        Slider.startInterval()
    },
    moreInfo: function() {
        var a = Home.promos[Slider.actualSlide];
        if (a && a.datalist) {
            DataList.setDetails(a.datalist, a.datalist["finfo"]);
            View.changeView(DataList);
            return
        }
        DataSheet.setDetails(null, $("#slider" + Slider.actualSlide).data("eventId"));
        View.changeView(DataSheet)
    },
    up: function(a) {
        if (View.actualPage == DataSheet) {
            if (Commons.textScroll(1) && !a) {
                Header.setFocus()
            }
        } else {
            Header.setFocus()
        }
    },
    down: function(a) {
        if (View.actualPage == DataSheet) {
            if (Commons.textScroll(-1) && !a) {
                ThumbSliderFilter.setFocus()
            }
        } else {
            ThumbSliderFilter.setFocus()
        }
    },
    keyHandler: function(a) {
        switch (a) {
            case TVA.tvKey.KEY_UP:
                Slider.up();
                break;
            case TVA.tvKey.KEY_DOWN:
                Slider.down();
                break;
            case TVA.tvKey.KEY_RIGHT:
                if (Slider.canHandleKey(a) == false) {
                    return
                }
                Slider.next();
                Slider.checkForHoverClass();
                break;
            case TVA.tvKey.KEY_LEFT:
                if (Slider.canHandleKey(a) == false) {
                    return
                }
                Slider.previous();
                Slider.checkForHoverClass();
                break;
            case TVA.tvKey.KEY_ENTER:
                Slider.moreInfo();
                break
        }
    },
    canHandleKey: function(a) {
        if (this.lastMovement == 0) {
            this.moving()
        }
        var b = 2000;
        if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA && Utils.now() < this.lastMovement + b) {
            View.loaderShow();
            var c = b + 100 - (Utils.now() - this.lastMovement);
            if (c < 0 || c > b) {
                c = b
            }
            setTimeout(function() {
                Slider.keyHandler(a);
                View.loaderHide()
            }, c);
            return false
        }
        return true
    }
};
var ThumbSlider = {
    actualThumb: 0,
    firstVisible: 0,
    thumbListContainer: "thumbnail-list",
    thumbContainer: "preview-list-thumbnail",
    thumbName: "thumb-horizontal",
    thumbListLength: 0,
    vertical: false,
    scrollConfig: {
        movement: "left",
        maxItemsVisible: 6
    },
    itemsLen: 0,
    promos: [],
    setFocus: function(a) {
        if (View.actualPage == DataSheet || View.actualPage == Home || View.actualPage == VideoPlayer) {
            var b = [];
            b.push({
                text: "Ficha",
                className: "one-button-footer",
                keycode: TVA.tvKey.KEY_1,
                method: function() {
                    ThumbSlider.moreInfo();
                    return false
                }
            });
            if (View.actualPage == VideoPlayer) {
                Footer.setLeft(b)
            } else {
                Footer.setCenter(b);
                Footer.enableCenter()
            }
        }
        if (View.actualPage == Home) {
            var c = [];
            Footer.setLeft(c);
            Footer.disableLeft()
        }
        Footer.enableLeft();
        if (View.actualFocus === ThumbSlider.thumbListContainer) {
            return
        }
        if (ThumbSlider.thumbListLength > 0) {
            Commons.offFocus(View.actualFocus);
            Commons.setFocus(ThumbSlider.thumbListContainer);
            if (!a) {
                Commons.offHover(View.actualHover);
                ThumbSlider.setHover(ThumbSlider.thumbName + ThumbSlider.actualThumb, false);
                if (View.actualPage !== VideoPlayer) {
                    Footer.disableLeft()
                }
            }
        }
    },
    init: function(a) {
        ThumbSlider.thumbListContainer = a.thumbListContainer;
        ThumbSlider.thumbContainer = a.thumbContainer;
        ThumbSlider.thumbName = a.thumbName;
        ThumbSlider.vertical = a.vertical || false;
        ThumbSlider.initScrollConfig(false);
        ThumbSlider.promos = []
    },
    initScrollConfig: function(b) {
        var a = {
            movement: "left",
            maxItemsVisible: 6
        };
        if (b) {
            a = {
                movement: "left",
                maxItemsVisible: 9
            }
        } else {
            if (ThumbSlider.vertical) {
                a = {
                    movement: "top",
                    maxItemsVisible: 4
                }
            }
        }
        a.scrollItemOffset = Math.round(a.maxItemsVisible / 2);
        ThumbSlider.scrollConfig = a
    },
    reset: function(b) {
        var a = $("#" + ThumbSlider.thumbContainer);
        if (b === true) {
            a.empty();
            ThumbSlider.thumbListLength = 0
        }
        a.css(ThumbSlider.scrollConfig.movement, 0);
        ThumbSlider.actualThumb = 0;
        ThumbSlider.firstVisible = 0;
        ThumbSlider.promos = []
    },
    hideMe: function(a) {
        if (a) {
            $("#" + ThumbSlider.thumbListContainer).addClass("hide-this")
        } else {
            $("#" + ThumbSlider.thumbListContainer).removeClass("hide-this")
        }
    },
    build: function(k) {
        if (!View.actualPageIs(Home) && !View.actualPageIs(DataSheet)) {
            return
        }
        ThumbSlider.reset(true);
        if (!k) {
            k = []
        }
        ThumbSlider.promos = k;
        var u = false;
        var g = "";
        for (var p in k) {
            if (k.hasOwnProperty(p)) {
                var s = k[p];
                var o = DataStore.get(Type.Event, s.event);
                var e = DataStore.get(Type.Program, s.program);
                var v = DataStore.get(Type.Channel, o.channel);
                var h = DataStore.get(Type.Asset, s.asset);
                if ((View.actualPage == Mytv) && (!o.channel)) {
                    v = DataStore.get(Type.Channel, s.channel)
                }
                var c = v.id ? v.id : s.channel ? s.channel : 0;
                var r = v.name ? v.name : DataStore.get(Type.Channel, s.channel)["name"];
                var j = "";
                if (e.season) {
                    j = "T" + e.season;
                    if (e.episodePartial) {
                        j += " Ep. " + e.episodePartial
                    }
                } else {
                    j = e.episodeTitle
                }
                var m = ' id="thumb-img-slider-' + p + '" ';
                var l = e.thumbnailUrl;
                var w = "<img class='thumb-img-slider' " + m + " src='resource/general/generic-thumbnail.jpg' data-img='" + API.image_base_url + e.thumbnailUrl + "'  onerror=\"this.onerror=null;this.src='./resource/general/generic-thumbnail.jpg'\"  alt=''>";
                if (!ThumbSlider.vertical && ((s.iotype === "SimilarProgram") || (s.iotype === "Related"))) {
                    w = "<img class='cover thumb-img-slider' " + m + " src='resource/general/generic-cover.jpg' data-img='" + API.image_base_url + e.coverUrl + "'  onerror=\"this.onerror=null;this.src='./resource/general/generic-cover.jpg'\"  alt=''>";
                    l = e.coverUrl;
                    if (l == null) {
                        w = "<img class='cover thumb-img-slider' " + m + " src='resource/general/generic-cover.jpg' alt=''>"
                    }
                    u = true
                } else {
                    if (l == null) {
                        w = "<img class='thumb-img-slider' " + m + " src='resource/general/generic-thumbnail.jpg' alt=''>"
                    }
                }
                var a = " class='thumb-cover' ";
                if (u == false) {
                    a = " class='thumb-slider' "
                }
                g += "<li id='" + ThumbSlider.thumbName + p + "' " + a + " data-programId='" + s.program + "' data-eventId='" + s.event + "' data-channelId='" + c + "' data-assetId='" + s.asset + "' onmouseover='ThumbSlider.setHover(this.id,false); ThumbSlider.actualThumb=" + p + ";' onmouseout='Commons.offHover(this.id);' onclick='ThumbSlider.moreInfo();'>";
                var t = '<div class="thumb-icon-list">';
                if (e.asset) {
                    t += '<img src="resource/1px.png" class="thumb-icon">'
                } else {
                    if (TVA.OTT.SHOW_THUMB_REC_ICON == true) {
                        t += '<img src="resource/1px.png" class="thumb-icon thumb-icon-rec">'
                    }
                }
                t += "</div>";
                g += w;
                g += t;
                g += "<div class='thumb-description'>";
                g += "<h3 class='channel'>" + r + "</h3>";
                if (u == false) {
                    g += "<h4 class='description'>" + e.title + "</h4>"
                }
                g += "<h5 class='description'>" + j + "</h5>";
                if (o) {
                    var q = "";
                    try {
                        var b = o.startTime;
                        if (b && (b != "undefined") && (typeof b == "object")) {
                            q = b.getDate() + " " + Utils.month[b.getMonth()].substr(0, 3) + ",  " + Utils.checkTimeStr(b.getHours()) + ":" + Utils.checkTimeStr(b.getMinutes()) + " h"
                        }
                    } catch (d) {
                        q = ""
                    }
                    if (q != "") {
                        g += "<h5 class='description'>" + q + "</h5>"
                    }
                }
                g += "</div>";
                g += "<div class='list-thumb-div-rect'></div>";
                if (u == true) {
                    g += "<div class='thumb-title'>" + e.title + "</div>";
                    var n = parseInt(e.season);
                    if (!isNaN(n) && n > 0) {
                        g += "<div class='cover-season' ><div>T" + e.season + "</div></div>"
                    }
                }
                g += "</li>";
                ThumbSlider.promos[p]["datalist"] = null;
                if (e.parent) {
                    var f = DataStore.get(Type.Program, e.parent);
                    if (f && f.isGroup === true) {
                        ThumbSlider.promos[p]["datalist"] = {
                            programId: (e ? e.id : ""),
                            eventId: (o ? o.id : ""),
                            channelId: (o.channel && o.channel["id"] ? o.channel["id"] : ""),
                            parentId: (e ? e.parent : ""),
                            assetId: (h ? h.id : ""),
                            program: f,
                            programNode: e,
                            finfo: {
                                programId: (e ? e.id : ""),
                                assetId: (h ? h.id : ""),
                                eventId: (o ? o.id : "")
                            }
                        }
                    }
                }
            }
        }
        ThumbSlider.initScrollConfig(u);
        ThumbSlider.itemsLen = k.length;
        if (k.length <= ThumbSlider.scrollConfig.maxItemsVisible) {
            ThumbSlider.sliderArrowsVisibility("hide")
        } else {
            ThumbSlider.sliderArrowsVisibility("show")
        }
        TVA.putInnerHTML(document.getElementById(ThumbSlider.thumbContainer), g);
        ThumbSlider.thumbListLength = ++p;
        ThumbSlider.hideMe(false);
        this.hideOrShowArrows(k.length);
        ThumbSlider.checkImages();
        TVA.invalidate()
    },
    hideOrShowArrows: function(b) {
        var c = "",
            a = "";
        if (ThumbSlider.scrollConfig.movement == "left") {
            c = "#arrow-left-" + ThumbSlider.thumbName;
            a = "#arrow-right-" + ThumbSlider.thumbName
        } else {
            c = "#arrow-up-" + ThumbSlider.thumbName;
            a = "#arrow-down-" + ThumbSlider.thumbName
        }
        var e = $(c).attr("pclass");
        var d = $(a).attr("pclass");
        if (b <= ThumbSlider.scrollConfig.maxItemsVisible) {
            $(c).hide();
            $(a).hide();
            if (e && e != "") {
                $("." + e).hide()
            }
            if (d && d != "") {
                $("." + d).hide()
            }
        } else {
            $(c).show();
            $(a).show();
            if (e && e != "") {
                $("." + e).show()
            }
            if (d && d != "") {
                $("." + d).show()
            }
        }
        ThumbSlider.setHover("", true)
    },
    scroll: function(a, b) {
        b = b || 1;
        Commons.scroll(a, {
            list: "#" + ThumbSlider.thumbContainer,
            listItem: "li",
            itemMove: "#" + ThumbSlider.thumbContainer,
            displayItems: ThumbSlider.scrollConfig.maxItemsVisible,
            movement: ThumbSlider.scrollConfig.movement,
            offset: 0
        }, b)
    },
    checkScrolling: function(b, d) {
        if (ThumbSlider.thumbListLength > ThumbSlider.scrollConfig.maxItemsVisible) {
            var a = ThumbSlider.firstVisible;
            var c = a + ThumbSlider.scrollConfig.maxItemsVisible;
            if (c > ThumbSlider.thumbListLength) {
                c = ThumbSlider.thumbListLength
            }
            if (d) {
                if (ThumbSlider.firstVisible > 0 && b < a + ThumbSlider.scrollConfig.scrollItemOffset - 1) {
                    ThumbSlider.scroll(-1);
                    ThumbSlider.firstVisible--
                }
            } else {
                if (c < ThumbSlider.thumbListLength && b > c - ThumbSlider.scrollConfig.scrollItemOffset) {
                    ThumbSlider.scroll(1);
                    ThumbSlider.firstVisible++
                }
            }
        }
        ThumbSlider.checkImages()
    },
    checkImages: function() {
        var b = ThumbSlider.firstVisible + ThumbSlider.scrollConfig.maxItemsVisible;
        for (var c = ThumbSlider.firstVisible; c < b; c++) {
            var d = $("#thumb-img-slider-" + c);
            if (d.length > 0) {
                var a = d.data("img");
                if (a && a != "") {
                    d.data("img", "").attr("src", a)
                }
            }
        }
    },
    next: function() {
        var a = ThumbSlider.actualThumb + 1;
        if (a < ThumbSlider.thumbListLength) {
            ThumbSlider.checkScrolling(a);
            ThumbSlider.actualThumb = a
        }
        ThumbSlider.setHover(ThumbSlider.thumbName + ThumbSlider.actualThumb, false)
    },
    previous: function() {
        var a = ThumbSlider.actualThumb - 1;
        if (a >= 0) {
            ThumbSlider.checkScrolling(a, true);
            ThumbSlider.actualThumb = a
        }
        ThumbSlider.setHover(ThumbSlider.thumbName + ThumbSlider.actualThumb, false)
    },
    moreInfo: function() {
        var a = ThumbSlider.promos[ThumbSlider.actualThumb];
        if (a && a.datalist) {
            DataList.setDetails(a.datalist, a.datalist["finfo"]);
            View.changeView(DataList);
            return
        }
        var b = $("#" + ThumbSlider.thumbName + ThumbSlider.actualThumb);
        DataSheet.setDetails(b.data("programId"), b.data("eventId"), b.data("channelId"));
        View.changeView(DataSheet)
    },
    sliderArrowsVisibility: function(b) {
        var a = "";
        if (View.actualPage === VideoPlayer) {
            a = "-video"
        }
        if (ThumbSlider.vertical == true) {
            if (b === "show") {
                $("#arrow-up-thumb-vertical" + a).removeClass("hide-this");
                $("#arrow-down-thumb-vertical" + a).removeClass("hide-this");
                if (a == "") {
                    $("#arrow-up-thumb-vertical-video").addClass("hide-this");
                    $("#arrow-down-thumb-vertical-video").addClass("hide-this")
                } else {
                    $("#arrow-up-thumb-vertical").addClass("hide-this");
                    $("#arrow-down-thumb-vertical").addClass("hide-this")
                }
            } else {
                $("#arrow-up-thumb-vertical" + a).addClass("hide-this");
                $("#arrow-down-thumb-vertical" + a).addClass("hide-this")
            }
        } else {
            if (b === "show") {
                $("#arrow-right-thumb-horizontal" + a).removeClass("hide-this");
                $("#arrow-left-thumb-horizontal" + a).removeClass("hide-this")
            } else {
                $("#arrow-right-thumb-horizontal" + a).addClass("hide-this");
                $("#arrow-left-thumb-horizontal" + a).addClass("hide-this")
            }
        }
    },
    keyHandler: function(a) {
        switch (a) {
            case TVA.tvKey.KEY_UP:
                if (View.actualPage === Mytv) {
                    ThumbSlider.previous()
                } else {
                    ThumbSliderFilter.setFocus()
                }
                break;
            case TVA.tvKey.KEY_DOWN:
                if (View.actualPage === Mytv) {
                    ThumbSlider.next()
                }
                break;
            case TVA.tvKey.KEY_RIGHT:
                if (View.actualPage !== Mytv) {
                    ThumbSlider.next()
                }
                break;
            case TVA.tvKey.KEY_LEFT:
                if (View.actualPage === Mytv) {
                    LeftPanel.setFocus()
                } else {
                    ThumbSlider.previous()
                }
                break;
            case TVA.tvKey.KEY_ENTER:
                ThumbSlider.moreInfo();
                break
        }
    },
    setHover: function(g, c) {
        if (c !== true) {
            Commons.setHover(g)
        }
        try {
            if (ThumbSlider.itemsLen > ThumbSlider.scrollConfig.maxItemsVisible) {
                if (ThumbSlider.scrollConfig.movement == "left") {
                    a1 = "#arrow-left-" + ThumbSlider.thumbName;
                    a2 = "#arrow-right-" + ThumbSlider.thumbName
                } else {
                    a1 = "#arrow-up-" + ThumbSlider.thumbName;
                    a2 = "#arrow-down-" + ThumbSlider.thumbName
                }
                var f = $(a1).attr("pclass");
                var d = $(a2).attr("pclass");
                var a = g.replace(ThumbSlider.thumbName, "");
                if (a == 0 && g != "") {
                    $(a1).hide();
                    if (f && f != "") {
                        $("." + f).hide()
                    }
                } else {
                    $(a1).show();
                    if (f && f != "") {
                        $("." + f).show()
                    }
                }
                if (a == ThumbSlider.itemsLen - 1 && g != "") {
                    $(a2).hide();
                    if (d && d != "") {
                        $("." + d).hide()
                    }
                } else {
                    $(a2).show();
                    if (d && d != "") {
                        $("." + d).show()
                    }
                }
            }
        } catch (b) {}
    }
};
var ThumbSliderFilter = {
    actualFilter: 0,
    activeFilter: 0,
    filterOptions: 0,
    mode: "",
    setFocus: function(a) {
        if (View.actualPage == DataSheet) {
            Footer.disableCenter()
        } else {
            if (View.actualPage == Home) {
                var b = [];
                Footer.setLeft(b);
                Footer.disableLeft();
                Footer.setCenter(b);
                Footer.disableCenter()
            }
        }
        if (View.actualFocus === "filter-thumbnail-list-container") {
            return
        }
        Commons.offFocus(View.actualFocus);
        Commons.setFocus("filter-thumbnail-list-container");
        if (!a) {
            var c = ThumbSliderFilter.getFirstVisibleFilter();
            if (c >= 0) {
                Commons.offHover(View.actualHover);
                Commons.setHover("filter-thumbs" + ThumbSliderFilter.actualFilter);
                $("#filter-thumbs" + ThumbSliderFilter.actualFilter).addClass("active");
                Footer.disableLeft()
            } else {
                ThumbSliderFilter.actualFilter = 0
            }
        }
    },
    getFirstVisibleFilter: function() {
        var c = false;
        var b = 0;
        while (b < 10) {
            var a = $("#filter-thumbs" + b);
            if (!a || !a.length) {
                break
            } else {
                if (a.hasClass("hide-this") == false) {
                    c = true;
                    break
                }
            }
            b++
        }
        if (c == true) {
            return b
        }
        return -1
    },
    reset: function() {
        ThumbSliderFilter.actualFilter = 0;
        ThumbSliderFilter.activeFilter = 0;
        $("#filter-thumbs" + ThumbSliderFilter.activeFilter).removeClass("active")
    },
    hideMe: function(a) {
        if (a) {
            $("#filter-thumbnail-list-container").addClass("hide-this")
        } else {
            $("#filter-thumbnail-list-container").removeClass("hide-this")
        }
    },
    externalOptions: null,
    waiting: 0,
    waitTimeout: null,
    setOptions: function(h) {
        ThumbSliderFilter.filterOptions = 0;
        ThumbSliderFilter.mode = h;
        var f = "";
        if (ThumbSliderFilter.mode === "datasheet-event-serie" || ThumbSliderFilter.mode === "datasheet-program-serie") {
            f = '<li id="filter-thumbs0" class="filter-thumbs active" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=0;" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">Cap&iacute;tulos</li><li id="filter-thumbs1" class="filter-thumbs filter-thumbs-seasons" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=1;" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">Temporadas</li>';
            ThumbSliderFilter.filterOptions = 2
        } else {
            if (ThumbSliderFilter.mode === "datasheet-event-deportes") {
                f = '<li id="filter-thumbs0" class="filter-thumbs active" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=0;" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">Eventos</li>';
                ThumbSliderFilter.filterOptions = 1
            } else {
                if (ThumbSliderFilter.mode === "datasheet-program" || ThumbSliderFilter.mode === "datasheet-event") {
                    f = '<li id="filter-thumbs0" class="filter-thumbs active" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=0;" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">Similares</li>';
                    ThumbSliderFilter.filterOptions = 1
                } else {
                    if (ThumbSliderFilter.mode === "datasheet-program-master") {
                        f = '<li id="filter-thumbs0" class="filter-thumbs active" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=0;" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">Cap&iacute;tulos</li><li id="filter-thumbs1" class="filter-thumbs" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=1;" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">Similares</li>';
                        ThumbSliderFilter.filterOptions = 2
                    }
                }
            }
        }
        var c = ThumbSliderFilter.externalOptions;
        if (ThumbSliderFilter.externalOptions === null) {
            ThumbSliderFilter.waiting++;
            clearTimeout(ThumbSliderFilter.waitTimeout);
            if (ThumbSliderFilter.waiting < 5) {
                ThumbSliderFilter.waitTimeout = setTimeout(function() {
                    ThumbSliderFilter.setOptions(h)
                }, 2000);
                return
            } else {
                c = ThumbSliderFilter.getDefaultJsonResponse()
            }
        }
        if (c !== null) {
            var b = ThumbSliderFilter.filterOptions;
            var a = "";
            var e = "";
            var g = false;
            for (var d = 0; d < c.length; d++) {
                a = c[d].description;
                if (typeof c[d].label === "string" && c[d].label.length > 0) {
                    a = '<span class="thumbs-span"><div>' + c[d].label + '</div></span><span class="thumbs-arrow">&nbsp;</span>' + a
                }
                g = false;
                e = "";
                switch (c[d].section) {
                    case "home":
                        if (ThumbSliderFilter.mode === "home-logged-in" || ThumbSliderFilter.mode === "home-not-logged-in") {
                            g = true
                        }
                        break;
                    case "datasheet":
                        if (ThumbSliderFilter.mode !== "home-logged-in" && ThumbSliderFilter.mode !== "home-not-logged-in") {
                            g = true
                        }
                        break;
                    default:
                        break
                }
                if (g == true) {
                    f += '<li id="filter-thumbs' + b + '" data-action="' + c[d].action + '" action="' + c[d].action + '" class="filter-thumbs' + e + (b == 0 ? " active" : "") + '" onmouseover="Commons.setHover(this.id); ThumbSliderFilter.actualFilter=' + b + ';" onmouseout="Commons.offHover(this.id);" onclick="ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER);">' + a + "</li>";
                    b++
                }
            }
        }
        if (f === "") {
            return
        }
        TVA.putInnerHTML(document.getElementById("filter-thumbs-list"), f);
        ThumbSliderFilter.filterOptions = $("#filter-thumbs-list").find("li").length;
        if (c !== null) {
            if (View.actualPageIs(Home)) {
                ThumbSliderFilter.loadTab()
            }
        }
    },
    getDefaultJsonResponse: function() {
        return [{
            section: "home",
            action: "watch-now",
            description: "Para ver ahora",
            label: ""
        }, {
            section: "home",
            action: "featured",
            description: "Destacados",
            label: ""
        }, {
            section: "home",
            action: "recommended",
            description: "Recomendados",
            label: ""
        }, {
            section: "home",
            action: "most-viewed",
            description: "M&aacute;s Vistos",
            label: ""
        }, {
            section: "home",
            action: "highest-rated",
            description: "Mejor Valorados",
            label: ""
        }, {
            section: "datasheet",
            action: "recommended",
            description: "Recomendados",
            label: ""
        }, {
            section: "datasheet",
            action: "most-viewed",
            description: "M&aacute;s Vistos",
            label: ""
        }, {
            section: "datasheet",
            action: "highest-rated",
            description: "Mejor Valorados",
            label: ""
        }]
    },
    jsonResponse: function(a) {
        if (typeof a !== "object" || a === null || a.length <= 0) {
            a = ThumbSliderFilter.getDefaultJsonResponse()
        }
        ThumbSliderFilter.externalOptions = a;
        clearTimeout(ThumbSliderFilter.waitTimeout);
        ThumbSliderFilter.setOptions(ThumbSliderFilter.mode)
    },
    hideSeasonsTab: function(a) {
        if (a) {
            $("#filter-thumbs-list").find(".filter-thumbs-seasons").addClass("hide-this")
        } else {
            $("#filter-thumbs-list").find(".filter-thumbs-seasons").removeClass("hide-this")
        }
    },
    loadTab: function() {
        var a = ThumbSliderFilter.getFirstVisibleFilter();
        if (a >= 0) {
            ThumbSliderFilter.actualFilter = a;
            $("#filter-thumbs" + ThumbSliderFilter.actualFilter).addClass("active");
            ThumbSliderFilter.keyHandler(TVA.tvKey.KEY_ENTER, false)
        }
    },
    keyHandler: function(m, p, f) {
        if (typeof p === "undefined") {
            p = true
        }
        if (typeof f === "undefined") {
            f = false
        }
        switch (m) {
            case TVA.tvKey.KEY_UP:
                if (f == false) {
                    Slider.setFocus()
                } else {
                    if (!VideoControls.isHidden) {
                        Header.setFocus()
                    }
                }
                break;
            case TVA.tvKey.KEY_DOWN:
                if (f == true) {
                    Commons.offFocus(View.actualFocus);
                    Commons.offHover(View.actualHover);
                    View.actualFocus = ""
                }
                ThumbSlider.setFocus();
                break;
            case TVA.tvKey.KEY_RIGHT:
                var d = ThumbSliderFilter.actualFilter + 1;
                while ($("#filter-thumbs" + d).is(":visible") == false && d < ThumbSliderFilter.filterOptions) {
                    d++
                }
                if (d < ThumbSliderFilter.filterOptions) {
                    Commons.offHover(View.actualHover);
                    ThumbSliderFilter.actualFilter = d;
                    Commons.setHover("filter-thumbs" + ThumbSliderFilter.actualFilter)
                }
                break;
            case TVA.tvKey.KEY_LEFT:
                var c = ThumbSliderFilter.actualFilter - 1;
                while ($("#filter-thumbs" + c).is(":visible") == false && c >= 0) {
                    c--
                }
                if (c >= 0) {
                    Commons.offHover(View.actualHover);
                    ThumbSliderFilter.actualFilter = c;
                    Commons.setHover("filter-thumbs" + ThumbSliderFilter.actualFilter)
                }
                break;
            case TVA.tvKey.KEY_ENTER:
                if (p == true) {
                    $("#filter-thumbs" + ThumbSliderFilter.activeFilter).removeClass("active")
                }
                ThumbSliderFilter.activeFilter = ThumbSliderFilter.actualFilter;
                var g = $("#filter-thumbs" + ThumbSliderFilter.actualFilter);
                if (p == true) {
                    g.addClass("active")
                }
                try {
                    var b = DataSheet.details.programId;
                    if (!b && DataSheet.details.eventId) {
                        var o = DataStore.get(Type.Event, DataSheet.details.eventId);
                        b = o.program;
                        if (b) {
                            DataSheet.details.programId = b
                        }
                    }
                } catch (n) {}
                var l = null;
                try {
                    l = g.data("action")
                } catch (k) {
                    l = null
                }
                if (typeof l === "string" && l.length > 0) {
                    l = [l, "", false];
                    j = API.getSliderContent.apply(null, l)
                } else {
                    var i = null,
                        h = null,
                        a = null;
                    var j = false;
                    switch (ThumbSliderFilter.mode) {
                        case "datasheet-event":
                            if (ThumbSliderFilter.actualFilter == 0) {
                                j = API.getSliderContent("similar-programs", DataSheet.details.programId, false)
                            } else {
                                if (ThumbSliderFilter.actualFilter == 1) {
                                    j = API.getSliderContent("recommended", "", false)
                                } else {
                                    if (ThumbSliderFilter.actualFilter == 2) {
                                        j = API.getSliderContent("most-viewed", "", false)
                                    } else {
                                        if (ThumbSliderFilter.actualFilter == 3) {
                                            j = API.getSliderContent("highest-rated", "", false)
                                        }
                                    }
                                }
                            }
                            break;
                        case "datasheet-program":
                            if (ThumbSliderFilter.actualFilter == 0) {
                                j = API.getSliderContent("similar-programs", DataSheet.details.programId, false)
                            } else {
                                if (ThumbSliderFilter.actualFilter == 1) {
                                    j = API.getSliderContent("recommended", "", false)
                                } else {
                                    if (ThumbSliderFilter.actualFilter == 2) {
                                        j = API.getSliderContent("most-viewed", "", false)
                                    } else {
                                        if (ThumbSliderFilter.actualFilter == 3) {
                                            j = API.getSliderContent("highest-rated", "", false)
                                        }
                                    }
                                }
                            }
                            break;
                        case "datasheet-event-serie":
                            if (ThumbSliderFilter.actualFilter == 0) {
                                a = DataStore.get(Type.Event, DataSheet.details.eventId);
                                h = DataStore.get(Type.Program, a.program);
                                i = (h.master ? h.master : (h.parent ? h.parent : DataSheet.details.programId));
                                j = API.getSliderContent("catch", i, true)
                            } else {
                                if (ThumbSliderFilter.actualFilter == 1) {
                                    a = DataStore.get(Type.Event, DataSheet.details.eventId);
                                    h = DataStore.get(Type.Program, a.program);
                                    i = (h.master ? h.master : (h.parent ? h.parent : DataSheet.details.programId));
                                    j = API.getSliderContent("seasons", i, true, a.channel ? a.channel : DataSheet.details.channelId)
                                } else {
                                    if (ThumbSliderFilter.actualFilter == 2) {
                                        j = API.getSliderContent("similar-programs", DataSheet.details.programId, false)
                                    } else {
                                        if (ThumbSliderFilter.actualFilter == 3) {
                                            j = API.getSliderContent("recommended", "", false)
                                        } else {
                                            if (ThumbSliderFilter.actualFilter == 4) {
                                                j = API.getSliderContent("most-viewed", "", false)
                                            } else {
                                                if (ThumbSliderFilter.actualFilter == 5) {
                                                    j = API.getSliderContent("highest-rated", "", false)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        case "datasheet-program-serie":
                            if (ThumbSliderFilter.actualFilter == 0) {
                                h = DataStore.get(Type.Program, DataSheet.details.programId);
                                i = (h.master ? h.master : (h.parent ? h.parent : DataSheet.details.programId));
                                j = API.getSliderContent("catch", i, true)
                            } else {
                                if (ThumbSliderFilter.actualFilter == 1) {
                                    h = DataStore.get(Type.Program, DataSheet.details.programId);
                                    i = (h.master ? h.master : (h.parent ? h.parent : DataSheet.details.programId));
                                    j = API.getSliderContent("seasons", i, true, DataSheet.details.channelId)
                                } else {
                                    if (ThumbSliderFilter.actualFilter == 2) {
                                        j = API.getSliderContent("similar-programs", DataSheet.details.programId, false)
                                    } else {
                                        if (ThumbSliderFilter.actualFilter == 3) {
                                            j = API.getSliderContent("recommended", "", false)
                                        } else {
                                            if (ThumbSliderFilter.actualFilter == 4) {
                                                j = API.getSliderContent("most-viewed", "", false)
                                            } else {
                                                if (ThumbSliderFilter.actualFilter == 5) {
                                                    j = API.getSliderContent("highest-rated", "", false)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        case "datasheet-program-master":
                            if (ThumbSliderFilter.actualFilter == 0) {
                                j = API.getSliderContent("catch", DataSheet.details.programId, true)
                            } else {
                                if (ThumbSliderFilter.actualFilter == 1) {
                                    j = API.getSliderContent("similar-programs", DataSheet.details.programId, false)
                                }
                            }
                            break
                    }
                }
                Commons.scrollIni({
                    list: "#preview-list-thumbnail",
                    movement: "left",
                    offset: 0
                });
                ThumbSlider.actualThumb = 0;
                ThumbSlider.visibleThumb = 0;
                if (j == true && p === true) {
                    Commons.setHover("thumb-horizontal" + ThumbSlider.actualThumb);
                    ThumbSlider.setFocus()
                }
                break
        }
    }
};
var LeftPanel = {
    mytv: false,
    actualItem: 0,
    itemListLength: 0,
    visibleItem: 0,
    listBoxDisplay: 0,
    scrollLimit: 0,
    setFocus: function() {
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Commons.setFocus("left-panel");
        $("#selector-multi-panel").removeClass("hide-this");
        if (LeftPanel.mytv) {
            Footer.enableLeft()
        }
        var a = $("#left-panel-list");
        if (a.find(".displayed").length > 0) {
            LeftPanel.setHover(LeftPanel.actualItem, true)
        } else {
            Header.setFocus()
        }
        LeftPanel.refreshTotalItemCount();
        LeftPanel.checkScrollIcons();
        a.parent().css("height", LeftPanel.listBoxDisplay * parseInt(a.find("li").height()));
        $("#left-panel-scroll-down").css("top", a.parent().css("height"));
        LeftPanel.hideMe(false);
        LeftPanel.unloadFooter()
    },
    unloadFooter: function() {
        var a = [];
        Footer.setCenter(a);
        Footer.disableCenter()
    },
    init: function(a) {
        LeftPanel.reset();
        LeftPanel.listBoxDisplay = a.displayItems;
        LeftPanel.scrollLimit = a.scrollLimit;
        LeftPanel.mytv = a.mytv;
        LeftPanel.datalist = a.datalist ? a.datalist : false;
        if (a.title) {
            $("#left-panel-title").removeClass("hide-this")
        } else {
            $("#left-panel-title").addClass("hide-this")
        }
        if (a.actualPos) {
            $("#left-panel-actual-pos").removeClass("hide-this")
        } else {
            $("#left-panel-actual-pos").addClass("hide-this")
        }
        $("#left-panel-describe").removeClass().addClass(a.classC)
    },
    reset: function() {
        TVA.putInnerHTML(document.getElementById("left-panel-list"), "");
        TVA.putInnerHTML(document.getElementById("total-left-panel"), "");
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), "");
        $("#left-panel-list").css("top", 0);
        LeftPanel.actualItem = 0;
        LeftPanel.itemListLength = 0;
        LeftPanel.visibleItem = 0;
        LeftPanel.mytv = false;
        Mytv.currentInfoLoaded = null;
        DataList.currentInfoLoaded = null;
        try {
            window.clearTimeout(Mytv.infoTimeout);
            Mytv.infoTimeout = null
        } catch (a) {}
        try {
            window.clearTimeout(DataList.infoTimeout);
            DataList.infoTimeout = null
        } catch (a) {}
    },
    hideMe: function(a) {
        if (a) {
            $("#left-panel-scroll-down").addClass("hide-this");
            $("#left-panel-scroll-up").addClass("hide-this");
            $("#left-panel").addClass("hide-this");
            Commons.offFocus(View.actualFocus);
            Commons.offHover(View.actualHover)
        } else {
            $("#left-panel").removeClass("hide-this")
        }
    },
    scroll: function(a) {
        Commons.scroll(a, {
            list: "#left-panel-list",
            listItem: "li.displayed",
            itemMove: "#left-panel-list",
            displayItems: LeftPanel.listBoxDisplay,
            movement: "top",
            offset: 0
        }, 1)
    },
    checkScrollIcons: function() {
        var b = (LeftPanel.actualItem < $("#left-panel-list").find("li.displayed").length - 1);
        var a = (LeftPanel.actualItem != 0);
        if (b) {
            $("#left-panel-scroll-down").removeClass("hide-this")
        } else {
            $("#left-panel-scroll-down").addClass("hide-this")
        }
        if (a) {
            $("#left-panel-scroll-up").removeClass("hide-this")
        } else {
            $("#left-panel-scroll-up").addClass("hide-this")
        }
    },
    next: function() {
        var c = LeftPanel.actualItem + 1;
        if (c < LeftPanel.itemListLength) {
            LeftPanel.visibleItem = LeftPanel.visibleItem + 1;
            if ((LeftPanel.visibleItem > LeftPanel.scrollLimit) && (LeftPanel.actualItem < (LeftPanel.itemListLength - (LeftPanel.listBoxDisplay - LeftPanel.scrollLimit)))) {
                LeftPanel.visibleItem = LeftPanel.scrollLimit;
                LeftPanel.scroll(1)
            }
            LeftPanel.actualItem = c;
            var b = $("#left-panel-list");
            var e = b.find("li.displayed").eq(LeftPanel.actualItem);
            var d = 0;
            var a = b.parent();
            while (b.position().top + e.position().top >= a.height() && d++ < LeftPanel.scrollLimit) {
                LeftPanel.scroll(1)
            }
            LeftPanel.checkScrollIcons();
            LeftPanel.setHover(LeftPanel.actualItem)
        }
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), LeftPanel.actualItem + 1)
    },
    previous: function(e) {
        var b = LeftPanel.actualItem - 1;
        if (b >= 0) {
            LeftPanel.visibleItem = LeftPanel.visibleItem - 1;
            if ((LeftPanel.visibleItem < LeftPanel.scrollLimit) && (LeftPanel.actualItem > LeftPanel.scrollLimit)) {
                LeftPanel.visibleItem = LeftPanel.scrollLimit;
                LeftPanel.scroll(-1)
            }
            LeftPanel.actualItem = b;
            var a = $("#left-panel-list");
            var d = a.find("li.displayed").eq(LeftPanel.actualItem);
            var c = 0;
            while (a.position().top + d.position().top < 0 && c++ < LeftPanel.scrollLimit) {
                LeftPanel.scroll(-1)
            }
            LeftPanel.setHover(LeftPanel.actualItem)
        } else {
            if (!e) {
                LeftPanel.visibleItem = 0;
                LeftPanel.actualItem = 0;
                Header.setFocus()
            }
        }
        LeftPanel.checkScrollIcons();
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), LeftPanel.actualItem + 1)
    },
    setHover: function(g, k) {
        var f = $("#left-panel-list").find("li.displayed").eq(g);
        if (f) {
            if (f.attr("id")) {
                Commons.setHover(f.attr("id"))
            }
            if (LeftPanel.mytv || LeftPanel.datalist) {
                var h = f.data("programId");
                var a = f.data("masterId");
                var d = LeftPanel.mytv ? Mytv : DataList;
                if (h && h != d.currentInfoLoaded) {
                    window.clearTimeout(d.infoTimeout);
                    d.infoTimeout = null;
                    var b = 500;
                    if (k) {
                        b = 10
                    }
                    d.moveFocus(0, 1);
                    d.infoTimeout = window.setTimeout(function() {
                        d.loadInfo(h, a);
                        d.infoTimeout = null
                    }, b)
                } else {
                    if (h && h == d.currentInfoLoaded) {
                        if (d == DataList) {
                            d.moveFocus(0, -1, true)
                        }
                    }
                }
                LeftPanel.disableDelete(f)
            } else {
                var c = f.data("itemId");
                if (c && View.actualPage && View.actualPage.loadInfo) {
                    try {
                        View.actualPage.loadInfo(c)
                    } catch (j) {}
                }
            }
            return true
        } else {
            return false
        }
    },
    applyFilter: function() {
        if (!LeftPanel.mytv) {
            $("#left-panel-list").find("li").removeClass("left-panel-selected");
            var c = $($("#left-panel-list").find("li.displayed")[LeftPanel.actualItem]);
            var b = c.data("filterKey");
            var a = c.data("filterArg");
            TVA.putInnerHTML(document.getElementById("scroll-grid-container"), "");
            API.getStorefrontChannels(Storefront.mode, b, a);
            c.addClass("left-panel-selected")
        }
    },
    refreshTotalItemCount: function() {
        LeftPanel.itemListLength = $("#left-panel-list").find("li:not(.hide-this)").length;
        if (LeftPanel.itemListLength > 0) {
            TVA.putInnerHTML(document.getElementById("total-left-panel"), " de " + LeftPanel.itemListLength)
        } else {
            TVA.putInnerHTML(document.getElementById("total-left-panel"), "")
        }
    },
    checkMaster: function(a) {
        if (LeftPanel.mytv) {
            if ($(a).hasClass("master")) {
                return true
            }
        }
        return false
    },
    disableDelete: function(a) {
        if (LeftPanel.mytv) {
            var b = $("#left-controls");
            if (LeftPanel.checkMaster(a) || (Mytv.type == "you-missed-it")) {
                b.find(".two-button-footer").addClass("disabled")
            } else {
                b.find(".two-button-footer").removeClass("disabled")
            }
        }
    },
    hoverTo: function(b, e) {
        var d = b;
        if (View.actualPage === Mytv || View.actualPage === DataList) {
            var a = "left-panel-option" + b;
            if (e >= 0) {
                a = "child-panel-option" + b + "-" + e
            }
            $("#left-panel-list").find("li.displayed").each(function(f) {
                if ($(this).attr("id") == a) {
                    d = f;
                    return false
                }
                return true
            })
        }
        var c = (LeftPanel.visibleItem - LeftPanel.actualItem);
        LeftPanel.actualItem = d;
        LeftPanel.visibleItem = LeftPanel.actualItem + c;
        LeftPanel.setHover(LeftPanel.actualItem);
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), LeftPanel.actualItem + 1);
        LeftPanel.checkScrollIcons()
    },
    click: function(a) {
        LeftPanel.keyHandler(a ? a : TVA.tvKey.KEY_ENTER)
    },
    keyHandler: function(j) {
        switch (j) {
            case TVA.tvKey.KEY_UP:
                LeftPanel.previous();
                break;
            case TVA.tvKey.KEY_LEFT:
                if (!LeftPanel.mytv && !LeftPanel.datalist) {
                    break
                }
            case TVA.tvKey.KEY_RIGHT:
                if (LeftPanel.mytv || LeftPanel.datalist) {
                    var b = LeftPanel.mytv ? Mytv : DataList;
                    b.moveFocus(j == TVA.tvKey.KEY_LEFT ? -1 : 1)
                } else {
                    GridPanel.setFocus()
                }
                break;
            case TVA.tvKey.KEY_DOWN:
                LeftPanel.next();
                break;
            case TVA.tvKey.KEY_PLAY:
            case TVA.tvKey.KEY_ENTER:
                var b = LeftPanel.mytv ? Mytv : DataList;
                if (b && b.infoTimeout != null) {
                    return
                }
                if (LeftPanel.mytv && Mytv.buttonsPosition == 0) {
                    if (Mytv.playAsset() == true) {
                        break
                    }
                } else {
                    if (LeftPanel.datalist && DataList.buttonsPosition == 0) {
                        if ($(".mytv-button-1").hasClass("mytv-button-play") && DataList.playAsset() == true) {
                            break
                        } else {
                            if ($(".mytv-button-1").hasClass("mytv-button-rec") && DataList.recAsset() == true) {
                                break
                            }
                        }
                    } else {
                        if (LeftPanel.datalist && DataList.buttonsPosition == -1) {
                            if (DataList.loadNode() == true) {
                                break
                            }
                        } else {
                            if (LeftPanel.mytv && Mytv.buttonsPosition == -1) {
                                if (Mytv.loadNode() == true) {
                                    break
                                }
                            }
                        }
                    }
                }
            case TVA.tvKey.KEY_1:
                if (LeftPanel.mytv || LeftPanel.datalist) {
                    var c = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
                    var k = $("#middle-preview-panel").find(".votar-btn");
                    if (k && k.length && k.html().indexOf("-on") > 0) {
                        var b = LeftPanel.mytv ? Mytv : DataList;
                        b.clickButton(3);
                        return true
                    }
                    if (c.hasClass("master")) {
                        if (j == TVA.tvKey.KEY_1) {
                            return false
                        }
                        var e = $("." + c.attr("id"));
                        if (e.hasClass("hide-this")) {
                            e.addClass("displayed").removeClass("hide-this");
                            c.find(".folder-arrow").addClass("expanded")
                        } else {
                            e.removeClass("displayed").addClass("hide-this");
                            c.find(".folder-arrow").removeClass("expanded")
                        }
                        LeftPanel.refreshTotalItemCount();
                        LeftPanel.checkScrollIcons()
                    } else {
                        var m = $("#middle-preview-panel").find(".bg-mask-disabled");
                        m = (m && m.length);
                        if (m) {
                            break
                        }
                        var d = $("#middle-preview-panel").find(".mytv-button");
                        if (d && !d.length) {
                            break
                        }
                        var i = c.data("programId");
                        var a = c.data("eventId");
                        var g = c.data("channelId");
                        if (LeftPanel.datalist) {} else {
                            var h = DataStore.get(Type.Program, i);
                            var l = h && h.parent ? DataStore.get(Type.Program, h.parent) : null;
                            if (l && l != null && l.isGroup == true) {
                                var f = {
                                    eventId: a,
                                    programId: i,
                                    channelId: g,
                                    assetId: c.data("assetId")
                                };
                                f.parentId = h.parent;
                                f.program = h;
                                DataList.setDetails(f, {
                                    programId: i,
                                    assetId: c.data("assetId"),
                                    eventId: a
                                });
                                View.changeView(DataList);
                                return true
                            }
                        }
                        if (i) {
                            var f = {
                                eventId: a,
                                programId: i,
                                channelId: g
                            };
                            var b = LeftPanel.mytv ? Mytv : DataList;
                            b.focusInfo = f;
                            DataSheet.setDetails(i, a, g, c.data("assetId"));
                            View.changeView(DataSheet)
                        }
                    }
                } else {
                    LeftPanel.applyFilter()
                }
                return true;
                break
        }
        return false
    }
};
var GridPanel = {
    row: 0,
    item: [0, 0],
    visibleRow: 0,
    visibleItem: [0, 0],
    focusedRow: [0, 1],
    footerLoaded: false,
    setFocus: function() {
        GridPanel.footerLoaded = false;
        if (View.actualFocus === "grid-panel-right") {
            return
        }
        if ($("#grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]).length) {
            Commons.offFocus(View.actualFocus);
            Commons.offHover(View.actualHover);
            $(".grid-row").removeClass("active");
            Commons.setFocus("grid-panel-right");
            $("#grid-row" + GridPanel.row).addClass("active");
            Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            GridPanel.loadFooter();
            GridPanel.checkImages()
        } else {
            Header.setFocus()
        }
    },
    reset: function() {
        GridPanel.row = 0;
        GridPanel.visibleRow = 0;
        GridPanel.item = [0, 0];
        GridPanel.visibleItem = [0, 0];
        GridPanel.focusedRow = [0, 1];
        GridPanel.footerLoaded = false;
        $("#grid-row" + GridPanel.row + " ul").css("left", 0);
        $("#scroll-grid-container").css("top", 0)
    },
    hideMe: function(a) {
        if (a) {
            $("#grid-panel-right").addClass("hide-this");
            Commons.offFocus(View.actualFocus);
            Commons.offHover(View.actualHover)
        } else {
            $("#grid-panel-right").removeClass("hide-this")
        }
    },
    scrollTop: function(a) {
        Commons.scrollBySize(a, {
            list: "#scroll-grid-container",
            listItem: ".grid-row",
            itemMove: "#scroll-grid-container",
            displayItems: 2,
            movement: "top",
            offset: 0
        }, 1, 298)
    },
    scrollLeft: function(a) {
        Commons.scroll(a, {
            list: "#grid-row-series" + GridPanel.row,
            listItem: "li",
            itemMove: "#grid-row-series" + GridPanel.row,
            displayItems: 6,
            movement: "left",
            offset: 0
        }, 1)
    },
    up: function(c) {
        if (typeof c == "undefined") {
            c = false
        }
        var a = GridPanel.row - 1;
        GridPanel.visibleRow = GridPanel.visibleRow - 1;
        if (GridPanel.visibleRow <= 0) {
            GridPanel.visibleRow = 0;
            GridPanel.scrollTop(-1)
        }
        if (a >= 0) {
            Commons.offHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            $("#grid-row" + GridPanel.row + " ul").css("left", 0);
            $("#grid-row" + GridPanel.row).removeClass("active");
            GridPanel.row = a;
            $("#grid-row" + a).addClass("active");
            GridPanel.item[GridPanel.row] = 0;
            GridPanel.visibleItem[GridPanel.row] = 0;
            Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row])
        } else {
            Commons.offHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            $("#grid-row" + GridPanel.row).removeClass("active");
            GridPanel.row = 0;
            GridPanel.item[GridPanel.row] = 0;
            GridPanel.visibleItem[GridPanel.row] = 0;
            $("#grid-row" + GridPanel.row + " ul").css("left", 0);
            Header.setFocus()
        }
        TVA.putInnerHTML(document.getElementById("channel_current_item" + GridPanel.row), GridPanel.item[GridPanel.row] + 1);
        var d = $("#" + View.actualHover);
        if (View.actualHover.indexOf("grid-item-") == 0 && d.length) {
            var b = $("#grid-panel-right");
            if (b.length && d.offset().top < 0) {
                GridPanel.scrollTop(-1)
            }
            if (c == true) {
                GridPanel.checkImages()
            }
        }
    },
    down: function(d) {
        if (typeof d == "undefined") {
            d = false
        }
        var b = GridPanel.row + 1;
        var a = $(".grid-row").length - 1;
        GridPanel.visibleRow = GridPanel.visibleRow + 1;
        if (GridPanel.visibleRow >= 2) {
            GridPanel.visibleRow = 2;
            GridPanel.scrollTop(1)
        }
        if (b <= a) {
            Commons.offHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            $("#grid-row" + GridPanel.row + " ul").css("left", 0);
            $("#grid-row" + GridPanel.row).removeClass("active");
            GridPanel.row = b;
            $("#grid-row" + b).addClass("active");
            GridPanel.item[GridPanel.row] = 0;
            GridPanel.visibleItem[GridPanel.row] = 0;
            Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            TVA.putInnerHTML(document.getElementById("channel_current_item" + GridPanel.row), GridPanel.item[GridPanel.row] + 1)
        }
        var e = $("#" + View.actualHover);
        if (View.actualHover.indexOf("grid-item-") == 0 && e.length) {
            var c = $("#grid-panel-right");
            if (c.length && e.offset().top > c.height()) {
                GridPanel.scrollTop(1)
            }
            if (d == true) {
                GridPanel.checkImages()
            }
        }
    },
    checkImages: function(l) {
        if (typeof l === "undefined") {
            l = true
        }
        if (l === true) {
            var c = GridPanel.row;
            var b = c + 1;
            var n = $("#grid-panel-right");
            var p = $("#grid-row" + GridPanel.row);
            if (p.offset().top - n.offset().top >= p.height()) {
                b = GridPanel.row;
                c = b - 1;
                if (c < 0) {
                    c = 0;
                    b = 1
                }
            }
            GridPanel.focusedRow = [c, b]
        } else {
            c = GridPanel.focusedRow[0];
            b = GridPanel.focusedRow[1]
        }
        var m;
        for (m = c - 1; m <= b + 1; m++) {
            if (m < 0 || !Storefront.args.param1.hasOwnProperty(m) || !Storefront.args) {
                continue
            }
            if (Storefront.args.param1[m]["id"] !== "") {
                API.getStorefrontContent(Storefront.mode, Storefront.args.htmlIndex, Storefront.args.param1[m]["id"], m, Storefront.args.arg, function() {
                    GridPanel.checkImages(true);
                    if (View.actualFocus === "grid-panel-right") {
                        var e = View.actualFocus;
                        View.actualFocus = "";
                        GridPanel.setFocus();
                        View.actualFocus = e
                    }
                });
                Storefront.args.param1[m]["id"] = ""
            }
        }
        var h = $(".grid-row");
        var a = [0, 0];
        var k = 0;
        for (m = c; m <= b; m++) {
            var q = $("#grid-row-series" + m);
            var f = q.find(".storefront-img-slider");
            var g = 0;
            try {
                g = $(f.get(0)).parent().parent().position().left
            } catch (o) {
                g = 0
            }
            var d = q.parent().width();
            f.each(function(j, t) {
                var s = ($(this).parent().position().left + g);
                if (s >= 0 && s < d) {
                    var r = $(t).data("coverurl");
                    if (typeof r == "string" && r != "" && r != "undefined") {
                        $(t).data("coverurl", "").load(function(u) {
                            if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA) {
                                try {
                                    var v = $(u);
                                    if (!v.hasClass("invalidate")) {
                                        v.addClass("invalidate")
                                    }
                                } catch (i) {}
                            }
                        }).attr("src", r)
                    }
                }
            });
            if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA) {
                try {
                    a[k] = $(h[m]);
                    if (!a[k].hasClass("invalidate")) {
                        a[k].addClass("invalidate")
                    }
                } catch (o) {}
            }
            k++
        }
        if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA) {
            setTimeout(function() {
                for (var j = 0; j <= 1; j++) {
                    try {
                        if (a[j].hasClass("invalidate")) {
                            a[j].removeClass("invalidate")
                        }
                    } catch (r) {}
                }
            }, 800)
        }
    },
    left: function(b) {
        GridPanel.getVisibleItem();
        var a = GridPanel.item[GridPanel.row] - 1;
        GridPanel.visibleItem[GridPanel.row] = GridPanel.visibleItem[GridPanel.row] - 1;
        if ((GridPanel.visibleItem[GridPanel.row] < 2) && (a >= 2)) {
            GridPanel.visibleItem[GridPanel.row] = 2;
            GridPanel.scrollLeft(-1)
        }
        if (a >= 0) {
            GridPanel.item[GridPanel.row] = a;
            Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row])
        } else {
            Commons.offHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            if (!b) {
                $("#grid-row" + GridPanel.row).removeClass("active")
            }
            Commons.scrollIni({
                list: "#grid-row" + GridPanel.row + " ul",
                movement: "left",
                offset: 0
            });
            GridPanel.item[GridPanel.row] = 0;
            GridPanel.visibleItem[GridPanel.row] = 0;
            if (!b) {
                LeftPanel.setFocus()
            } else {
                GridPanel.hoverTo(GridPanel.row, 0)
            }
        }
        TVA.putInnerHTML(document.getElementById("channel_current_item" + GridPanel.row), GridPanel.item[GridPanel.row] + 1);
        if (GridPanel.visibleItem[GridPanel.row] < 0 || GridPanel.item[GridPanel.row] < 0) {
            GridPanel.visibleItem[GridPanel.row] = 0;
            GridPanel.item[GridPanel.row] = 0
        }
        GridPanel.checkImages(false)
    },
    right: function(c) {
        var b = GridPanel.getVisibleItem();
        var a = GridPanel.item[GridPanel.row] + 1;
        var d = $("#grid-row" + GridPanel.row + " li").length - 1;
        if (a > d) {
            if (c) {
                Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row])
            }
            return
        }
        GridPanel.visibleItem[GridPanel.row] = GridPanel.visibleItem[GridPanel.row] + 1;
        if ((GridPanel.visibleItem[GridPanel.row] > 3) && (GridPanel.item[GridPanel.row] <= (d - 3))) {
            GridPanel.visibleItem[GridPanel.row] = 3;
            GridPanel.scrollLeft(1)
        } else {
            if (GridPanel.visibleItem[GridPanel.row] >= 5 && GridPanel.item[GridPanel.row] < b) {
                GridPanel.scrollLeft(1)
            }
        }
        if (a <= d) {
            GridPanel.item[GridPanel.row] = a
        } else {
            Commons.scrollIni({
                list: "#grid-row" + GridPanel.row + " ul",
                movement: "left",
                offset: 0
            });
            GridPanel.item[GridPanel.row] = 0;
            GridPanel.visibleItem[GridPanel.row] = 0
        }
        Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
        TVA.putInnerHTML(document.getElementById("channel_current_item" + GridPanel.row), GridPanel.item[GridPanel.row] + 1);
        GridPanel.checkImages(false)
    },
    getPlayableAssetId: function(a) {
        if (typeof a === "undefined") {
            a = $("#grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row])
        }
        try {
            if (a.data("assetMatchesProgram") == "1") {
                var c = a.data("assetId");
                if (!c || c == "undefined") {
                    c = Utils.findAsset(a.data("programId"), a.data("eventId"))
                }
                return c
            }
        } catch (b) {}
        return false
    },
    moreInfo: function(d) {
        try {
            View.actualPage.moreInfo()
        } catch (i) {}
        var f = $("#grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
        var g = {
            programId: f.data("programId"),
            eventId: f.data("eventId"),
            channelId: f.data("channelId")
        };
        if (d === TVA.tvKey.KEY_ENTER) {
            var h = GridPanel.getPlayableAssetId(f);
            if (h !== false) {
                var c = {
                    programId: f.data("programId"),
                    eventId: f.data("eventId"),
                    assetId: h
                };
                c.isLive = false;
                VideoPlayer.setDetails("datasheet", c);
                View.changeView(VideoPlayer);
                return
            }
            var b = (TVA.OTT.CONFIGDATA.recordingDisabled === true);
            var a = DataStore.get(Type.Program, f.data("programId"));
            if (a && a.isGroup === true) {
                g.parentId = f.data("programId");
                g.program = a;
                DataList.setDetails(g, {
                    programId: f.data("programId"),
                    assetId: f.data("assetId"),
                    eventId: f.data("eventId")
                });
                View.changeView(DataList);
                return
            } else {
                if (b == false) {
                    GridPanel.recordCurrent();
                    return
                }
            }
        }
        var a = DataStore.get(Type.Program, f.data("programId"));
        if (a && a.isGroup === true) {
            g.parentId = f.data("programId");
            g.program = a;
            DataList.setDetails(g, {
                programId: f.data("programId"),
                assetId: f.data("assetId"),
                eventId: f.data("eventId")
            });
            View.changeView(DataList);
            return
        }
        DataSheet.setDetails(g.programId, g.eventId, g.channelId, GridPanel.getPlayableAssetId(f));
        View.changeView(DataSheet)
    },
    recordCurrent: function() {
        var a = (TVA.OTT.CONFIGDATA.recordingDisabled === true);
        if (a == false) {
            GridPanel.recordingChapter(false)
        }
    },
    recordingChapter: function(a) {
        var c = $("#grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
        var b = {
            programId: c.data("programId"),
            eventId: c.data("eventId"),
            assetId: c.data("assetId"),
            channelId: c.data("channelId")
        };
        if (b.eventId) {
            API.addMyTVItem("recording", b.eventId, "", a)
        } else {
            API.addMyTVItem("program-recording", b.programId, b.channelId)
        }
    },
    checkFooter: function() {
        this.loadFooter();
        var b = (TVA.OTT.CONFIGDATA.recordingDisabled === true);
        var d = View.actualFocus === "header" ? false : GridPanel.getPlayableAssetId();
        if (d) {
            $(".centerFooterButton-" + TVA.tvKey.KEY_ENTER).removeClass("disabled");
            $(".centerFooterButton-" + TVA.tvKey.KEY_RED).addClass("disabled")
        } else {
            $(".centerFooterButton-" + TVA.tvKey.KEY_ENTER).addClass("disabled");
            var c = $("#grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
            var a = DataStore.get(Type.Program, c.data("programId"));
            if (b || (a && a.isGroup === true)) {
                $(".centerFooterButton-" + TVA.tvKey.KEY_RED).addClass("disabled")
            } else {
                $(".centerFooterButton-" + TVA.tvKey.KEY_RED).removeClass("disabled")
            }
        }
    },
    loadFooter: function() {
        if (GridPanel.footerLoaded) {
            return
        }
        var a = [];
        a.push({
            text: "Ver",
            className: "enter-button-footer",
            disabled: true,
            keycode: TVA.tvKey.KEY_ENTER,
            method: function() {
                if (View.actualFocus === "header") {
                    return true
                }
                GridPanel.moreInfo(TVA.tvKey.KEY_ENTER);
                return false
            }
        });
        a.push({
            text: "Ficha",
            className: "one-button-footer",
            keycode: TVA.tvKey.KEY_1,
            method: function() {
                GridPanel.moreInfo();
                return false
            }
        });
        if (API.isRecordingDisabled() == false) {
            a.push({
                text: "Grabar",
                className: "red-button-footer",
                disabled: true,
                keycode: TVA.tvKey.KEY_RED,
                method: function() {
                    GridPanel.recordCurrent();
                    return false
                }
            })
        }
        Footer.setCenter(a);
        Footer.enableCenter();
        GridPanel.footerLoaded = true;
        GridPanel.checkFooter()
    },
    unloadFooter: function() {
        var a = [];
        Footer.setCenter(a);
        Footer.disableCenter()
    },
    hoverTo: function(b, a) {
        GridPanel.row = b;
        GridPanel.item[GridPanel.row] = a;
        Commons.setHover("grid-item-" + GridPanel.row + "-" + GridPanel.item[GridPanel.row]);
        TVA.putInnerHTML(document.getElementById("channel_current_item" + GridPanel.row), GridPanel.item[GridPanel.row] + 1);
        GridPanel.checkFooter()
    },
    getVisibleItem: function() {
        var a = $("#grid-row-series" + GridPanel.row);
        var d = a.position().left;
        var b = null;
        a.find("li").each(function() {
            var e = d + $(this).position().left;
            if (e >= 0 && !b) {
                b = $(this)
            }
        });
        if (b) {
            var c = parseInt(b.attr("id").split("-")[3]);
            if (isNaN(c)) {
                c = 0
            }
            d = (GridPanel.item[GridPanel.row] - c);
            GridPanel.visibleItem[GridPanel.row] = d;
            return (c) + 6
        }
        return -1
    },
    keyHandler: function(a) {
        switch (a) {
            case TVA.tvKey.KEY_UP:
                GridPanel.up(true);
                GridPanel.checkFooter();
                break;
            case TVA.tvKey.KEY_RIGHT:
                GridPanel.right();
                GridPanel.checkFooter();
                break;
            case TVA.tvKey.KEY_DOWN:
                GridPanel.down(true);
                GridPanel.checkFooter();
                break;
            case TVA.tvKey.KEY_LEFT:
                GridPanel.left();
                GridPanel.checkFooter();
                break;
            case TVA.tvKey.KEY_ENTER:
                GridPanel.moreInfo(TVA.tvKey.KEY_ENTER);
                break
        }
    },
    setHover: function(b, a) {
        GridPanel.row = a;
        Commons.setHover(b);
        GridPanel.checkFooter()
    },
    offHover: function(a) {
        Commons.offHover(a)
    }
};
var MidPanel = {
    setFocus: function() {
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Commons.setFocus("middle-preview-panel");
        MidPanel.hideMe(false)
    },
    hideMe: function(a) {
        if (a) {
            $("#middle-preview-panel").addClass("hide-this");
            Commons.offFocus(View.actualFocus);
            Commons.offHover(View.actualHover)
        } else {
            $("#middle-preview-panel").removeClass("hide-this")
        }
    }
};
var ProgramGrid = {
    actualChannel: 0,
    itemRow: 0,
    visibleChannels: 0,
    detailsTimeout: null,
    firstAccess: true,
    navigatingToLeft: false,
    navigatingToRight: false,
    minY: 0,
    maxY: 0,
    init: function() {
        ProgramGrid.actualChannel = 0;
        ProgramGrid.itemRow = 0;
        ProgramGrid.visibleChannels = 0;
        ProgramGrid.firstAccess = true;
        ProgramGrid.navigatingToLeft = false;
        ProgramGrid.navigatingToRight = false;
        $(".epg .grid-horizontal-scroll").css("left", 0)
    },
    checkMinMax: function() {
        if (ProgramGrid.minY == 0 || ProgramGrid.maxY == 0) {
            var a = $(".bottom-panel-bottom");
            ProgramGrid.minY = a.offset().top;
            ProgramGrid.maxY = ProgramGrid.minY + a.height()
        }
    },
    setFocus: function() {
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Commons.setFocus("epg");
        ProgramGrid.hideMe(false);
        var b = false;
        var a = new Date(TVA.getEpoch());
        if (this.firstAccess) {
            $(".epg-line").css("left", ((a.getHours() * 60 + a.getMinutes()) * 4) - 8).show();
            if (ProgramGrid.setOnTime(a, a)) {
                Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
                ProgramGrid.getProgramDetails(true);
                b = true
            }
        } else {
            if (EPG.currentDayOffset != 0) {
                $(".epg-line").hide()
            } else {
                $(".epg-line").css("left", ((a.getHours() * 60 + a.getMinutes()) * 4) - 8).show()
            }
            if (this.navigatingToLeft) {
                a.setDate(a.getDate() + EPG.currentDayOffset);
                a.setHours(23);
                a.setMinutes(59);
                a.setSeconds(0, 0);
                if (ProgramGrid.setOnTime(a, a)) {
                    Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
                    ProgramGrid.getProgramDetails(true);
                    b = true
                }
            } else {
                if (this.navigatingToRight) {
                    a.setDate(a.getDate() + EPG.currentDayOffset);
                    a.setHours(0);
                    a.setMinutes(0);
                    a.setSeconds(0, 0);
                    if (ProgramGrid.setOnTime(a, a)) {
                        Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
                        ProgramGrid.getProgramDetails(true);
                        b = true
                    }
                } else {
                    Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
                    b = true
                }
            }
        }
        if (b == false) {
            ProgramGrid.checkFocus(true)
        }
        ProgramGrid.scrollLeft(0);
        Footer.enableLeft()
    },
    hideMe: function(a) {
        if (a) {
            $("#epg").addClass("hide-this");
            Commons.offFocus(View.actualFocus);
            Commons.offHover(View.actualHover)
        } else {
            $("#epg").removeClass("hide-this")
        }
    },
    scrollTop: function(a) {
        Commons.scroll(a, {
            list: "#channel-vertical-scroll",
            listItem: ".epg-channel",
            itemMove: ".grid-vertical-scroll",
            displayItems: 6,
            movement: "top",
            offset: 0
        }, 1)
    },
    scrollLeft: function(r) {
        var n = $(".epg");
        var b = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
        var u = n.find(".grid-horizontal-scroll");
        var k = parseInt(b.css("left"));
        var p = parseInt(b.css("width"));
        var i = $(".epg-rows-wrapper");
        var j = i.width();
        if (p > j) {
            p = j
        } else {
            if (p < 0) {
                p = 10
            }
        }
        var e = parseInt(u.css("left"));
        var v = 0;
        if (this.firstAccess) {
            var g = Math.round(j / 40);
            u.css("left", -(k - g));
            this.firstAccess = false
        } else {
            if (this.navigatingToLeft || this.navigatingToRight) {
                var s = parseInt(b.data("posCenter"));
                var d = j / 2;
                var o = s - d;
                if (o < 0) {
                    o = 0
                }
                n.find(".grid-horizontal-scroll").css("left", -o)
            } else {
                newposition = e;
                if (r == -1) {
                    if (k + e < 0) {
                        newposition = -(k - j + p);
                        e = newposition
                    }
                } else {
                    if (r == 1) {
                        v = (k + p) + newposition - j;
                        if (v > 0) {
                            newposition = -k;
                            e = newposition
                        }
                    }
                }
                if (k < Math.abs(e)) {
                    if (e + j < 0) {
                        newposition = -k
                    }
                } else {
                    v = (k + p) + e - j;
                    if (v > 0) {
                        newposition = e - v
                    }
                }
                v = (k + p) + newposition - j;
                if (v > 0) {
                    newposition = e - v
                }
                if (v + j < 0 && r != -1) {
                    newposition -= (v + j);
                    if (p > j) {
                        p = j
                    }
                    newposition += p
                }
                u.css("left", newposition)
            }
        }
        e = parseInt(u.css("left"));
        if (e > 0) {
            u.css("left", 0)
        } else {
            var a = i.offset().left;
            var l = i.offset().left + i.width();
            var q = $("#channelId" + ProgramGrid.actualChannel + " div:last");
            if (q && q.length) {
                var c = q.offset().left + q.width();
                if (l > c && c > a) {
                    var w = l - c;
                    u.css("left", e + w)
                }
            }
        }
        if (EPG.currentDayOffset != 0) {
            $(".epg-line").hide()
        } else {
            var f = $(".epg-line");
            var m = i.offset().left;
            var h = i.width();
            var t = f.show().offset().left;
            if (m < t && t < m + h) {
                f.show()
            } else {
                f.hide()
            }
        }
    },
    up: function() {
        ProgramGrid.visibleChannels = ProgramGrid.visibleChannels - 1;
        if (ProgramGrid.visibleChannels <= 0) {
            ProgramGrid.visibleChannels = 0;
            ProgramGrid.scrollTop(-1)
        }
        var a = ProgramGrid.actualChannel - 1;
        if (a >= 0) {
            var b = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            var c = DataStore.get(Type.Event, b.data("eventId"));
            ProgramGrid.actualChannel = a;
            ProgramGrid.setOnTime(c.startTime, c.endTime);
            Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.scrollLeft(0);
            ProgramGrid.getProgramDetails()
        } else {
            Header.setFocus()
        }
    },
    pageDown: function() {
        var f = $("#channel-vertical-scroll");
        var g = f.find(".epg-channel");
        var b = g.length - 1;
        ProgramGrid.visibleChannels = 0;
        if (ProgramGrid.actualChannel + 6 > b) {
            f.css("top", 0);
            $("#epg-list-program").css("top", 0)
        } else {
            for (var e = 0; e < 6; e++) {
                ProgramGrid.scrollTop(1)
            }
        }
        var h = f.position().top;
        var a = null;
        for (var j = 0; j < g.length; j++) {
            a = $(g[j]);
            if (h + a.position().top >= 0) {
                break
            }
        }
        if (a != null) {
            var d = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            var c = DataStore.get(Type.Event, d.data("eventId"));
            ProgramGrid.actualChannel = j;
            ProgramGrid.setOnTime(c.startTime, c.endTime);
            Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.scrollLeft(0);
            ProgramGrid.getProgramDetails()
        }
    },
    down: function() {
        var b = $("#channel-vertical-scroll").find(".epg-channel").length - 1;
        if (ProgramGrid.actualChannel + 1 <= b) {
            ProgramGrid.visibleChannels = ProgramGrid.visibleChannels + 1;
            if (ProgramGrid.visibleChannels >= 6) {
                ProgramGrid.visibleChannels = 6;
                ProgramGrid.scrollTop(1)
            }
        }
        var a = ProgramGrid.actualChannel + 1;
        if (a <= b) {
            var c = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            var d = DataStore.get(Type.Event, c.data("eventId"));
            ProgramGrid.actualChannel = a;
            ProgramGrid.setOnTime(d.startTime, d.endTime);
            Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.scrollLeft(0);
            ProgramGrid.getProgramDetails()
        }
    },
    left: function() {
        var a = ProgramGrid.itemRow - 1;
        if (a >= 0) {
            Commons.offHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.itemRow = a;
            Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.scrollLeft(-1);
            ProgramGrid.getProgramDetails();
            this.navigatingToLeft = false;
            this.navigatingToRight = false
        } else {
            this.navigatingToLeft = true;
            this.navigatingToRight = false;
            EPG.previousDay()
        }
    },
    right: function() {
        var b = $("#channelId" + ProgramGrid.actualChannel).find(".epg-item").length - 1;
        var a = ProgramGrid.itemRow + 1;
        if (a <= b) {
            Commons.offHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.itemRow = a;
            Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.scrollLeft(+1);
            ProgramGrid.getProgramDetails();
            this.navigatingToLeft = false;
            this.navigatingToRight = false
        } else {
            this.navigatingToLeft = false;
            this.navigatingToRight = true;
            EPG.nextDay()
        }
    },
    setOnTime: function(e, k) {
        var j;
        var h = e.getDate();
        var d = k.getDate();
        var b = e.getTime();
        var f = k.getTime();
        if (h === d) {
            j = ProgramGrid.getMiddleDate(e, k)
        } else {
            var c = new Date(b);
            c.setHours(24, 0, 0);
            j = ProgramGrid.getMiddleDate(e, c)
        }
        var i = null;
        var a = 999999999999999;
        var g = null;
        $("#channelId" + ProgramGrid.actualChannel + " .epg-item").each(function() {
            var l = $(this).data("eventId");
            var m = DataStore.get(Type.Event, l);
            if (!m || !m.startTime || typeof m.startTime == "string") {
                return
            }
            if (m.startTime.getTime() <= b && m.endTime.getTime() >= f) {
                g = $(this).data("index")
            }
            var o = ProgramGrid.getMiddleDate(m.startTime, m.endTime);
            if (o.getDate() == j.getDate()) {
                var n = Utils.getSecondsBetweenDates(o, j);
                if (n < a) {
                    a = n;
                    i = $(this).data("index")
                }
            }
        });
        if (g !== null) {
            ProgramGrid.itemRow = parseInt(g);
            return true
        } else {
            if (i !== null) {
                ProgramGrid.itemRow = parseInt(i);
                return true
            }
        }
        return false
    },
    getMiddleDate: function(d, c) {
        var b = d.getTime();
        var a = c.getTime();
        return new Date(b + (a - b) / 2)
    },
    getProgramDetails: function(b) {
        var c = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
        var d = c.data("eventId");
        if (d) {
            TVA.putInnerHTML(document.getElementById("epg-info"), "");
            $(".bg-image").attr("src", "resource/pixel.gif");
            if (b) {
                API.getDetails("event", d)
            } else {
                window.clearTimeout(ProgramGrid.detailsTimeout);
                ProgramGrid.detailsTimeout = window.setTimeout(function() {
                    API.getDetails("event", d)
                }, 1000)
            }
        }
        var e = DataStore.get(Type.Event, d);
        if (Footer.leftMethods.hasOwnProperty(TVA.tvKey.KEY_ENTER)) {
            var a = Utils.now();
            var f = 5 * 60 * 1000;
            if ((c.data("assetId") && c.data("programId") && c.data("channelId")) || (e.startTime.getTime() - f <= a && a <= e.endTime.getTime() + f)) {
                $("#epg-ver-div").removeClass("hide-this");
                $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).removeClass("disabled")
            } else {
                $("#epg-ver-div").addClass("hide-this");
                $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).addClass("disabled")
            }
        }
    },
    keyHandler: function(a) {
        var b = false;
        switch (a) {
            case TVA.tvKey.KEY_PLAY:
                if ($(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).hasClass("disabled") == false) {
                    Footer.keyHandler(TVA.tvKey.KEY_ENTER)
                } else {
                    API.getChannels("direct", ProgramGrid.actualChannel)
                }
                break;
            case TVA.tvKey.KEY_UP:
                ProgramGrid.up();
                b = true;
                break;
            case TVA.tvKey.KEY_DOWN:
                ProgramGrid.down();
                b = true;
                break;
            case TVA.tvKey.KEY_RIGHT:
                ProgramGrid.right();
                break;
            case TVA.tvKey.KEY_LEFT:
                ProgramGrid.left();
                break;
            case TVA.tvKey.KEY_ENTER:
                EPG.goDataSheet();
                break
        }
        if (b) {
            ProgramGrid.checkFocus(false)
        }
    },
    setHover: function(b, a) {
        var c = (ProgramGrid.actualChannel != b || ProgramGrid.itemRow != a);
        ProgramGrid.actualChannel = b;
        ProgramGrid.itemRow = a;
        Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
        if (c) {
            ProgramGrid.getProgramDetails()
        }
    },
    checkFocus: function(i) {
        if (i == false) {
            if (View.actualHover && $("#" + View.actualHover).length == 0) {
                i = true
            }
        }
        var e = $("#channel-vertical-scroll");
        var g = e.position().top;
        if (i == false) {
            ProgramGrid.checkMinMax();
            var d = $("#" + View.actualHover).offset().top;
            if (d < ProgramGrid.minY) {
                ProgramGrid.scrollTop(-1)
            } else {
                if (d > ProgramGrid.maxY) {
                    ProgramGrid.scrollTop(+1)
                }
            }
            return
        }
        var f = e.find(".epg-channel");
        var a = null;
        for (var h = 0; h < f.length; h++) {
            a = $(f[h]);
            if (g + a.position().top >= 0) {
                break
            }
        }
        if (a != null) {
            ProgramGrid.actualChannel = h;
            ProgramGrid.itemRow = 0;
            var c = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            var b = DataStore.get(Type.Event, c.data("eventId"));
            ProgramGrid.setOnTime(b.startTime, b.endTime);
            Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            ProgramGrid.scrollLeft(0);
            ProgramGrid.getProgramDetails()
        }
    }
};
var PopMsg = {
    loadTimeout: null,
    showErrorCode: false,
    init: function() {
        if (!API.initialized) {
            setTimeout("PopMsg.init();", 1000);
            return
        }
        API.call({
            url: API.base_url + "messages",
            data: {
                deviceType: TVA.OTT.DEVICETYPE
            },
            errorWrapper: false,
            errorCode: -1,
            emptyResponseAllowed: true,
            hideLoader: true,
            success: function(b, a, c) {
                if (c && c.status == 200 && b && b.data) {
                    PopMsg.mapping = b.data
                }
            }
        })
    },
    show: function(a, b, d) {
        if (this.text[b]) {
            var e = PopMsg.getText(b);
            Messenger.notifyPopup(a, b, d, e ? e : "");
            if (b == 29) {
                View.loaderHide();
                if (API.initialized == false) {
                    var c = Utils.now() - API.initializing;
                    if (c < 2000) {
                        if (API.numInitErrors < 8) {
                            clearTimeout(PopMsg.loadTimeout);
                            PopMsg.loadTimeout = setTimeout("API.numInitErrors++;Main.onLoad();", 2 * 1000);
                            return false
                        }
                        API.numInitErrors = 5
                    } else {
                        Main.onLoad();
                        return false
                    }
                }
                PopUp.setCallback(Main.onLoad)
            }
            if (!e || typeof e != "string" || e.length <= 0) {
                View.loaderHide();
                return false
            }
            if (PopMsg.showErrorCode === true && typeof d == "string" && d != "") {
                e += "<br/>[" + d + "]"
            }
            View.changeView(PopUp);
            PopUp.showMe(a, false, e);
            return true
        }
        return false
    },
    showMessage: function(a, b) {
        if (!b || !b.length) {
            View.loaderHide();
            return false
        }
        View.changeView(PopUp);
        PopUp.showMe(a, false, b);
        return true
    },
    text: [],
    getText: function(d) {
        var c = "";
        if (d >= 0 && d <= PopMsg.text.length && PopMsg.text.hasOwnProperty(d)) {
            var a = PopMsg.text[d];
            if (a) {
                if (a.v && typeof a.v === "string") {
                    c = a.v
                }
                if (a.k && typeof a.k === "string" && a.k.length > 0) {
                    var b = a.k;
                    if (PopMsg.mapping.hasOwnProperty(b)) {
                        c = PopMsg.mapping[b]
                    }
                }
            }
        }
        return c
    }
};
PopMsg.mapping = {};
PopMsg.text[0] = {
    k: "ERR_CALL_EVT_PB",
    v: "Ocurrió un error al cargar la información del evento"
};
PopMsg.text[1] = {
    k: "ERR_CALL_CHANNELS_LIVE",
    v: "No hay canales de televisión en directo disponibles"
};
PopMsg.text[2] = {
    k: "ERR_LOAD_CHANNELS",
    v: "Se produjo un error al cargar la lista de canales"
};
PopMsg.text[3] = {
    k: "ERR_LOAD_CHANNELS_LIVE",
    v: "Se produjo un error al cargar la lista de canales en directo"
};
PopMsg.text[4] = {
    k: "ERR_LOAD_EPG",
    v: "Se produjo un error al cargar los eventos de la guía"
};
PopMsg.text[5] = {
    k: "ERR_LOAD_PROMOS",
    v: "Se produjo un error al cargar la lista de promociones"
};
PopMsg.text[6] = {
    k: "ERR_LOAD_NOTED",
    v: "Se produjo un error al cargar la lista de destacados"
};
PopMsg.text[7] = {
    k: "ERR_LOAD_RECOMMENDED",
    v: "Se produjo un error al cargar la lista de recomendados"
};
PopMsg.text[8] = {
    k: "ERR_CALL_EPG",
    v: "Se produjo un error al cargar el evento de la guía"
};
PopMsg.text[9] = {
    k: "ERR_CALL_VOTE",
    v: "Se produjo un error al calificar el evento"
};
PopMsg.text[10] = {
    k: "ERR_RECORDING",
    v: "Se produjo un error durante la grabación del evento"
};
PopMsg.text[11] = {
    k: "ERR_CALL_ADD_RECORDING_SINGLE",
    v: "Elemento duplicado. No se puede volver a agregar a la lista de Grabaciones"
};
PopMsg.text[12] = {
    k: "ERR_CALL_ADD_MYTV_WATCHLATER",
    v: "Elemento duplicado. No se puede volver a agregar a la lista de Ver más tarde"
};
PopMsg.text[13] = {
    k: "ERR_PLAYING_WATCHLATER_EVENT",
    v: "Se produjo un error al ver el evento de la lista de Ver más tarde"
};
PopMsg.text[14] = {
    k: "ERR_CALL_MOSTVIEWED",
    v: "Se produjo un error al cargar la lista de Más vistos"
};
PopMsg.text[15] = {
    k: "ERR_CALL_HIGHESTRATED",
    v: "Se produjo un error al cargar la lista de Mas valorados"
};
PopMsg.text[16] = {
    k: "ERR_CALL_MYTV_RECORDINGS",
    v: "Se produjo un error al cargar la lista de grabaciones"
};
PopMsg.text[17] = {
    k: "ERR_CALL_MYTV_PENDINGRECORDINGS",
    v: "Se produjo un error al cargar la lista de grabaciones pendientes"
};
PopMsg.text[18] = {
    k: "ERR_CALL_MYTV_WATCHLATER",
    v: "Se produjo un error al cargar la lista de Ver más tarde"
};
PopMsg.text[19] = {
    k: "ERR_LOAD_CHANNELS_EVENTS",
    v: "Se produjo un error al cargar los canales con eventos"
};
PopMsg.text[20] = {
    k: "ERR_LOAD_EVENTS",
    v: "Se produjo un error al cargar eventos"
};
PopMsg.text[21] = {
    k: "ERR_LOAD_EVENTS_INFO",
    v: "Se produjo un error al cargar toda la información de eventos"
};
PopMsg.text[22] = {
    k: "ERR_LOAD_CHANNELS_MOVIES",
    v: "Se produjo un error al cargar canales con películas"
};
PopMsg.text[23] = {
    k: "ERR_LOAD_MOVIES",
    v: "Se produjo un error al cargar películas"
};
PopMsg.text[24] = {
    k: "ERR_LOAD_CHANNELCONTENT_OPS",
    v: "Se produjo un error al cargar los filtros"
};
PopMsg.text[25] = {
    k: "ERR_LOAD_FILTERS",
    v: "Se produjo un error al cargar los filtros"
};
PopMsg.text[26] = {
    k: "ERR_LOAD_RELATED",
    v: "Se produjo un error al cargar la lista de los relacionados"
};
PopMsg.text[27] = {
    k: "ERR_LOAD_MOVIES_INFO",
    v: "Se produjo un error al cargar toda la información de películas"
};
PopMsg.text[28] = {
    k: "ERR_LOAD_EVENT_DATA",
    v: "Se produjo un error al cargar los datos de un EVENTO / PROGRAMA"
};
PopMsg.text[29] = {
    k: "ERR_SESSION",
    v: "Error de sesión, pulse OK para recargar"
};
PopMsg.text[30] = {
    k: "ERR_SESSION_NOT_STARTED",
    v: "Usted no ha iniciado sesión"
};
PopMsg.text[31] = {
    k: "ERR_NO_AUTH",
    v: "Usted no está autorizado"
};
PopMsg.text[32] = {
    k: "ERR_LOAD_ADVERTS",
    v: "Se produjo un error al cargar los anuncios"
};
PopMsg.text[33] = {
    k: "ERR_CALL_AUTH_PAIR",
    v: "Se produjo un error durante el emparejamiento de dispositivos"
};
PopMsg.text[34] = {
    k: "ERR_PLAYING",
    v: "Ocurrió un error al reproducir el contenido"
};
PopMsg.text[35] = {
    k: "ERR_NO_LOGIN",
    v: "Usuario no registrado"
};
PopMsg.text[36] = {
    k: "ERR_CALL_MYTV_REMOVERECORDING",
    v: "Se produjo un error mientras se eliminaban grabaciones"
};
PopMsg.text[37] = {
    k: "ERR_CALL_MYTV_CANCELRECORDING",
    v: "Se produjo un error mientras se eliminaban grabaciones pendientes"
};
PopMsg.text[38] = {
    k: "ERR_CALL_MYTV_REMOVEWATCHLATER",
    v: "Se produjo un error mientras se eliminaban eventos de la lista Ver más tarde"
};
PopMsg.text[39] = {
    k: "MSG_EOS",
    v: "Fin de sesión completado con éxito"
};
PopMsg.text[40] = {
    k: "MSG_VOTE_OK",
    v: "La votación se ha realizado con éxito"
};
PopMsg.text[41] = {
    k: "MSG_WATCHLATER_ADDED",
    v: "Se ha añadido el evento a la lista de Ver más tarde"
};
PopMsg.text[42] = {
    k: "MSG_RECORDING_ADDED",
    v: "La petición de grabación se ha realizado con éxito"
};
PopMsg.text[43] = {
    k: "MSG_NO_RECORDINGS",
    v: "No se han encontrado grabaciones"
};
PopMsg.text[44] = {
    k: "MSG_NO_ELEMENTS",
    v: "No se han encontrado elementos"
};
PopMsg.text[45] = {
    k: "ERR_API_CHANNELCONTENT",
    v: "No se han encontrado resultados"
};
PopMsg.text[46] = {
    k: "ERR_API_CHANNELCONTENT_CATEGORIES",
    v: "Se produjo un error al cargar los escaparates"
};
PopMsg.text[47] = {
    k: "ERR_VOD_NOT_AVAILABLE",
    v: "Este contenido todavía no está disponible para este dispositivo"
};
PopMsg.text[48] = {
    k: "ERR_TIME_LIMIT_REACHED",
    v: "Se ha excedido el número de horas de reproducción"
};
PopMsg.text[49] = {
    k: "MSG_RECORDING_SEASON_ADDED",
    v: "La petición de grabación de serie se ha realizado con éxito"
};
PopMsg.text[50] = {
    k: "ERR_CALL_ADD_RECORDING",
    v: "No se puede volver a agregar a la lista o no hay espacio disponible en su cuenta para realizar la grabación"
};
PopMsg.text[51] = {
    k: "ERR_API_TIMEOUT",
    v: "La petición ha caducado, por favor vuelva a intentarlo"
};
PopMsg.text[52] = {
    k: "ERR_CHANNEL_NOT_AVAILABLE",
    v: "El canal #CH# todavía no está disponible para este dispositivo"
};
PopMsg.text[53] = {
    k: "MSG_LIVE_INFO",
    v: "Pulse OK para Lista de Canales<br/>Para cambiar de canal pulse < y >"
};
PopMsg.text[54] = {
    k: "ERR_EMPTY_FIELD",
    v: "Campo #FIELD# vacío"
};
PopMsg.text[55] = {
    k: "ERR_ACCEPT_PPRIV",
    v: "Debes aceptar las condiciones de uso y la política de privacidad"
};
PopMsg.text[56] = {
    k: "ERR_OLD_DEVICE",
    v: "Actualmente este dispositivo no puede reproducir los contenidos de esta aplicación.<br/>Para más información dirígete a http://www.totalchannel.com/televisores-smarttv"
};
var EVT = {
    lastBeacon: null,
    startTime: null,
    pauseStartTime: null,
    pausedTime: 0,
    beaconInterval: 10000,
    freezeTimeStart: 0,
    currentPbId: null,
    currentAssetId: null,
    lastPosition: 0,
    lastPositionTime: 0,
    samePositionTimeout: 60000,
    stopTimeout: null,
    cleanLastPosition: function() {
        EVT.lastPosition = 0;
        EVT.lastPositionTime = 0
    },
    start: function() {
        EVT.cleanLastPosition();
        if (EVT.startTime === null) {
            EVT.startTime = Utils.now();
            EVT.sendBeacon(0)
        }
    },
    play: function() {
        if (EVT.startTime === null) {
            EVT.start()
        }
        if (EVT.pauseStartTime !== null) {
            var a = Utils.now();
            EVT.pausedTime += a - EVT.pauseStartTime;
            EVT.pauseStartTime = null
        }
        EVT.cleanLastPosition()
    },
    pause: function() {
        if (EVT.pauseStartTime === null) {
            EVT.pauseStartTime = Utils.now()
        }
        EVT.cleanLastPosition()
    },
    stop: function() {
        EVT.lastBeacon = 0;
        EVT.sendBeacon(VideoPlayer.currentSeconds);
        EVT.reset()
    },
    reset: function() {
        EVT.startTime = null;
        EVT.pauseStartTime = null;
        EVT.pausedTime = 0;
        EVT.freezeTimeStart = 0;
        EVT.currentAssetId = null;
        EVT.currentPbId = null;
        clearTimeout(EVT.stopTimeout);
        EVT.stopTimeout = null;
        EVT.cleanLastPosition()
    },
    checkFrozenTime: function() {
        if (EVT.freezeTimeStart > 0) {
            var a = Utils.now() - EVT.freezeTimeStart;
            EVT.freezeTimeStart = 0;
            if (a > 0) {
                EVT.pausedTime += a
            }
        }
    },
    sendBeacon: function(d) {
        var b = Utils.now();
        if (TVA_Player.getState() != TVA_Player.state.paused && EVT.lastBeacon < b - EVT.beaconInterval) {
            if (EVT.currentPbId !== null && EVT.currentAssetId !== null) {
                EVT.checkFrozenTime();
                var c = Math.floor((b - EVT.startTime - EVT.pausedTime) / 1000);
                if (arguments.length !== 1) {
                    d = TVA_Player.time()
                }
                if (EVT.startTime === null) {
                    EVT.startTime = Utils.now()
                }
                if (VideoPlayer.playPbStart <= 0) {
                    VideoPlayer.playPbStart = Utils.now()
                }
                var a = (Utils.now() - VideoPlayer.playPbStart) - EVT.pausedTime;
                if (a < 0) {
                    a = 0
                }
                a = Math.floor(a / 1000);
                API.sendEVT(EVT.currentPbId, EVT.currentAssetId, d, a, TVA_Player.getState() == TVA_Player.state.stopped);
                EVT.lastBeacon = Utils.now();
                if (VideoPlayer.initPlayerResponseVideo && VideoPlayer.initPlayerResponseVideo.remainingTime && VideoPlayer.initPlayerResponseVideo.remainingTime > 0) {
                    EVT.initStopTimer(VideoPlayer.initPlayerResponseVideo.remainingTime);
                    VideoPlayer.initPlayerResponseVideo.remainingTime = 0
                }
                View.updateClock()
            }
        }
    },
    initStopTimer: function(a) {
        a = a + 10;
        var b = a * 1000;
        if (b > 86400000) {
            b = 86400000
        }
        clearTimeout(EVT.stopTimeout);
        EVT.stopTimeout = setTimeout(EVT.stopPlayer, b)
    },
    stopPlayer: function() {
        if (View.actualPageIs(VideoPlayer)) {
            if (View.actualPage === PopUp) {
                PopUp.deInitView()
            }
            View.previousPage();
            PopMsg.show("error", 48)
        }
    }
};
var VideoControls = {
    actualControl: 0,
    totalControls: 0,
    lastButtonPress: null,
    isHidden: true,
    refreshTime: 0,
    speed: 1,
    pendingRefresh: false,
    refreshTimeout: 30000,
    showLiveInfo: false,
    directMode: false,
    setFocus: function() {
        if (View.actualPage !== PopUp) {
            if (VideoControls.directMode == false) {
                Commons.offFocus(View.actualFocus);
                Commons.offHover(View.actualHover);
                Commons.setFocus("player-controls");
                Commons.setHover("player-controls" + VideoControls.actualControl)
            } else {
                if (View.actualFocus === "filter-thumbnail-list-container") {
                    return
                }
                Commons.offFocus(View.actualFocus);
                Commons.offHover(View.actualHover);
                $("#filter-thumbs" + ThumbSliderFilter.activeFilter).addClass("active");
                ThumbSliderFilter.setFocus(false)
            }
        }
        VideoControls.lastButtonPress = Utils.now();
        if (View.actualFocus !== "filter-thumbnail-list-container") {
            Footer.enableLeft()
        } else {
            Footer.disableLeft()
        }
    },
    reset: function() {
        VideoControls.actualControl = 0;
        VideoControls.totalControls = 0;
        VideoControls.pendingRefresh = false;
        VideoControls.showLiveInfo = false;
        VideoControls.directMode = false;
        VideoControls.updateTimer(0, 0);
        $("#small-slider").removeClass("hide-this");
        $("#thumbnail-list").removeClass("hide-this");
        $("#sliders").removeClass("hide-this");
        $("#filter-thumbnail-list-container").removeClass("hide-this");
        $("#main-container").removeClass("main-container-live")
    },
    checkControls: function() {
        var a = Utils.now();
        var b = TVA.OTT.HIDE_CONTROLS_TO;
        if (!VideoControls.isHidden && VideoControls.lastButtonPress + b < a) {
            VideoControls.hideControls()
        } else {
            if (VideoControls.isHidden && VideoControls.lastButtonPress + b > a) {
                VideoControls.showControls()
            }
        }
    },
    popupShowed: false,
    hideControls: function() {
        SidePanel.hideMe(true);
        Header.hideMe(true);
        VideoControls.actualControl = 0;
        if (View.actualPageIs(PopUp) == false) {
            Commons.offFocus(View.actualFocus);
            Commons.offHover(View.actualHover);
            Commons.setFocus("video-player");
            Commons.setHover("video-player")
        }
        $("#liveplayer-details-container").addClass("hide-this");
        var a = $("#footer");
        a.addClass("hide-this");
        $("#mousecatcherTop").removeClass("hide-this");
        $("#mousecatcherBottom").removeClass("hide-this");
        $("#header").unbind("mouseover");
        a.unbind("mouseover");
        VideoControls.isHidden = true;
        if (VideoControls.showLiveInfo === true && API.channelsCallbackMode == "direct-start" && totalChannelStorage.getItem("directstart-popup") !== "HIDE" && VideoControls.popupShowed == false) {
            VideoControls.popupShowed = true
        }
        VideoControls.directMode = false;
        VideoControls.checkMode()
    },
    showControls: function(b, a) {
        VideoControls.showLiveInfo = (b === true);
        VideoControls.directMode = (a === true);
        if (VideoControls.directMode) {
            ThumbSliderFilter.loadTab()
        }
        if (View.actualFocus === "side-panel-container-video") {
            SidePanel.closePanel()
        }
        Header.hideMe(false);
        VideoControls.setFocus();
        $("#liveplayer-details-container").removeClass("hide-this");
        var c = $("#footer");
        c.removeClass("hide-this");
        $("#mousecatcherTop").addClass("hide-this");
        $("#mousecatcherBottom").addClass("hide-this");
        $("#header").mouseover(VideoControls.mouseover);
        c.mouseover(VideoControls.mouseover);
        VideoControls.isHidden = false;
        if (VideoControls.pendingRefresh == true) {
            VideoControls.refreshLiveContent()
        }
        VideoControls.checkMode();
        VideoPlayer.setFooter()
    },
    checkMode: function() {
        VideoControls.hideMe(VideoControls.directMode);
        if (VideoControls.directMode == true) {
            $("#small-slider").removeClass("hide-this");
            $("#thumbnail-list").removeClass("hide-this");
            $("#sliders").removeClass("hide-this");
            $("#filter-thumbnail-list-container").removeClass("hide-this");
            $("#main-container").removeClass("hide-this").addClass("main-container-live");
            ThumbSliderFilter.setFocus()
        } else {
            $("#small-slider").addClass("hide-this");
            $("#thumbnail-list").addClass("hide-this");
            $("#sliders").addClass("hide-this");
            $("#filter-thumbnail-list-container").addClass("hide-this");
            $("#main-container").addClass("hide-this").removeClass("main-container-live")
        }
    },
    visibleControls: function() {
        return (!$("#player-controls").hasClass("hide-this"))
    },
    hideMe: function(a) {
        var c = $("#player-controls");
        if (a) {
            c.addClass("hide-this")
        } else {
            c.removeClass("hide-this")
        }
    },
    next: function() {
        var a = VideoControls.actualControl + 1;
        VideoControls.totalControls = $("#video-container-controls").find(".controls-button:visible").length - 1;
        if (a <= VideoControls.totalControls) {
            VideoControls.actualControl = a;
            Commons.setHover("player-controls" + VideoControls.actualControl)
        }
    },
    previous: function() {
        var a = VideoControls.actualControl - 1;
        if (a >= 0) {
            VideoControls.actualControl = a;
            Commons.setHover("player-controls" + VideoControls.actualControl)
        }
    },
    updateTimer: function(f, e) {
        var g = f;
        if (VideoPlayer.details.isLive) {
            g -= VideoPlayer.currentSecondsOff
        }
        if (TVA_Player.getState() == TVA_Player.state.playing) {
            VideoControls.checkControls();
            var d = (g / e) * 100;
            if (d > 100) {
                d = 100
            } else {
                if (d < 0) {
                    d = 0
                }
            }
            TVA.putInnerHTML(document.getElementById("video-current-time"), Utils.getTimeStr(g));
            $("#elapsed-time").css("width", d + "%");
            VideoControls.updateTotalTimer(e);
            if (TVA.OTT.DEVICETYPE == TVA.OTT.DEVICETYPE_BRAVIA) {
                var c = Footer.element["left-controls"];
                try {
                    c.addClass("opaque099");
                    setTimeout(function() {
                        c.removeClass("opaque099")
                    }, 10)
                } catch (b) {}
            }
            if (VideoPlayer.playPbStart <= 0 && f > 0) {
                VideoPlayer.playPbStart = Utils.now()
            }
        } else {
            if (TVA_Player.getState() == TVA_Player.state.stopped && g == 0 && e == 0) {
                TVA.putInnerHTML(document.getElementById("video-current-time"), Utils.getTimeStr(g));
                $("#elapsed-time").css("width", "0%");
                VideoControls.updateTotalTimer(e)
            }
        }
        EVT.sendBeacon(f);
        var a = $("#player-controls").find(".time");
        if (g == 0 && e == 0) {
            a.hide()
        } else {
            a.show()
        }
        if (VideoPlayer.details.isLive && g > e) {
            VideoControls.refreshLiveContent()
        }
    },
    updateTotalTimer: function(a) {
        if (a <= 0) {
            TVA.putInnerHTML(document.getElementById("video-total-time"), "");
            TVA.putInnerHTML(document.getElementById("video-division"), "&nbsp;");
            TVA.putInnerHTML(document.getElementById("video-current-time"), "")
        } else {
            TVA.putInnerHTML(document.getElementById("video-total-time"), Utils.getTimeStr(a));
            TVA.putInnerHTML(document.getElementById("video-division"), "/")
        }
    },
    refreshLiveContent: function() {
        var a = Utils.now();
        if (VideoControls.refreshTime < a - VideoControls.refreshTimeout) {
            if (VideoControls.isHidden) {
                VideoControls.pendingRefresh = true;
                return
            }
            VideoControls.refreshTime = a;
            API.getCurrentLiveContent(VideoPlayer.details.channelId, true)
        }
    },
    play: function() {
        VideoPlayer.speed = 1;
        if (VideoPlayer.inited) {
            if (TVA_Player.getState() == TVA_Player.state.stopped) {
                VideoPlayer.setSeekTime();
                VideoControls.setFocus();
                TVA_Player.play();
                EVT.play()
            } else {
                if (TVA_Player.getState() == TVA_Player.state.paused) {
                    VideoPlayer.setSeekTime();
                    TVA_Player.pause(false);
                    EVT.play()
                } else {
                    if (TVA_Player.getState() == TVA_Player.state.playing) {
                        if (Subtitles.loaded()) {
                            var c = $("#subtitles");
                            var a = parseInt(c.css("font-size").replace("px", ""));
                            if (!c.data("fsz")) {
                                c.data("fsz", a)
                            }
                            var b = parseInt(c.data("fsz"));
                            a += 2;
                            if (a > b + 10) {
                                a = b - 6
                            }
                            c.css("font-size", a + "px")
                        }
                    }
                }
            }
        }
    },
    checkIfPlayerHasStarted: function(a) {
        if (VideoPlayer.inited && VideoPlayer.initialBufferingComplete) {
            if (a) {
                return (!VideoPlayer.details.isLive && TVA_Player.canSeek)
            } else {
                return VideoPlayer.hasStarted(false)
            }
        }
        return false
    },
    pause: function() {
        VideoPlayer.speed = 1;
        if (VideoControls.checkIfPlayerHasStarted(false)) {
            if (TVA_Player.getState() == TVA_Player.state.playing) {
                VideoPlayer.setSeekTime();
                TVA_Player.pause(true);
                EVT.pause()
            }
        }
    },
    stop: function() {
        VideoPlayer.speed = 1;
        if (VideoPlayer.inited) {
            try {
                switch (oldPlayerState) {
                    case TVA_Player.state.playing:
                    case TVA_Player.state.paused:
                    case TVA_Player.state.buffering:
                    case TVA_Player.state.finished:
                    case TVA_Player.state.connecting:
                        Messenger.videoPlayerStopped();
                        break
                }
            } catch (a) {}
            TVA_Player.stop();
            EVT.stop()
        }
    },
    forward: function() {
        VideoPlayer.speed = 1;
        if (VideoControls.checkIfPlayerHasStarted(true)) {
            VideoPlayer.setSeekTime();
            TVA_Player.forward(VideoControls.getSpoolTime(true))
        }
    },
    fForward: function() {
        if (VideoControls.checkIfPlayerHasStarted(true)) {
            VideoPlayer.setSeekTime();
            TVA_Player.forward(VideoControls.getSpoolTime(false))
        }
        if (VideoPlayer.speed < 2) {
            VideoPlayer.speed++
        }
    },
    rewind: function() {
        VideoPlayer.speed = 1;
        if (VideoControls.checkIfPlayerHasStarted(true)) {
            VideoPlayer.setSeekTime();
            TVA_Player.backward(VideoControls.getSpoolTime(true))
        }
    },
    fRewind: function() {
        if (VideoControls.checkIfPlayerHasStarted(true)) {
            VideoPlayer.setSeekTime();
            TVA_Player.backward(VideoControls.getSpoolTime(false))
        }
        if (VideoPlayer.speed < 2) {
            VideoPlayer.speed++
        }
    },
    getSpoolTime: function(b) {
        var a = 120;
        if (b) {
            a = 60
        } else {
            if (VideoPlayer.speed > 0) {
                if (TVA.device === "lg") {
                    a = a * 2
                } else {
                    a = a * VideoPlayer.speed
                }
            }
        }
        return a
    },
    mouseover: function() {
        VideoControls.lastButtonPress = Utils.now()
    },
    keyHandler: function(a) {
        if (VideoControls.isHidden) {
            switch (a) {
                case TVA.tvKey.KEY_RIGHT:
                    VideoPlayer.channelNext();
                    return;
                case TVA.tvKey.KEY_LEFT:
                    VideoPlayer.channelPrevious();
                    return;
                default:
                    VideoControls.showControls();
                    return
            }
        }
        switch (a) {
            case TVA.tvKey.KEY_RIGHT:
                VideoControls.next();
                break;
            case TVA.tvKey.KEY_LEFT:
                VideoControls.previous();
                break;
            case TVA.tvKey.KEY_ENTER:
                if (VideoControls.actualControl == 0) {
                    if (TVA_Player.getState() == TVA_Player.state.playing) {
                        VideoControls.pause()
                    } else {
                        if (TVA_Player.getState() == TVA_Player.state.paused) {
                            VideoControls.play()
                        }
                    }
                } else {
                    if (VideoControls.actualControl == 1) {
                        View.previousPage()
                    } else {
                        if (VideoControls.actualControl == 2) {
                            VideoControls.fRewind()
                        } else {
                            if (VideoControls.actualControl == 3) {
                                VideoControls.rewind()
                            } else {
                                if (VideoControls.actualControl == 4) {
                                    VideoControls.forward()
                                } else {
                                    if (VideoControls.actualControl == 5) {
                                        VideoControls.fForward()
                                    }
                                }
                            }
                        }
                    }
                }
                break
        }
    }
};
var VideoControlsHack = {
    enabled: false,
    timeout: null,
    enable: function() {
        if (TVA.OTT.VIDEOCONTROLSHACKDISABLED == true) {
            return
        }
        if (VideoControlsHack.enabled) {
            return
        }
        VideoControlsHack.enabled = true;
        window.clearTimeout(VideoControlsHack.timeout);
        VideoControlsHack.tick()
    },
    disable: function() {
        if (TVA.OTT.VIDEOCONTROLSHACKDISABLED == true) {
            return
        }
        VideoControlsHack.enabled = false;
        window.clearTimeout(VideoControlsHack.timeout);
        VideoControlsHack.timeout = null
    },
    tick: function() {
        if (TVA.OTT.VIDEOCONTROLSHACKDISABLED == true) {
            return
        }
        if (VideoControlsHack.enabled) {
            var a = Utils.now();
            var b = Math.floor((a - EVT.startTime - EVT.pausedTime) / 1000);
            try {
                window.clearTimeout(VideoControlsHack.timeout)
            } catch (c) {}
            playHeadChanged(b);
            VideoControlsHack.timeout = window.setTimeout(VideoControlsHack.tick, 1000)
        } else {
            VideoControlsHack.disable()
        }
    }
};
var Scroller = {
    getDivId: function(a, b) {
        if (b[0] == ".") {
            return a + " " + b
        } else {
            if (b[0] == "#") {
                return b
            }
        }
        return a + " ." + b
    },
    down: function(b, g) {
        var a = $(b);
        var e = $(this.getDivId(b, g));
        if (a.length && e.length) {
            var f = e.attr("postop");
            if (typeof f === "undefined" || isNaN(parseInt(f))) {
                f = e.position().top
            } else {
                f = parseInt(f)
            }
            if (isNaN(f)) {
                f = 0
            }
            var c = parseInt(e.css("line-height").replace("px", ""));
            if (isNaN(c) || c < 0) {
                c = 0
            }
            var d = f - (a.height() - c);
            if (d > 0) {
                d = 0
            } else {
                if (e.height() - a.height() < -d) {
                    d = -(e.height() - a.height())
                }
            }
            e.attr("postop", Math.round(d));
            e.css({
                top: Math.round(d) + "px"
            })
        }
    },
    up: function(b, g) {
        var a = $(b);
        var e = $(this.getDivId(b, g));
        if (a.length && e.length) {
            var f = e.attr("postop");
            if (typeof f === "undefined" || isNaN(parseInt(f))) {
                f = e.position().top
            } else {
                f = parseInt(f)
            }
            if (isNaN(f)) {
                f = 0
            }
            var c = parseInt(e.css("line-height").replace("px", ""));
            if (isNaN(c) || c < 0) {
                c = 0
            }
            var d = f + (a.height() - c);
            if (d > 0) {
                d = 0
            } else {
                if (e.height() - a.height() < -d) {
                    d = -(e.height() - a.height())
                }
            }
            e.attr("postop", Math.round(d));
            e.css({
                top: Math.round(d) + "px"
            })
        }
    }
};
var Home = {
    classname: "home",
    initView: function() {
        Header.actualPage = 0;
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        $(".header-list li").removeClass("active");
        $("#header" + Header.actualPage).addClass("active");
        if (TVA.device === "ps3" && API.configLoaded == false) {} else {
            if (TVA.device === "ps3") {
                setTimeout("API.getPromotions(0);", 500)
            } else {
                API.getPromotions(0)
            }
        }
        var a = [];
        a.push({
            text: "Ficha",
            className: "one-button-footer",
            keycode: TVA.tvKey.KEY_1,
            method: function() {
                Slider.moreInfo();
                return false
            }
        });
        Footer.setLeft(a);
        ThumbSliderFilter.setOptions((Main.username === "") ? "home-not-logged-in" : "home-logged-in");
        ThumbSliderFilter.hideMe(false);
        ThumbSlider.init({
            thumbListContainer: "thumbnail-list",
            thumbContainer: "preview-list-thumbnail",
            thumbName: "thumb-horizontal"
        });
        ThumbSlider.hideMe(false);
        $("#sliders").removeClass("hide-this").addClass("active");
        $("#big-slider").addClass("big-slider");
        View.loaderHide();
        $("#content-multi-panel").addClass("hide-this");
        $("#multi-panel").addClass("hide-this");
        $("#epg").addClass("hide-this")
    },
    deInitView: function() {
        TVA.putInnerHTML(document.getElementById("slider-container"), "");
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this").removeClass("active");
        $("#big-slider").removeClass("big-slider");
        Slider.hideMe(true);
        ThumbSliderFilter.hideMe(true);
        ThumbSliderFilter.reset();
        ThumbSlider.hideMe(true);
        if (!View.actualPageIs(Home)) {
            ThumbSlider.reset(false)
        }
        SidePanel.hideMe(true);
        SidePanel.reset();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover)
    },
    setFocus: function() {
        Commons.currentSection = this.classname;
        Slider.setFocus()
    },
    promos: null,
    buildPromos: function(k) {
        Home.promos = k;
        if (View.actualPageIs(Home) == false) {
            return
        }
        if (API.configLoaded == false) {
            setTimeout("Home.buildPromos(Home.promos);", 1000);
            return
        }
        var g = "";
        Slider.stopInterval();
        TVA.putInnerHTML(document.getElementById("slider-container"), g);
        $("#big-slider").removeClass("big-slider-starttup");
        for (var e in k) {
            if (k.hasOwnProperty(e)) {
                var o = k[e];
                var a = DataStore.get(Type.Event, o.event);
                var f = DataStore.get(Type.Program, o.program);
                var l = DataStore.get(Type.Channel, a.channel);
                var d = DataStore.get(Type.Asset, o.asset);
                Home.promos[e]["datalist"] = null;
                if (f.parent) {
                    var m = DataStore.get(Type.Program, f.parent);
                    if (m && m.isGroup === true) {
                        Home.promos[e]["datalist"] = {
                            programId: (f ? f.id : ""),
                            eventId: (a ? a.id : ""),
                            channelId: (a.channel && a.channel["id"] ? a.channel["id"] : ""),
                            parentId: (f ? f.parent : ""),
                            program: m,
                            programNode: f,
                            finfo: {
                                programId: (f ? f.id : ""),
                                assetId: (d ? d.id : ""),
                                eventId: (a ? a.id : "")
                            }
                        }
                    }
                }
                var j = "";
                if (e > 0) {
                    j = "hide-this"
                }
                var c = a.startTime;
                var h = a.endTime;
                var b = "&nbsp;";
                if (f.season) {
                    b = " | T" + f.season;
                    if (f.episodePartial) {
                        b += " Ep. " + f.episodePartial
                    }
                }
                g += "<div id='slider" + e + "' class='info-slide " + j + "' data-eventId='" + o.event + "' data-programId='" + o.program + "'>";
                g += "<div class='big-slider-info' onclick='Slider.moreInfo();'>";
                g += "<span class='channel'>" + l.name + "</span>";
                g += "<h1 class='series'>" + f.title + "</h1>";
                g += "<h2 class='chapter'>" + ((f.type === "Serie" && f.episodeTitle) ? f.episodeTitle : "&nbsp;") + "</h2>";
                g += "<h3 class='description'>" + (f.productionYear ? f.productionYear + " - " : "") + f.type + b + "</h3>";
                g += "<h3 class='schedule'>" + Utils.weekday[c.getDay()] + " " + c.getDate() + " de " + Utils.month[c.getMonth()] + "  " + Utils.checkTimeStr(c.getHours()) + ":" + Utils.checkTimeStr(c.getMinutes()) + " - " + Utils.checkTimeStr(h.getHours()) + ":" + Utils.checkTimeStr(h.getMinutes()) + "</h3>";
                g += "</div>";
                g += "<div class='bg-default'></div>";
                if (o.backgroundUrl != null) {
                    var n = "src='" + API.image_base_url + o.backgroundUrl + "'";
                    if (e > 0) {
                        n = "data-" + n + " id='home-promo-" + e + "' src='resource/general/empty.png' onload='$(this).show();' onerror='$(this).hide();' "
                    } else {
                        n += " onload='Home.loadPromoImg(0);$(this).show();' onerror='Home.loadPromoImg(0);$(this).hide();'  "
                    }
                    g += "<img class='bg-image resized' " + n + " alt='' />"
                } else {
                    g += "<img class='bg-image resized' src='resource/general/empty.png' alt='' onload='$(this).show();' onerror='$(this).hide();' />"
                }
                g += "</div>"
            }
        }
        TVA.putInnerHTML(document.getElementById("slider-container"), g);
        Slider.actualSlide = 0;
        Slider.hideMe(false);
        $("#prev-big-slider").removeClass("hide-this");
        $("#next-big-slider").removeClass("hide-this");
        if (View.actualPage !== PopUp && PopUp.isVisible == false) {
            Slider.setFocus()
        }
        Slider.startInterval()
    },
    loadPromoImg: function(g) {
        try {
            var d = [g, (g + 1)];
            if (g - 1 < 0) {
                d.push(($(".info-slide").length - (g + 1)))
            } else {
                d.push(g - 1)
            }
            for (var c = 0; c < d.length; c++) {
                var b = d[c];
                var f = $("#home-promo-" + b);
                if (f.length == 1 && typeof f.data("src") != "undefined" && f.data("src") != "") {
                    var j = f.data("src");
                    f.data("src", "");
                    f.error(function() {
                        $(this).hide()
                    });
                    f.attr("src", j)
                }
            }
            TVA.invalidate()
        } catch (h) {}
    },
    buildStorefronts: function(e) {
        Header.storeFrontLoaded = true;
        var b, c, a = 0;
        var d = 6;
        for (b = 0; b < e.length && b < d; b++) {
            c = document.getElementById("header" + (4 + b));
            TVA.putInnerHTML(c, e[b].name.toUpperCase());
            c.setAttribute("data-page-idx", b);
            c.setAttribute("data-id", e[b].id);
            c.setAttribute("data-name", e[b].name);
            a = 4 + b + 1
        }
        Header.storeFrontCount = e.length;
        for (b = a; b <= 4 + d - 1; b++) {
            Header.removeElement(b)
        }
        Home.alignDivs()
    },
    alignDivs: function() {},
    keyHandler: function(a) {
        if (Main.keyHistoryMatches(Main.SHORTCUT_NO_HW_BLITTING) == true) {
            var b = Utils.setBlitting(true);
            Alert.show(b == "1" ? TVA.OTT.STRINGS.SLOW_DEVICE_ENABLED : TVA.OTT.STRINGS.FAST_DEVICE_ENABLED)
        }
        if (View.actualFocus == "big-slider") {
            Slider.keyHandler(a)
        } else {
            Slider.startInterval();
            if (View.actualFocus == "filter-thumbnail-list-container") {
                ThumbSliderFilter.keyHandler(a)
            } else {
                if (View.actualFocus == "thumbnail-list") {
                    ThumbSlider.keyHandler(a)
                }
            }
        }
    }
};
var DataSheet = {
    classname: "datasheet",
    details: {
        eventId: null,
        programId: null,
        channelId: null
    },
    playEnabled: false,
    recordingEnabled: 0,
    initView: function() {
        TVA.putInnerHTML(document.getElementById("slider-container"), "");
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        if (DataSheet.details.eventId) {
            API.getDetails("event", DataSheet.details.eventId)
        } else {
            if (DataSheet.details.channelId) {
                API.getProgramDetails(DataSheet.details.programId, DataSheet.details.channelId)
            } else {
                API.getDetails("program", DataSheet.details.programId)
            }
        }
        View.actualFocus = "thumbnail-list";
        Commons.lastTextScroll = 0;
        $("#sliders").removeClass("hide-this").addClass("active");
        $("#big-slider").addClass("big-slider");
        Slider.hideMe(false);
        ThumbSlider.init({
            thumbListContainer: "thumbnail-list",
            thumbContainer: "preview-list-thumbnail",
            thumbName: "thumb-horizontal"
        });
        ThumbSlider.hideMe(false);
        ThumbSliderFilter.hideMe(false);
        DataSheet.setFocus();
        View.loaderHide();
        DataSheet.dsErrorShowed = 0;
        View.showMainPageInfo(this.classname, {
            m: DataSheet.details.parentId || "",
            p: DataSheet.details.programId || "",
            e: DataSheet.details.eventId || "",
            c: DataSheet.details.channelId || "",
            a: DataSheet.details.assetId || ""
        })
    },
    deInitView: function(a) {
        $("#sliders").addClass("hide-this").removeClass("active");
        $("#big-slider").removeClass("big-slider");
        if (typeof a === "undefined" || !a.classname || (a.classname !== "epg" && a.classname !== "datasheet")) {
            EPG.prevFocus = null
        }
        DataStore.cleanRefs();
        Slider.hideMe(true);
        ThumbSliderFilter.hideMe(true);
        ThumbSliderFilter.reset();
        ThumbSlider.hideMe(true);
        ThumbSlider.reset(true);
        SidePanel.hideMe(true);
        SidePanel.reset();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        Footer.setCenter([]);
        DataSheet.dsErrorShowed = 0
    },
    setButtonClick: function() {
        if (View.actualFocus == "filter-thumbnail-list-container") {
            return true
        }
        if (DataSheet.playEnabled) {
            var b = $("#slider" + Slider.actualSlide);
            var a = {
                programId: (b.data("programId") ? b.data("programId") : DataSheet.details.programId),
                eventId: (b.data("eventId") ? b.data("eventId") : DataSheet.details.eventId),
                channelId: (b.data("channelId") ? b.data("channelId") : DataSheet.details.channelId),
                assetId: DataSheet.getAssetId()
            };
            if ((!a.assetId && DataSheet.playEnabled == true && a.channelId) || (a.assetId && DataSheet.details.isLive == true)) {
                API.getChannels("direct", -1, a.channelId)
            } else {
                if (a.assetId) {
                    a.isLive = false;
                    VideoPlayer.setDetails("datasheet", a);
                    View.changeView(VideoPlayer)
                } else {
                    if (DataSheet.dsErrorShowed < 2) {
                        PopMsg.show("error", 34, "DS01");
                        DataSheet.dsErrorShowed++
                    }
                }
            }
        } else {
            if (DataSheet.recordingEnabled > 0) {
                Footer.keyHandler(TVA.tvKey.KEY_RED)
            }
        }
        return false
    },
    setButtonFocus: function() {
        Commons.offFocus(View.actualFocus);
        Commons.setFocus("big-slider");
        Commons.offHover(View.actualHover);
        Commons.setHover("datasheet-verrec-div");
        if (!$("#datasheet-verrec-div").length) {}
    },
    setFocus: function() {
        if (DataSheet.playEnabled || DataSheet.recordingEnabled > 0) {
            DataSheet.setButtonFocus()
        } else {
            ThumbSliderFilter.setFocus();
            Footer.enableLeft()
        }
    },
    setDetails: function(d, a, c, e, b) {
        DataSheet.dsErrorShowed = 0;
        DataSheet.details.programId = d;
        DataSheet.details.eventId = a;
        DataSheet.details.channelId = c;
        DataSheet.details.assetId = e;
        DataSheet.details.isLive = b
    },
    getCastHTMLStrings: function(a) {
        var d = {
            cast: "",
            producer: "",
            creator: ""
        };
        for (var c = 0; c < a.length; c++) {
            var b = DataStore.get(Type.Cast, a[c]);
            var e = b.fullName;
            if (e && typeof e === "string") {
                e = e.replace(/\(([^\)])+\)$/, "");
                switch (b.role) {
                    case 2:
                        d.cast += e + ", ";
                        break;
                    case 6:
                        d.producer += e + ", ";
                        break;
                    case 9:
                        d.creator += e + ", ";
                        break
                }
            }
        }
        d.cast = d.cast.slice(0, -2);
        d.producer = d.producer.slice(0, -2);
        d.creator = d.creator.slice(0, -2);
        return d
    },
    isXXXGroup: function(a, c) {
        var d = parseInt(a.season);
        var b = parseInt(a.episode);
        var e = parseInt(a.episodePartial);
        return (a.type == c) && Utils.isNumber(d) && (d !== 0) && (b === 0) && (e === 0)
    },
    isXXXMaster: function(a, c) {
        var d = parseInt(a.season);
        var b = parseInt(a.episode);
        var e = parseInt(a.episodePartial);
        return (a.type == c) && Utils.isNumber(d) && (d === 0) && (b === 0) && (e === 0)
    },
    isSerieGroup: function(a) {
        return DataSheet.isXXXGroup(a, "Serie")
    },
    isSerieMaster: function(a) {
        return DataSheet.isXXXMaster(a, "Serie")
    },
    haveChapterOrSeason: function(a) {
        var c = parseInt(a.season);
        var b = parseInt(a.episode);
        var d = parseInt(a.episodePartial);
        return (c > 0) || (b > 0) || (d > 0)
    },
    haveMaster: function(a) {
        return (a.master != a.parent)
    },
    build: function(J) {
        var a = DataStore.get(Type.Program, J.program);
        var N = false;
        var D = false;
        var m = false;
        var v = false;
        var r = "";
        var G = "&nbsp;";
        var x = "&nbsp;";
        var L, s;
        if (J.event) {
            N = DataStore.get(Type.Event, J.event);
            D = DataStore.get(Type.Channel, N.channel);
            m = N.startTime;
            v = N.endTime;
            r = J.event;
            x = Utils.weekday[m.getDay()] + " " + m.getDate() + " de " + Utils.month[m.getMonth()] + "  " + Utils.checkTimeStr(m.getHours()) + ":" + Utils.checkTimeStr(m.getMinutes()) + " - " + Utils.checkTimeStr(v.getHours()) + ":" + Utils.checkTimeStr(v.getMinutes())
        } else {
            if (DataSheet.details.channelId) {
                D = DataStore.get(Type.Channel, DataSheet.details.channelId)
            }
        }
        if (D) {
            G = D.name
        }
        var M = "&nbsp;";
        if (a.season) {
            M = " | T" + a.season;
            if (a.episodePartial) {
                M += " Ep. " + a.episodePartial
            }
        }
        var H = new Date().getTime();
        var j = (m && m.getTime() > H);
        var w = (!j && v && v.getTime() >= H);
        var i = 0;
        if (a.usersReview) {
            i = Math.round(a.usersReview)
        }
        var y = DataSheet.isSerieGroup(a);
        var B = DataSheet.isSerieMaster(a);
        var E = DataSheet.haveChapterOrSeason(a);
        var n = DataSheet.haveMaster(a);
        var o = false;
        if (J.asset || DataSheet.details.assetId) {
            o = true
        } else {
            if (y || B) {} else {
                var I = DataSheet.getAssetId();
                if (I) {
                    o = true
                }
            }
        }
        if (w) {
            o = true
        }
        DataSheet.playEnabled = o;
        var O = false;
        if (Main.username !== "") {
            O = true
        }
        var p = 0;
        if (Main.username !== "" && o == false) {
            if (j || w) {
                p = 1
            } else {
                if (DataSheet.details.programId && DataSheet.details.channelId) {
                    p = 2
                }
            }
        }
        if (TVA.OTT.CONFIGDATA && TVA.OTT.CONFIGDATA.recordingDisabled) {
            p = false
        }
        DataSheet.recordingEnabled = p;
        var A = "";
        var k = "data-eventId='" + r + "' data-programId='" + J.program + "' data-assetId='" + J.asset + "' data-channelId='" + DataSheet.details.channelId + "'";
        A += "<div id='slider0' class='info-slide' " + k + " >";
        A += "<div class='ficha-gradient-img'>";
        A += "<div class='ficha-gradient-bg'></div>";
        var l = "onerror='$(this).hide();'";
        if (a.backgroundUrl != null) {
            A += "<img class='bg-image resized' " + l + " src='" + API.image_base_url + a.backgroundUrl + "' alt='' />"
        } else {
            A += "<img class='bg-image resized' " + l + " src='resource/general/empty.png' alt='' />"
        }
        A += "</div>";
        A += "<div class='ficha-gradient-mask'></div>";
        A += "<div class='datasheet-info'>";
        var g = parseInt(a.season);
        var q = parseInt(a.episode);
        if (g > 0 && q <= 0) {
            A += "<div class='season-tab' ><div>T" + g + "</div></div>"
        }
        A += "<span class='channel'>" + G + "</span>";
        A += "<h1 class='series'>" + a.title + "</h1>";
        A += "<h2 class='chapter'>" + ((a.episodeTitle) ? a.episodeTitle : "&nbsp;") + "</h2>";
        var c = a.type;
        if (a.genre) {
            c = c + " - " + a.genre
        }
        A += "<h3 class='description'>" + (a.productionYear ? a.productionYear + " - " : "") + c + M + "</h3>";
        A += "<h3 class='schedule'>" + x + "</h3>";
        A += '<h4 class="user-votes">Votos Usuarios<span class="stars stars' + i + '"></span></h4>';
        A += DataSheet.buildIconHTML(a, N, D);
        A += "</div>";
        A += "<div class='datasheet-data'>";
        A += "<div id='datasheet-description-container' class='scroller'>";
        A += "<div id='datasheet-description' class='datasheet-description'>" + a.synopsis + "</div>";
        A += "</div>";
        A += "<div class='datasheet-cast-div' ><ul id='datasheet-cast' class='datasheet-cast'>";
        var u = false;
        if (o) {
            A += "<div id='datasheet-verrec-div' onmouseover='DataSheet.setButtonFocus();' onclick='DataSheet.setButtonClick();' class='datasheet-ver-div' ></div>"
        } else {
            if (p > 0) {
                var d = "";
                u = true;
                if (m && m.getDay) {
                    d = Utils.weekday[m.getDay()] + "<br/>" + m.getDate() + " de " + Utils.month[m.getMonth()] + "<br/>" + Utils.checkTimeStr(m.getHours()) + ":" + Utils.checkTimeStr(m.getMinutes()) + " - " + Utils.checkTimeStr(v.getHours()) + ":" + Utils.checkTimeStr(v.getMinutes())
                }
                A += "<div id='datasheet-verrec-div' onmouseover='DataSheet.setButtonFocus();' onclick='DataSheet.setButtonClick();' class='datasheet-rec-div' ><div class='datasheet-rec-date' >" + d + "</div></div>"
            }
        }
        if (a.cast) {
            var C = DataSheet.getCastHTMLStrings(a.cast);
            if (C.cast) {
                A += "<li><span class='title'>Actores: </span>" + C.cast + "</li>"
            }
            if (C.producer) {
                A += "<li><span class='title'>Productor: </span>" + C.producer + "</li>"
            }
            if (C.creator) {
                A += "<li><span class='title'>Creador: </span>" + C.creator + "</li>"
            }
        }
        if (a.language) {
            var t = DataStore.get(Type.Language, a.language[0]);
            A += "<li><span class='title'>Idioma original: </span>" + t.name + "</li>"
        }
        if (a.productionCountry) {
            var F = DataStore.get(Type.Country, a.productionCountry[0]);
            A += "<li><span class='title'>País: </span>" + F.name + "</li>"
        }
        A += "</ul></div>";
        A += "</div>";
        A += "<div class='clear'></div>";
        A += "</div>";
        TVA.putInnerHTML(document.getElementById("slider-container"), A);
        if (u == true) {
            $(".schedule").addClass("hide-this")
        } else {
            $(".schedule").removeClass("hide-this")
        }
        var z = false;
        if (Main.username !== "" && o) {
            z = true;
            var h = DataStore.get(Type.Asset, DataSheet.getAssetId());
            if (h && h.type !== "Catchup") {
                z = false
            }
        }
        var K = [];
        K.push({
            text: "Ver",
            className: "enter-button-footer",
            disabled: !o,
            keycode: TVA.tvKey.KEY_ENTER,
            method: function() {
                if (View.actualFocus === "header") {
                    return true
                }
                return DataSheet.setButtonClick()
            }
        });
        if (API.isRecordingDisabled() == false) {
            K.push({
                text: "Grabar",
                className: "red-button-footer",
                disabled: !p,
                keycode: TVA.tvKey.KEY_RED,
                method: function() {
                    if (p) {
                        var P = $("#slider" + Slider.actualSlide);
                        if (P.data("eventId") && (a.parent || a.master) && v.getTime() > H) {
                            PopUp.showMe("recording-chapter", false, "");
                            PopUp.setCallback(DataSheet.recordingChapter)
                        } else {
                            if (P.data("eventId") && DataSheet.recordingEnabled == 2) {
                                PopUp.showMe("recording-serie", false, "");
                                PopUp.setCallback(DataSheet.recordingChapter)
                            } else {
                                DataSheet.recordingChapter(false)
                            }
                        }
                    }
                    return false
                }
            })
        }
        var f = null,
            e;
        if (API.isRecordingDisabled() == false) {
            L = "green-button-footer";
            s = TVA.tvKey.KEY_GREEN;
            if (TVA.device == "ps3") {
                L = "yellow-button-footer";
                s = TVA.tvKey.KEY_YELLOW
            }
            f = {
                text: "Ver + tarde",
                disabled: !z,
                className: L,
                keycode: s,
                method: function() {
                    if (z) {
                        var Q = $("#slider" + Slider.actualSlide);
                        var P = {
                            programId: Q.data("programId"),
                            eventId: Q.data("eventId"),
                            assetId: DataSheet.getAssetId()
                        };
                        if (P.assetId) {
                            API.addMyTVItem("watch-later", P.assetId)
                        }
                    }
                    return false
                }
            }
        }
        L = "blue-button-footer";
        s = TVA.tvKey.KEY_BLUE;
        if (TVA.device == "ps3") {
            L = "green-button-footer";
            s = TVA.tvKey.KEY_GREEN
        }
        e = {
            text: "Votar",
            disabled: !O,
            className: L,
            keycode: s,
            method: function() {
                if (O) {
                    var Q = $("#slider" + Slider.actualSlide).data("programId");
                    if (Q) {
                        var P = DataStore.get(Type.Program, Q);
                        PopUp.setVotingDetails(Q, P.userVote);
                        PopUp.showMe("voting", false, "");
                        View.changeView(PopUp)
                    }
                }
                return false
            }
        };
        if (TVA.device == "ps3") {
            K.push(e);
            if (f != null) {
                K.push(f)
            }
        } else {
            if (f != null) {
                K.push(f)
            }
            K.push(e)
        }
        Footer.setLeft(K);
        Footer.enableLeft();
        if (!DataSheet.details.channelId && D) {
            DataSheet.details.channelId = D.id
        }
        var b = a.parent ? a.parent : a.master;
        if (b && a.parent == a.master && y == true && B == false) {
            b = null
        }
        if (DataSheet.details.eventId) {
            if ((a.type === "Serie" || a.type === "Programa") && b) {
                ThumbSliderFilter.setOptions("datasheet-event-serie");
                API.getSliderContent("catch", b, true)
            } else {
                if (a.type === "Deportes" && b) {
                    ThumbSliderFilter.setOptions("datasheet-event-deportes");
                    API.getSliderContent("catch", b, true)
                } else {
                    ThumbSliderFilter.setOptions("datasheet-event");
                    API.getSliderContent("similar-programs", a.id, false)
                }
            }
            ThumbSliderFilter.hideSeasonsTab(!E || !n)
        } else {
            if (a.isMaster) {
                ThumbSliderFilter.setOptions("datasheet-program-master");
                API.getSliderContent("catch", a.id, a.isMaster);
                ThumbSliderFilter.hideSeasonsTab(!E)
            } else {
                if ((a.type === "Serie" || a.type === "Programa") && (b || y || B)) {
                    ThumbSliderFilter.setOptions("datasheet-program-serie");
                    ThumbSliderFilter.hideSeasonsTab(B || !E);
                    API.getSliderContent("catch", b ? b : a.id, true)
                } else {
                    if (DataSheet.isXXXMaster(a, "Deportes") && a.type === "Deportes") {
                        ThumbSliderFilter.setOptions("datasheet-event-deportes");
                        ThumbSliderFilter.hideSeasonsTab(B || !E);
                        API.getSliderContent("catch", b ? b : a.id, true)
                    } else {
                        ThumbSliderFilter.setOptions("datasheet-program", a.id);
                        API.getSliderContent("similar-programs", a.id, false);
                        ThumbSliderFilter.hideSeasonsTab(!E)
                    }
                }
            }
        }
        DataSheet.setFocus()
    },
    getAssetId: function() {
        var a = $("#slider" + Slider.actualSlide);
        var b = a.data("assetId");
        if (!b || b == "undefined") {
            b = Utils.findAsset(a.data("programId"), a.data("eventId"))
        }
        if (!b || b == "undefined") {
            b = DataSheet.details.assetId
        }
        return b
    },
    buildIconHTML: function(a, d, c) {
        var b = '<div class="item-icons">';
        switch (a.parentalRating) {
            case 7:
                b += '<img src="resource/info-icons/parentalRating-7.png" alt="icons"/>';
                break;
            case 12:
                b += '<img src="resource/info-icons/parentalRating-12.png" alt="icons"/>';
                break;
            case 13:
                b += '<img src="resource/info-icons/parentalRating-13.png" alt="icons"/>';
                break;
            case 16:
                b += '<img src="resource/info-icons/parentalRating-16.png" alt="icons"/>';
                break;
            case 18:
                b += '<img src="resource/info-icons/parentalRating-18.png" alt="icons"/>';
                break;
            case 0:
                b += '<img src="resource/info-icons/parentalRating-todos.png" alt="icons"/>';
                break;
            case 101:
                b += '<img src="resource/info-icons/parentalRating-x.png" alt="icons"/>';
                break;
            case 102:
                b += '<img src="resource/info-icons/parentalRating-infantil-todos.png" alt="icons"/>';
                break
        }
        if (d) {
            if (d.deafSubtitle) {
                b += '<img src="resource/info-icons/deafSubtitle.png" alt="icons"/>'
            }
            if (d.hd) {
                b += '<img src="resource/info-icons/hd.png" alt="icons"/>'
            }
        } else {
            if (c && c.hd === true) {
                b += '<img src="resource/info-icons/hd.png" alt="icons"/>'
            } else {
                b += '<img src="resource/info-icons/sd.png" alt="icons"/>'
            }
        }
        if (d) {
            if (d.repeated) {
                b += '<img src="resource/info-icons/repeated.png" alt="icons"/>'
            }
            if (d.live) {
                b += '<img src="resource/info-icons/live.png" alt="icons"/>'
            }
            if (d.dual) {
                b += '<img src="resource/info-icons/dual.png" alt="icons"/>'
            }
            if (d.blindCommentary) {
                b += '<img src="resource/info-icons/blindCommentary.png" alt="icons"/>'
            }
        }
        b += "</div>";
        return b
    },
    keyHandler: function(b) {
        var c = $("#datasheet-verrec-div");
        if (c.length && c.hasClass("hover") && View.actualFocus !== "big-slider") {
            DataSheet.setButtonFocus();
            View.actualFocus = "big-slider"
        }
        if (View.actualFocus == "big-slider") {
            var a = null;
            if (Main.keyHistoryMatches(Main.SHORTCUT_NO_DRM_1)) {
                a = 1
            } else {
                if (Main.keyHistoryMatches(Main.SHORTCUT_NO_DRM_2)) {
                    a = 2
                } else {
                    if (Main.keyHistoryMatches(Main.SHORTCUT_NO_DRM_DEFAULT)) {
                        a = 0
                    }
                }
            }
            if (Main.switchDRM(a) == true) {
                return
            }
            if (b == TVA.tvKey.KEY_DOWN) {
                ThumbSliderFilter.setFocus();
                Footer.enableLeft()
            } else {
                if (b == TVA.tvKey.KEY_UP) {
                    Header.setFocus();
                    Footer.enableLeft()
                } else {
                    if (b == TVA.tvKey.KEY_ENTER) {
                        DataSheet.setButtonClick()
                    }
                }
            }
        } else {
            if (View.actualFocus == "filter-thumbnail-list-container") {
                if (b == TVA.tvKey.KEY_UP) {
                    if (DataSheet.playEnabled || DataSheet.recordingEnabled > 0) {
                        DataSheet.setFocus()
                    } else {
                        Header.setFocus()
                    }
                    Footer.enableLeft()
                } else {
                    ThumbSliderFilter.keyHandler(b)
                }
            } else {
                if (View.actualFocus == "thumbnail-list") {
                    ThumbSlider.keyHandler(b);
                    if (View.actualFocus == "filter-thumbnail-list-container") {
                        Footer.enableLeft()
                    }
                } else {
                    if (b == TVA.tvKey.KEY_DOWN) {
                        ThumbSliderFilter.setFocus();
                        Footer.enableLeft()
                    }
                }
            }
        }
    },
    recordingChapterFinished: function(a) {
        if (a == false) {
            PopMsg.showMessage("error", PopMsg.getText(10))
        } else {
            DataSheet.recordingChapter(a)
        }
    },
    recordingChapter: function(a) {
        var c = $("#slider" + Slider.actualSlide);
        var b = {
            programId: c.data("programId"),
            eventId: c.data("eventId"),
            assetId: c.data("assetId"),
            channelId: c.data("channelId")
        };
        if (b.eventId && DataSheet.recordingEnabled == 1) {
            API.addMyTVItem("recording", b.eventId, "", a)
        } else {
            if (b.eventId && DataSheet.recordingEnabled == 2) {
                API.addMyTVItem("recording", b.eventId, "", true)
            } else {
                API.addMyTVItem("program-recording", b.programId, b.channelId)
            }
        }
    },
    getExtendedInfo: function(i, C, s, c) {
        var l = "";
        var z = true;
        var w = "";
        var h = true;
        try {
            if (c) {
                var n = c.find(".folder-arrow");
                if (n && n.length && n.is(":visible")) {
                    z = false
                }
                var a = c.data("programId");
                var d = DataStore.get(Type.Program, a);
                var j = d && d.parent ? DataStore.get(Type.Program, d.parent) : null;
                if (j && j != null && j.isGroup == true) {
                    h = false
                }
            }
            if (LeftPanel.mytv && z) {
                var g = DataStore.get(Type.Program, c.data("programId"));
                if (g && g.isGroup == true) {
                    z = false
                } else {
                    if (i && i.isGroup == true) {
                        z = false
                    }
                }
            }
            var f = s ? s.startTime : null;
            var u = s ? s.endTime : null;
            if (f && f.getDay) {
                w = Utils.weekday[f.getDay()] + " " + f.getDate() + " de " + Utils.month[f.getMonth()] + "  " + Utils.checkTimeStr(f.getHours()) + ":" + Utils.checkTimeStr(f.getMinutes());
                if (u && u.getDay) {
                    w += " - " + Utils.checkTimeStr(u.getHours()) + ":" + Utils.checkTimeStr(u.getMinutes())
                }
            }
            var k = "";
            var o = parseInt(i.season);
            if (!isNaN(o) && o > 0) {
                k = "T." + o + "&nbsp;";
                var B = parseInt(i.episodePartial);
                if (!isNaN(B) && B > 0) {
                    k += "E." + B + "&nbsp;"
                }
            }
            var t = i.title;
            var r = "" + i.episodeTitle;
            if (r.toLowerCase().indexOf(t.toLowerCase()) == 0) {
                t = r;
                r = ""
            }
            if (C.logoUrl) {
                l += "<span class='mytv-channel-logo' ><img src='" + API.image_base_url + C.logoUrl + "' ></span>"
            } else {
                l += "<span id='mytv-channel-name' class='channel green'>" + ((C && C.name) ? C.name : "") + "</span>"
            }
            l += "<h1 id='mytv-program-name' class='series'>" + t + "</h1>";
            if (k.length > 0 || r.length > 0) {
                l += "<h3 class='episode'><span class='episodeSeasonChapter' >" + k + "</span>" + r + "</h3>"
            }
            var y = i.type;
            if (i.genre) {
                y = y + " - " + i.genre
            }
            var A = "<h3 class='description'>" + (i.synopsis ? i.synopsis : (i.shortestSynopsis ? i.shortestSynopsis : "")) + "<br/>&nbsp;</h3>";
            var v = "";
            v += "<h3 class='description'>" + (i.productionYear ? i.productionYear + " - " : "") + y + "</h3>";
            var m = 0;
            if (i.usersReview) {
                m = Math.round(i.usersReview)
            }
            v += '<div class="user-votes">Votos Usuarios<span class="stars stars' + m + '"></span></div>';
            v += DataSheet.buildIconHTML(i, s, C);
            v += "<div class='limpiar' ></div>";
            if (z == true && !h) {
                l += v;
                l += A
            } else {
                l += "<div class='limpiar' ></div>";
                l += "<div class='description-frame1' >";
                l += A;
                l += "</div>";
                l += "<div class='description-frame2' >";
                l += v;
                if (i.cast) {
                    var b = DataSheet.getCastHTMLStrings(i.cast);
                    if (b.cast) {
                        l += "<div class='datalist-cast' ><span class='title'>Actores: </span>" + b.cast + "</div>"
                    }
                    if (b.producer) {
                        l += "<div class='datalist-cast' ><span class='title'>Productor: </span>" + b.producer + "</div>"
                    }
                    if (b.creator) {
                        l += "<div class='datalist-cast' ><span class='title'>Creador: </span>" + b.creator + "</div>"
                    }
                }
                if (i.language) {
                    var q = DataStore.get(Type.Language, i.language[0]);
                    l += "<div class='datalist-cast' ><span class='title'>Idioma original: </span>" + q.name + "</div>"
                }
                if (i.productionCountry) {
                    var p = DataStore.get(Type.Country, i.productionCountry[0]);
                    l += "<div class='datalist-cast' ><span class='title'>País: </span>" + p.name + "</div>"
                }
                l += "</div>";
                l += "<div class='limpiar' ></div>"
            }
        } catch (x) {
            console.log("DataSheet::getExtendedInfo:EX:" + x)
        }
        return {
            html: l,
            leaf: z,
            schedule: w
        }
    }
};
var DataList = {
    classname: "datalist",
    currentInfoLoaded: null,
    infoTimeout: null,
    recordings: [],
    info: null,
    focusInfo: null,
    initView: function() {
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        DataList.initFocus = DataList.focusInfo;
        DataList.focusInfo = null;
        DataList.buttonsPosition = 0;
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
            DataList.buttonsPosition = -1
        }
        DataList.playEnabled = false;
        DataList.recordingEnabled = false;
        API.getDataListContent(DataList.info, true);
        var a = $("#left-panel-title");
        var b = DataList.info && DataList.info.program && DataList.info.program.title && DataList.info.program.title != "" ? DataList.info.program.title : DataList.info && DataList.info.programNode ? DataList.info.programNode.title : "";
        a.html(b);
        View.showMainPageInfo(this.classname, {
            m: DataList.initFocus.parentId || (DataList.info ? DataList.info.parentId : ""),
            p: DataList.initFocus.programId || (DataList.info ? DataList.info.programId : ""),
            e: DataList.initFocus.eventId || (DataList.info ? DataList.info.eventId : ""),
            c: DataList.initFocus.channelId || (DataList.info ? DataList.info.channelId : ""),
            a: DataList.initFocus.assetId || (DataList.info ? DataList.info.assetId : "")
        });
        var c = [];
        Footer.enableLeft();
        Footer.setLeft(c);
        LeftPanel.init({
            DataList: true,
            displayItems: 9,
            scrollLimit: 4,
            title: true,
            actualPos: true,
            classC: "side-panel-mytv",
            datalist: true
        });
        LeftPanel.hideMe(false);
        ThumbSlider.hideMe(true);
        $("#content-multi-panel").removeClass("hide-this");
        $("#multi-panel").removeClass("hide-this");
        MidPanel.hideMe(false);
        View.loaderHide();
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this");
        $("#epg").addClass("hide-this")
    },
    setDetails: function(b, a) {
        DataList.info = b;
        if (DataList.info.programNode && DataList.info.program && isFinite(DataList.info.programNode["season"]) && DataList.info.programNode["season"] > 0 && DataList.info.program["title"] && DataList.info.program["title"].indexOf("T.") != 0) {
            DataList.info.program["title"] = "T." + DataList.info.programNode["season"] + " " + DataList.info.program["title"]
        }
        DataList.focusInfo = a
    },
    deInitView: function() {
        $("#multi-panel").addClass("hide-this");
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        TVA.putInnerHTML(document.getElementById("left-panel-list"), "");
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), "");
        LeftPanel.hideMe(true);
        LeftPanel.reset();
        MidPanel.hideMe(true);
        ThumbSlider.hideMe(true);
        ThumbSlider.reset(true);
        SidePanel.hideMe(true);
        SidePanel.reset();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover)
    },
    setFocus: function() {
        LeftPanel.setFocus();
        var k = $("#left-panel-list");
        var b = k.find("li");
        if (DataList.initFocus) {
            var f = null;
            var u = null;
            var h = null;
            var q = DataList.initFocus.assetId;
            var m = DataList.initFocus.eventId;
            var a = DataList.initFocus.programId;
            var r = DataList.initFocus.programId;
            if (m) {
                a = null
            }
            var i = 0,
                e = -1,
                d = -1,
                n = -1;
            if (m || a) {
                b.each(function(v) {
                    if (n < 0 && $(this).data("assetId")) {
                        n = v
                    }
                    if (f !== null) {
                        return
                    }
                    if ((m && $(this).data("eventId") == m) || (!m && a && $(this).data("programId") == a)) {
                        f = $(this).attr("id")
                    }
                    if (q && h == null && $(this).data("assetId") == q) {
                        h = $(this).attr("id");
                        e = i
                    }
                    if (r && u == null && $(this).data("programId") == r) {
                        u = $(this).attr("id");
                        d = i
                    }
                    if (f === null && $(this).is(":visible")) {
                        i++
                    }
                })
            }
        }
        DataList.initFocus = null;
        if (h != null && e > 0 && e < LeftPanel.itemListLength) {
            i = e
        } else {
            if ((i <= 0 || i >= LeftPanel.itemListLength) && u != null && d >= 0 && d < LeftPanel.itemListLength) {
                i = d
            }
        }
        if (i >= LeftPanel.itemListLength) {
            i = 0
        }
        if (i <= 0 && n > 0 && n < LeftPanel.itemListLength) {
            i = n
        }
        if (i > 0) {
            LeftPanel.hideMe(false);
            var j = b.height();
            var o = j * i;
            var t = o;
            var s = k.parent().height();
            var p = k.height() - o;
            if (p < s) {
                o -= (s - p)
            }
            var c = (t - o) / j;
            if (c < LeftPanel.scrollLimit) {
                o -= ((LeftPanel.scrollLimit - c) * j)
            }
            if (o < 0) {
                o = 0
            }
            LeftPanel.actualItem = i;
            LeftPanel.visibleItem = (t - o) / j;
            if (LeftPanel.actualItem >= LeftPanel.itemListLength) {
                LeftPanel.actualItem = 0;
                o = 0
            }
            if (LeftPanel.actualItem > 0) {
                var g = document.getElementById("current-item-left-panel");
                var l = g.innerHTML;
                if (l != "") {
                    TVA.putInnerHTML(g, LeftPanel.actualItem + 1)
                }
            }
            k.css("top", -o)
        }
        LeftPanel.setFocus();
        Footer.enableLeft();
        DataList.checkButtons();
        TVA.invalidate()
    },
    buildLeftPanel: function(j, m) {
        var b = $("#left-panel-title");
        if (b && b.length && b.html().length == 0) {
            if (j && j.length) {
                var g = j[0];
                if (g) {
                    var a = DataStore.get(Type.Program, g.program);
                    if (a && a.title && a.episodeTitle && a.title != a.episodeTitle) {
                        b.html(a.title)
                    }
                }
            }
        }
        var f = false;
        if (m && m.length) {
            f = true
        }
        var h = b.html();
        b.html(h.replace(/^T\.([^ ])+/, ""));
        if (f) {
            if (DataList.info && DataList.info.parentId) {
                DataList.items = m;
                DataList.buildLeftPanelData(m, f);
                DataList.currentID = DataList.info.parentId;
                DataList.appendToLeftPanel(j)
            } else {
                if (j && j.length && j[0]) {
                    var l = j[0];
                    var e = DataStore.get(Type.Program, l.program);
                    for (var d = 0; d < m.length; d++) {
                        var k = m[d];
                        if (k && k.program != e.parent) {
                            j = j.concat(k);
                            f = true
                        }
                    }
                } else {
                    j = m
                }
                DataList.buildLeftPanelData(j, f);
                DataList.setFocus()
            }
        } else {
            DataList.buildLeftPanelData(j, f);
            DataList.setFocus()
        }
    },
    loadNode: function() {
        var b = $($("#left-panel-list").find("li.displayed")[LeftPanel.actualItem]);
        if (b.hasClass("master")) {
            return false
        }
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false && DataList.buttonsPosition == -1) {
            var a = b.find(".folder-arrow");
            if (!a || !a.length || !a.is(":visible")) {
                DataList.moveFocus(1, 1, false);
                return true
            }
        }
        View.loaderShow();
        DataList.currentID = b.data("programId");
        API.getDataListContent({
            parentId: b.data("programId")
        }, false);
        return true
    },
    appendToLeftPanel: function(a) {
        View.loaderHide();
        if (a && a.length) {
            var b = -1;
            for (var c = 0; c < DataList.items.length; c++) {
                var d = DataList.items[c];
                if (d && d.program == DataList.currentID) {
                    b = c;
                    break
                }
            }
            if (b >= 0) {
                DataList.items.splice(b, 1)
            }
            if (a.length == 1) {
                a[0]["expanded"] = true
            }
            DataList.items = DataList.items.concat(a);
            DataList.buildLeftPanelData(DataList.items, DataList.joinByMaster);
            DataList.setFocus()
        }
    },
    buildLeftPanelData: function(m, r) {
        DataList.joinByMaster = (r === true);
        DataList.items = JSON.parse(JSON.stringify(m));
        View.loaderShow();
        try {
            var B = 1;
            var u = "";
            if (m) {
                var p = {};
                for (var J in m) {
                    if (m.hasOwnProperty(J)) {
                        var v = m[J];
                        var a = DataStore.get(Type.Program, v.program);
                        var d = DataStore.get(Type.Asset, v.asset);
                        var L = DataStore.get(Type.Event, v.event);
                        var z = DataStore.get(Type.Channel, L.channel ? L.channel : v.channel);
                        var q = null;
                        var D = "X" + a.id;
                        if (r == true) {
                            D = "X" + (a.master || a.id);
                            var x = parseInt(a.season);
                            if (!isNaN(x) && x > 0) {
                                D = ("0000" + a.season).slice(-4) + "_" + D
                            }
                        } else {
                            v.expanded = true;
                            D = "X"
                        }
                        if (!p[D]) {
                            p[D] = []
                        }
                        var n = a.id;
                        p[D].unshift({
                            id: n,
                            channel: z.id,
                            program: a.id,
                            asset: d.id,
                            event: L ? L.id : null,
                            type: v.iotype,
                            schedule: q,
                            fit: v.fit,
                            expired: v.expired,
                            expanded: (v.expanded === true)
                        })
                    }
                }

                function N(P) {
                    var j = [];
                    for (var e in P) {
                        if (P.hasOwnProperty(e)) {
                            j.push(e)
                        }
                    }
                    j.sort();
                    var Q = [];
                    for (var O = 0; O < j.length; O++) {
                        Q[j[O]] = P[j[O]]
                    }
                    return Q
                }
                try {
                    p = N(p)
                } catch (K) {}
                var l = Mytv.initFocus ? Mytv.initFocus.eventId : null;
                var f = Mytv.initFocus ? Mytv.initFocus.programId : null;
                if (l) {
                    f = null
                }
                var y = false;
                var o = 0;
                for (var I in p) {
                    if (p.hasOwnProperty(I)) {
                        var C = p[I];
                        var E = "";
                        var w = false;
                        for (var H in C) {
                            if (C.hasOwnProperty(H)) {
                                v = C[H];
                                z = DataStore.get(Type.Channel, v.channel);
                                a = DataStore.get(Type.Program, v.program);
                                d = DataStore.get(Type.Asset, v.asset);
                                L = DataStore.get(Type.Event, v.event);
                                if (L.id == "null" || L.id == null) {
                                    L.id = ""
                                }
                                if (d.id == "null" || d.id == null) {
                                    d.id = ""
                                }
                                var g = parseInt(a.season);
                                var s = "";
                                if ((C.length > 1 || v.expanded === true || r == false) && H == 0) {
                                    s = a.title;
                                    if (!isNaN(g) && g > 0) {
                                        s = '<div class="folder-arrow expanded"></div><div class="mytv-season-title" >' + s + '</div><div class="mytv-season-div" >T.' + a.season + "</div>"
                                    } else {
                                        if (r == false) {
                                            s = '<div class="folder-arrow expanded"></div><div class="mytv-season-title" >' + s + "</div>"
                                        }
                                    }
                                    var A = a.id;
                                    if (a.parent) {
                                        A = a.parent
                                    }
                                    w = true;
                                    E += '<li id="left-panel-option' + o + '" class="itemTV master displayed" data-programId="' + A + '" data-channelId="' + z.id + '" data-masterId="' + a.master + '" onmouseover="LeftPanel.hoverTo(' + o + ', -1);" onclick="LeftPanel.click();">' + s + "</li>"
                                }
                                y = true;
                                if (r == true) {
                                    if (C.length == 1 && v.expanded !== true) {
                                        s = a.title;
                                        if (a.episodeTitle) {
                                            var t = "" + a.episodeTitle;
                                            if (t.toLowerCase().indexOf(s.toLowerCase()) == 0) {
                                                s = t
                                            } else {
                                                if (t.length > 0) {
                                                    s += ": " + t
                                                }
                                            }
                                        }
                                        if (!isNaN(g) && g > 0) {
                                            s = '<div class="folder-arrow folder-arrow-visible"></div><div class="mytv-season-title" >' + s + '</div><div class="mytv-season-div" >T.' + a.season + "</div>"
                                        }
                                        E += '<li id="left-panel-option' + o + '" class="itemTV displayed" data-itemId="' + v.id + '" data-eventId="' + L.id + '" data-programId="' + a.id + '" data-assetId="' + d.id + '" data-channelId="' + z.id + '" data-masterId="' + a.master + '" onmouseover="LeftPanel.hoverTo(' + o + ', -1);" onclick="LeftPanel.click();">' + s + "</li>"
                                    } else {
                                        s = a.episodeTitle;
                                        E += '<li id="child-panel-option' + o + "-" + H + '" class="itemTV child-item hide-this left-panel-option' + o + '" data-itemId="' + v.id + '" data-eventId="' + L.id + '" data-programId="' + a.id + '" data-assetId="' + d.id + '" data-channelId="' + z.id + '" data-masterId="' + a.master + '" onmouseover="LeftPanel.hoverTo(' + o + ", " + H + ');" onclick="LeftPanel.click();">' + s + "</li>"
                                    }
                                } else {
                                    s = a.title;
                                    if (a.episodeTitle) {
                                        s = a.episodeTitle
                                    } else {
                                        var G = parseInt(a.episodePartial);
                                        if (!isNaN(G) && G > 0) {
                                            s = "E." + G
                                        }
                                    }
                                    var c = "left";
                                    var M = o;
                                    var b = "LeftPanel.hoverTo(" + o + ", -1);";
                                    var h = "";
                                    if (w == true) {
                                        M += "-" + H;
                                        b = "LeftPanel.hoverTo(" + o + ", " + H + ");";
                                        c = "child";
                                        h = "child-item left-panel-option" + o
                                    }
                                    E += '<li id="' + c + "-panel-option" + M + '" class="itemTV ' + h + ' displayed" data-itemId="' + v.id + '" data-eventId="' + L.id + '" data-programId="' + a.id + '" data-assetId="' + d.id + '" data-channelId="' + z.id + '" data-masterId="' + a.master + '" onmouseover="' + b + '" onclick="LeftPanel.click();">' + s + "</li>"
                                }
                            }
                        }
                        if (y == true) {
                            E = E.replace(/hide\-this/g, "displayed")
                        }
                        u += E;
                        E = "";
                        y = false;
                        o++
                    }
                }
            } else {
                B = "";
                PopMsg.show("info", 44)
            }
            TVA.putInnerHTML(document.getElementById("left-panel-list"), u);
            $("#left-panel-actual-pos").show();
            TVA.putInnerHTML(document.getElementById("current-item-left-panel"), B)
        } catch (F) {}
        View.loaderHide()
    },
    recAsset: function(d) {
        if (DataList.buttonsPosition != 0 && d !== true) {
            return false
        }
        var e = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
        var g = e.data("programId");
        var a = DataStore.get(Type.Program, g);
        var f = DataStore.get(Type.Event, e.data("eventId"));
        var h = f.endTime;
        var c = Utils.now();
        var b = e.data("assetId");
        b = !(b == "null" || b == "" || b == null);
        DataSheet.setDetails(DataList.info.programId, DataList.info.eventId, DataList.info.channelId, e.data("assetId"), false);
        if (!b && e.data("eventId") && (a.parent || a.master)) {
            PopUp.showMe("recording-chapter", false, "");
            PopUp.setCallback((h.getTime() > c) ? DataList.recordingChapter : DataList.recordingChapterFinished)
        } else {
            if (!b && h && h.getTime && h.getTime() > c) {
                DataList.recordingChapter(false)
            } else {
                DataList.recordingChapter(true)
            }
        }
        return true
    },
    recordingChapterFinished: function(a) {
        if (a == false) {
            PopMsg.showMessage("error", PopMsg.getText(10))
        } else {
            DataList.recordingChapter(a)
        }
    },
    recordingChapter: function(a) {
        var c = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
        var b = {
            programId: c.data("programId"),
            eventId: c.data("eventId"),
            assetId: c.data("assetId"),
            channelId: c.data("channelId")
        };
        if (b.eventId) {
            API.addMyTVItem("recording", b.eventId, "", a)
        } else {
            API.addMyTVItem("program-recording", b.programId, b.channelId)
        }
    },
    playAsset: function() {
        if (DataList.buttonsPosition != 0) {
            return false
        }
        try {
            var b = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
            var d = b.data("assetId");
            if (!d || d == "undefined") {
                d = Utils.findAsset(b.data("programId"), b.data("eventId"))
            }
            var a = {
                programId: b.data("programId"),
                eventId: b.data("eventId"),
                assetId: d
            };
            if (a.assetId) {
                DataList.focusInfo = {
                    eventId: b.data("eventId"),
                    programId: b.data("programId"),
                    channelId: b.data("channelId")
                };
                a.isLive = false;
                VideoPlayer.setDetails("datasheet", a);
                View.changeView(VideoPlayer);
                return true
            }
        } catch (c) {}
        return false
    },
    checkRecordingEnabled: function(c) {
        var f = false;
        try {
            var a = DataStore.get(Type.Event, c.data("eventId"));
            var d = a.startTime;
            var g = a.endTime;
            var b = Utils.now();
            var j = (d && d.getTime && d.getTime() > b);
            var h = (!j && g && g.getTime() >= b);
            if (Main.username !== "") {
                if (j || h) {
                    f = true
                } else {
                    if (DataSheet.info.programId && DataList.info.channelId) {
                        f = true
                    }
                }
            }
        } catch (i) {}
        DataList.recordingEnabled = f
    },
    buttonsPosition: 0,
    getButtons: function(c, h) {
        DataList.buttonsPosition = 0;
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
            DataList.buttonsPosition = -1
        }
        DataList.playEnabled = false;
        DataList.recordingEnabled = false;
        var g = false;
        if (c.hasClass("master")) {
            g = true
        } else {
            var b = c.find(".folder-arrow");
            if (b && b.length && b.is(":visible")) {
                g = true
            }
        }
        var f = "";
        var d = "";
        if (h.schedule && h.schedule != "") {
            d += "<div class='datalist-rec-date datalist-rec-date-on' >" + h.schedule + "</div>"
        }
        var i = c.data("assetId");
        var a = c.data("eventId");
        if (i) {
            var e = DataStore.get(Type.Asset, i);
            if (e) {
                f += "<span class='mytv-button mytv-button-1 mytv-button-play' onmouseover='DataList.moveFocus(0,1,true);' onclick='DataList.clickButton(1);' ><img src='./resource/ficha/ver-ahora-on.png' /></span>";
                DataList.playEnabled = true
            } else {
                DataList.checkRecordingEnabled(c);
                f += d + "<span class='mytv-button mytv-button-1 mytv-button-rec' onmouseover='DataList.moveFocus(0,1,true);' onclick='DataList.clickButton(1);' ><img src='./resource/ficha/grabar-on.png' /></span>"
            }
        } else {
            DataList.checkRecordingEnabled(c);
            f += d + "<span class='mytv-button mytv-button-1 mytv-button-rec' onmouseover='DataList.moveFocus(0,1,true);' onclick='DataList.clickButton(1);' ><img src='./resource/ficha/grabar-on.png' /></span>"
        }
        if (g || TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
            DataList.buttonsPosition = -1;
            f = f.replace("-on.png", "-off.png");
            if (g) {
                f = f.replace("class='", "class='mytv-button-master ");
                f = f.replace("grabar-", "grabar-serie-")
            }
            f = f.replace("datalist-rec-date-on", "")
        }
        DataList.checkButtons();
        return '<span class="mytv-buttons">' + f + "</span>"
    },
    buildMiddlePanel: function(o) {
        var d = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
        var b = d.data("programId");
        var h = DataStore.get(Type.Program, b);
        var s = DataStore.get(Type.Channel, d.data("channelId"));
        var k = d.data("eventId");
        var m = DataStore.get(Type.Event, ((k == "" || k == null || k == "null" || !k) ? o.event : d.data("eventId")));
        var i = DataSheet.getExtendedInfo(h, s, m, d);
        var j = i.html;
        j += DataList.getButtons(d, i, h, s);
        var a = $("#middle-preview-panel");
        a.addClass("datalist").removeClass("mytvdata");
        var q = a.find(".info");
        if (q && q.length) {
            q.html(j);
            var c = a.find(".bg-image");
            var r = c.attr("src");
            var e = h.listBgUrl ? API.image_base_url + h.listBgUrl : "./resource/general/generic-container.jpg";
            if (e != r) {
                c.attr("src", e)
            }
        } else {
            j = "<div class='info'>" + j + "</div>";
            if (h.listBgUrl) {
                j += "<img class='bg-image' src='" + API.image_base_url + h.listBgUrl + "' onerror=\"this.onerror=null;this.src='./resource/general/generic-container.jpg'\"  alt=''>"
            } else {
                j += "<img class='bg-image' src='./resource/general/generic-container.jpg'  alt=''>"
            }
            j += "<div class='bg-mask'></div>";
            TVA.putInnerHTML(document.getElementById("middle-preview-panel"), j)
        }
        TVA.invalidate();
        if (i.leaf == false) {
            var g = $(".description-frame1").height();
            var f = $(".description-frame2").height();
            var n = $(".mytv-buttons");
            var p = n.height();
            if (n.length == 1) {
                p = 75
            }
            if (p > 0) {
                var l = f - g;
                if (l > p) {
                    l = p
                } else {
                    if (l < 0) {
                        l = 0
                    }
                }
                if (p > 0) {
                    n.css("marginTop", "-" + l + "px")
                }
            }
        }
    },
    loadInfo: function(a) {
        if (a) {
            DataList.currentInfoLoaded = a;
            API.getMyTVProgramDetails(a, true)
        }
    },
    keyHandler: function(a) {
        if (View.actualFocus == "left-panel") {
            LeftPanel.keyHandler(a)
        }
    },
    setStatus: function(a, e) {
        if (a) {
            var d = a.find("img");
            if (d && d.length) {
                var g = d.attr("src");
                var c = g;
                if (e == true) {
                    g = g.replace("-off", "-on")
                } else {
                    g = g.replace("-on", "-off")
                }
                if (g != c) {
                    d.attr("src", g)
                }
                if (g.indexOf("grabar") > 0) {
                    var f = $(".datalist-rec-date");
                    if (e) {
                        f.addClass("datalist-rec-date-on")
                    } else {
                        f.removeClass("datalist-rec-date-on")
                    }
                }
            }
        }
    },
    moveFocus: function(c, g, b) {
        try {
            if (c == 0 && DataList.buttonsPosition == -1 && b !== true) {
                return
            }
            var j = $(".mytv-button-1");
            var i = $(".mytv-button-2");
            if (!j.length) {
                return
            }
            var d = j.html();
            var a = i && i.length ? i.html() : "";
            var h = j.hasClass("mytv-button-master");
            if (c < 0 || c > 0) {
                if (h || TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
                    DataList.buttonsPosition += c;
                    if (DataList.buttonsPosition <= -2) {
                        DataList.buttonsPosition = (a == "") ? 0 : 1
                    } else {
                        if (DataList.buttonsPosition >= 2) {
                            DataList.buttonsPosition = -1
                        }
                    }
                    if (a == "" && DataList.buttonsPosition >= 1) {
                        DataList.buttonsPosition = -1
                    }
                    switch (DataList.buttonsPosition) {
                        case -1:
                            DataList.setStatus(j, false);
                            DataList.setStatus(i, false);
                            break;
                        case 0:
                            DataList.setStatus(j, true);
                            DataList.setStatus(i, false);
                            break;
                        case 1:
                            DataList.setStatus(j, false);
                            DataList.setStatus(i, true);
                            break
                    }
                } else {
                    if (d.indexOf("-on") > 0 && a != "") {
                        DataList.setStatus(j, false);
                        DataList.setStatus(i, true);
                        DataList.buttonsPosition = 1
                    } else {
                        DataList.setStatus(j, true);
                        DataList.setStatus(i, false);
                        DataList.buttonsPosition = 0
                    }
                }
            } else {
                if (g > 0 && g < 3) {
                    if (g == 2 && a != "") {
                        DataList.setStatus(j, false);
                        DataList.setStatus(i, true);
                        DataList.buttonsPosition = 1
                    } else {
                        DataList.setStatus(j, true);
                        DataList.setStatus(i, false);
                        DataList.buttonsPosition = 0
                    }
                } else {
                    if (g == -1 && (h || TVA.OTT.LIST_FOCUS_OVER_PLAY == false)) {
                        DataList.setStatus(j, false);
                        DataList.setStatus(i, false);
                        Mytv.buttonsPosition = -1
                    }
                }
            }
            DataList.checkButtons()
        } catch (f) {}
    },
    checkButtons: function() {
        var d = [];
        var b = (DataList.playEnabled == true && DataList.buttonsPosition == 0);
        if (b == true) {
            d.push({
                text: "Ver",
                className: "enter-button-footer",
                keycode: TVA.tvKey.KEY_ENTER,
                method: function() {
                    if (View.actualFocus === "header") {
                        return true
                    }
                    DataList.clickButton((DataList.playEnabled == true && DataList.buttonsPosition <= 0) ? 1 : 3);
                    return false
                }
            })
        }
        d.push({
            text: "Votar",
            className: "one-button-footer",
            keycode: TVA.tvKey.KEY_1,
            method: function() {
                DataList.clickButton(3);
                return false
            }
        });
        var j = b;
        var l = false;
        var f = $("#left-panel-list").find("li.displayed");
        var a = f.eq(LeftPanel.actualItem);
        DataList.assetId = "";
        if (a) {
            var g = a.data("programId");
            var e = DataStore.get(Type.Program, g);
            if (e && (e.parent || e.master)) {
                j = true
            } else {
                if (e) {
                    var k = $(f[LeftPanel.actualItem]);
                    if (k.hasClass("master")) {
                        j = true
                    }
                }
            }
            if (Main.username !== "" && b) {
                l = true;
                var c = DataStore.get(Type.Asset, a.data("assetId"));
                if (c && c.type !== "Catchup") {
                    l = false
                } else {
                    DataList.assetId = c.id
                }
            }
        }
        if (j) {
            if (API.isRecordingDisabled() == false) {
                d.push({
                    text: "Grabar",
                    className: "red-button-footer",
                    keycode: TVA.tvKey.KEY_RED,
                    disabled: l,
                    method: function() {
                        DataList.recAsset(true);
                        return false
                    }
                })
            }
        }
        var i = "green-button-footer";
        var h = TVA.tvKey.KEY_GREEN;
        if (TVA.device == "ps3") {
            i = "yellow-button-footer";
            h = TVA.tvKey.KEY_YELLOW
        }
        if (API.isRecordingDisabled() == false) {
            d.push({
                text: "Ver + tarde",
                className: i,
                keycode: h,
                disabled: !l,
                method: function() {
                    if (DataList.assetId && DataList.assetId != "") {
                        API.addMyTVItem("watch-later", DataList.assetId)
                    }
                    return false
                }
            })
        }
        Footer.setLeft(d)
    },
    clickButton: function(d) {
        DataList.moveFocus(0, d, true);
        if (d == 3) {
            var c = $($("#left-panel-list").find("li.displayed")[LeftPanel.actualItem]);
            var b = c.data("programId");
            if (b) {
                var a = DataStore.get(Type.Program, b);
                PopUp.setVotingDetails(b, a.userVote);
                PopUp.showMe("voting", false, "");
                View.changeView(PopUp)
            }
            return
        }
        LeftPanel.keyHandler(TVA.tvKey.KEY_ENTER)
    }
};
var Mytv = {
    classname: "mytv",
    type: "recordings",
    currentInfoLoaded: null,
    infoTimeout: null,
    recordings: [],
    initView: function() {
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        Mytv.initFocus = Mytv.focusInfo;
        Mytv.focusInfo = null;
        Mytv.buttonsPosition = 0;
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
            Mytv.buttonsPosition = -1
        }
        Mytv.playEnabled = false;
        Header.actualPage = 3;
        API.getMyTVContent(Mytv.type);
        var a = $("#left-panel-title");
        if (Mytv.type == "watch-later") {
            a.html("Ver más tarde")
        } else {
            if (Mytv.type == "recordings") {
                a.html("Mis Grabaciones")
            } else {
                if (Mytv.type == "pending-recordings") {
                    a.html("Pendientes")
                }
            }
        }
        var b = [];
        b.push({
            text: "Grabaciones",
            className: "red-button-footer",
            keycode: TVA.tvKey.KEY_RED,
            method: function() {
                var c = "recordings";
                if (Mytv.type != c) {
                    Mytv.type = c;
                    View.loaderShow();
                    Mytv.initView()
                }
                return false
            }
        });
        b.push({
            text: "Pendientes",
            className: "green-button-footer",
            keycode: TVA.tvKey.KEY_GREEN,
            method: function() {
                var c = "pending-recordings";
                if (Mytv.type != c) {
                    Mytv.type = c;
                    View.loaderShow();
                    Mytv.initView()
                }
                return false
            }
        });
        b.push({
            text: "Más tarde",
            className: "yellow-button-footer",
            keycode: TVA.tvKey.KEY_YELLOW,
            method: function() {
                var c = "watch-later";
                if (Mytv.type != c) {
                    Mytv.type = c;
                    View.loaderShow();
                    Mytv.initView()
                }
                return false
            }
        });
        b.push({
            text: "Ver",
            className: "enter-button-footer",
            disabled: true,
            keycode: TVA.tvKey.KEY_ENTER,
            method: function() {
                if (View.actualFocus === "header") {
                    return true
                }
                Mytv.clickButton((Mytv.playEnabled == true && Mytv.buttonsPosition == 0) ? 1 : 2);
                return false
            }
        });
        b.push({
            text: "Ficha",
            className: "one-button-footer",
            keycode: TVA.tvKey.KEY_1,
            method: function() {
                LeftPanel.click(TVA.tvKey.KEY_1);
                return false
            }
        });
        b.push({
            text: "Borrar",
            className: "two-button-footer",
            keycode: TVA.tvKey.KEY_2,
            method: function() {
                var e = $("#left-panel-list").find("li.displayed");
                var g = e.eq(LeftPanel.actualItem);
                var c = null;
                var f = null;
                if (LeftPanel.actualItem > 0) {
                    c = e.eq(LeftPanel.actualItem - 1);
                    if (c && c.attr("class").indexOf("master") >= 0 && LeftPanel.actualItem < LeftPanel.itemListLength - 1) {
                        f = e.eq(LeftPanel.actualItem + 1);
                        if (f.attr("class").indexOf("master") < 0) {
                            c = f
                        }
                    }
                } else {
                    if (LeftPanel.actualItem < LeftPanel.itemListLength - 1) {
                        c = e.eq(LeftPanel.actualItem + 1);
                        if (c && c.attr("class").indexOf("master") >= 0 && LeftPanel.actualItem > 0) {
                            f = e.eq(LeftPanel.actualItem - 1);
                            if (f.attr("class").indexOf("master") < 0) {
                                c = f
                            }
                        }
                    }
                }
                if (!LeftPanel.checkMaster(g)) {
                    var i = "";
                    switch (Mytv.type) {
                        case "recordings":
                            i = "¿Seguro que quieres eliminar la grabación?";
                            break;
                        case "pending-recordings":
                            i = "¿Seguro que quieres cancelar la grabación?";
                            var h = DataStore.get(Type.Schedule, g.data("itemId"));
                            if (h && h.iotype == "ScheduleProgram") {
                                var d = DataStore.get(Type.Program, g.data("programId"));
                                if (d && d.type == "Serie") {
                                    i = "¿Seguro que quieres cancelar";
                                    if (d.season > 0 && d.episode <= 0) {
                                        i += " la Temporada " + d.season + " de"
                                    }
                                    i += ' "' + d.title + '" ?'
                                }
                            }
                            break;
                        case "watch-later":
                            i = "¿Seguro que quieres eliminar el item?";
                            break;
                        default:
                            return true
                    }
                    PopUp.showMe("delete", false, i);
                    PopUp.setCallback(function(j) {
                        if (j) {
                            var k = g.data("itemId");
                            if (c) {
                                Mytv.focusInfo = {
                                    eventId: c.data("eventId"),
                                    programId: c.data("programId")
                                }
                            }
                            API.deleteMyTVItem(Mytv.type, k)
                        } else {
                            Mytv.focusInfo = null
                        }
                    });
                    View.changeView(PopUp)
                }
                return false
            }
        });
        Footer.enableLeft();
        Footer.setLeft(b);
        LeftPanel.init({
            mytv: true,
            displayItems: 9,
            scrollLimit: 4,
            title: true,
            actualPos: true,
            classC: "side-panel-mytv"
        });
        LeftPanel.hideMe(false);
        ThumbSlider.init({
            thumbListContainer: "small-slider-vertical",
            thumbContainer: "preview-list-thumbnail-right-panel",
            thumbName: "thumb-vertical",
            vertical: true
        });
        ThumbSlider.hideMe(true);
        $("#content-multi-panel").removeClass("hide-this");
        $("#multi-panel").removeClass("hide-this");
        MidPanel.hideMe(false);
        View.loaderHide();
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this");
        $("#epg").addClass("hide-this");
        View.showMainPageInfo(this.classname, Mytv.type)
    },
    deInitView: function() {
        $("#multi-panel").addClass("hide-this");
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        TVA.putInnerHTML(document.getElementById("left-panel-list"), "");
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), "");
        LeftPanel.hideMe(true);
        LeftPanel.reset();
        MidPanel.hideMe(true);
        ThumbSlider.hideMe(true);
        ThumbSlider.reset(true);
        SidePanel.hideMe(true);
        SidePanel.reset();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover)
    },
    setFocus: function() {
        LeftPanel.setFocus();
        var f = $("#left-panel-list");
        var l = f.find("li");
        if (Mytv.initFocus) {
            var c = null;
            var a = Mytv.initFocus.eventId;
            var h = Mytv.initFocus.programId;
            if (a) {
                h = null
            }
            var m = 0;
            if (a || h) {
                l.each(function() {
                    if (c !== null) {
                        return
                    }
                    if ((a && $(this).data("eventId") == a) || (!a && h && $(this).data("programId") == h)) {
                        c = $(this).attr("id")
                    }
                    if (c === null && $(this).is(":visible")) {
                        m++
                    }
                })
            }
        }
        Mytv.initFocus = null;
        if (m > 0) {
            LeftPanel.hideMe(false);
            var e = l.height();
            var j = e * m;
            var d = j;
            var k = f.parent().height();
            var g = f.height() - j;
            if (g < k) {
                j -= (k - g)
            }
            var b = (d - j) / e;
            if (b < LeftPanel.scrollLimit) {
                j -= ((LeftPanel.scrollLimit - b) * e)
            }
            if (j < 0) {
                j = 0
            }
            LeftPanel.actualItem = m;
            LeftPanel.visibleItem = (d - j) / e;
            if (LeftPanel.actualItem > 0) {
                var i = document.getElementById("current-item-left-panel");
                var n = i.innerHTML;
                if (n != "") {
                    TVA.putInnerHTML(i, LeftPanel.actualItem + 1)
                }
            }
            f.css("top", -j)
        }
        LeftPanel.setFocus();
        TVA.invalidate()
    },
    buildLeftPanel: function(q) {
        View.loaderShow();
        try {
            var d = 1;
            var l = "";
            if (q) {
                var D = {};
                for (var B in q) {
                    if (q.hasOwnProperty(B)) {
                        var E = q[B];
                        var e, n, H, z;
                        if ((E.iotype === "Recording") || (E.iotype === "RecordingProgram") || (E.iotype === "PendingRecording") || (E.iotype === "YouMissedIt")) {
                            e = DataStore.get(Type.Program, E.program);
                            n = DataStore.get(Type.Asset, E.asset);
                            z = DataStore.get(Type.Event, E.event);
                            H = DataStore.get(Type.Channel, z.channel ? z.channel : E.channel)
                        } else {
                            n = DataStore.get(Type.Asset, E.asset);
                            e = DataStore.get(Type.Program, n.program);
                            H = DataStore.get(Type.Channel, n.channel ? n.channel : E.channel)
                        }
                        var C = null;
                        if (Mytv.type == "pending-recordings" && E.schedule) {
                            C = DataStore.get(Type.Schedule, E.schedule)
                        }
                        var u = "X" + (e.master || e.id);
                        if (E.iotype === "PendingRecording") {
                            u = "X" + e.id
                        }
                        var s = parseInt(e.season);
                        if (!isNaN(s) && s > 0) {
                            u += "_" + e.season
                        }
                        if (!D[u]) {
                            D[u] = []
                        }
                        var m = E.id;
                        if (E.iotype === "PendingRecording") {
                            m = E.schedule
                        }
                        if ((Mytv.type == "watch-later") || (Mytv.type == "recordings")) {
                            if ((n.id === null) && (Mytv.type == "watch-later")) {
                                continue
                            }
                            if ((n.id === null) && ((Mytv.type == "recordings") && (E.fit === true) && (E.expired === false))) {
                                continue
                            }
                        }
                        D[u].unshift({
                            id: m,
                            channel: H.id,
                            program: e.id,
                            asset: n.id,
                            event: z ? z.id : null,
                            type: E.iotype,
                            schedule: C,
                            fit: E.fit,
                            expired: E.expired
                        });
                        var c = e.id;
                        var g = 0;
                        if (C) {
                            g = C.usagePercent
                        }
                        Mytv.recordings[c] = {
                            fit: E.fit,
                            expired: E.expired,
                            usagePercent: g
                        }
                    }
                }
                var p = Mytv.initFocus ? Mytv.initFocus.eventId : null;
                var b = Mytv.initFocus ? Mytv.initFocus.programId : null;
                if (p) {
                    b = null
                }
                var F = false;
                var y = 0;
                var o = "",
                    f = "";
                for (var x in D) {
                    if (D.hasOwnProperty(x)) {
                        var h = D[x];
                        var a = "";
                        for (var w in h) {
                            if (h.hasOwnProperty(w)) {
                                E = h[w];
                                H = DataStore.get(Type.Channel, E.channel);
                                e = DataStore.get(Type.Program, E.program);
                                n = DataStore.get(Type.Asset, E.asset);
                                z = DataStore.get(Type.Event, E.event);
                                if (E.schedule && E.schedule.usagePercent) {
                                    if (E.schedule.usagePercent > 100) {
                                        o = " usage-gt-100"
                                    } else {
                                        o = ""
                                    }
                                } else {
                                    o = ""
                                }
                                if (Mytv.type == "pending-recordings") {
                                    f = " "
                                } else {
                                    if ((E.type == "Recording" || E.type == "WatchLater" || E.type == "RecordingProgram") && ((E.fit == false) || (E.expired == true))) {
                                        f = " unfitorexpired"
                                    } else {
                                        f = " "
                                    }
                                }
                                var t = parseInt(e.season);
                                var A = "";
                                if (h.length > 1 && w == 0) {
                                    A = e.title;
                                    if (!isNaN(t) && t > 0) {
                                        A = '<div class="folder-arrow"></div><div class="mytv-season-title" >' + A + '</div><div class="mytv-season-div" >T.' + e.season + "</div>"
                                    }
                                    a += '<li id="left-panel-option' + y + '" class="itemTV master displayed' + o + f + '" data-programId="' + (e.master ? e.master : e.id) + '" data-channelId="' + H.id + '" data-masterId="' + e.master + '" onmouseover="LeftPanel.hoverTo(' + y + ', -1);" onclick="LeftPanel.click();"><div class="folder-arrow"></div>' + A + "</li>"
                                }
                                if ((p && z.id == p) || (!p && b && e.id == b)) {
                                    F = true
                                }
                                if (h.length == 1) {
                                    A = e.title;
                                    if (e.episodeTitle) {
                                        var v = "" + e.episodeTitle;
                                        if (v.toLowerCase().indexOf(A.toLowerCase()) == 0) {
                                            A = v
                                        } else {
                                            if (v.length > 0) {
                                                A += ": " + v
                                            }
                                        }
                                    }
                                    if (!isNaN(t) && t > 0) {
                                        A = '<div class="folder-arrow"></div><div class="mytv-season-title" >' + A + '</div><div class="mytv-season-div" >T.' + e.season + "</div>"
                                    }
                                    a += '<li id="left-panel-option' + y + '" class="itemTV displayed' + o + f + '" data-itemId="' + E.id + '" data-eventId="' + z.id + '" data-programId="' + e.id + '" data-assetId="' + n.id + '" data-channelId="' + H.id + '" data-masterId="' + e.master + '" onmouseover="LeftPanel.hoverTo(' + y + ', -1);" onclick="LeftPanel.click();">' + A + "</li>"
                                } else {
                                    A = e.episodeTitle;
                                    if (E.type == "PendingRecording") {
                                        A = e.title + " T." + e.season
                                    } else {
                                        if (E.type == "Recording" && e.season) {
                                            var G = parseInt(e.episodePartial);
                                            if (!isNaN(G) && G > 0) {
                                                A = "E." + G + "&nbsp;" + A
                                            }
                                        }
                                    }
                                    a += '<li id="child-panel-option' + y + "-" + w + '" class="itemTV child-item hide-this left-panel-option' + y + "" + o + f + '" data-itemId="' + E.id + '" data-eventId="' + z.id + '" data-programId="' + e.id + '" data-assetId="' + n.id + '" data-channelId="' + H.id + '" data-masterId="' + e.master + '" onmouseover="LeftPanel.hoverTo(' + y + ", " + w + ');" onclick="LeftPanel.click();">' + A + "</li>"
                                }
                            }
                        }
                        if (F == true) {
                            a = a.replace(/hide\-this/g, "displayed")
                        }
                        l += a;
                        a = "";
                        F = false;
                        y++
                    }
                }
            } else {
                d = "";
                if (Mytv.type === "recordings") {
                    PopMsg.show("info", 43)
                } else {
                    PopMsg.show("info", 44)
                }
            }
            TVA.putInnerHTML(document.getElementById("left-panel-list"), l);
            $("#left-panel-actual-pos").show();
            TVA.putInnerHTML(document.getElementById("current-item-left-panel"), d);
            Mytv.setFocus()
        } catch (r) {}
        View.loaderHide()
    },
    loadNode: function() {
        var b = $($("#left-panel-list").find("li.displayed")[LeftPanel.actualItem]);
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false && Mytv.buttonsPosition == -1) {
            var a = b.find(".folder-arrow");
            if (!a || !a.length || !a.is(":visible")) {
                Mytv.moveFocus(1, 1, false);
                return true
            }
        }
        return false
    },
    playAsset: function() {
        try {
            if (Mytv.playEnabled == false) {
                return false
            }
            var b = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
            var d = b.data("assetId");
            if (!d || d == "undefined") {
                d = Utils.findAsset(b.data("programId"), b.data("eventId"))
            }
            var a = {
                programId: b.data("programId"),
                eventId: b.data("eventId"),
                assetId: d
            };
            if (a.assetId) {
                Mytv.focusInfo = {
                    eventId: b.data("eventId"),
                    programId: b.data("programId"),
                    channelId: b.data("channelId")
                };
                a.isLive = false;
                VideoPlayer.setDetails("datasheet", a);
                View.changeView(VideoPlayer);
                return true
            }
        } catch (c) {}
        return false
    },
    buttonsPosition: 0,
    getButtons: function(e) {
        Mytv.buttonsPosition = 0;
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
            Mytv.buttonsPosition = -1
        }
        Mytv.playEnabled = false;
        var a = "";
        var f = e.data("assetId");
        var d = e.data("eventId");
        if (f) {
            var c = DataStore.get(Type.Asset, f);
            if (c) {
                a += "<span class='mytv-button mytv-button-1' onmouseover='Mytv.moveFocus(0,1,true);' onclick='Mytv.clickButton(1);' ><img src='./resource/ficha/ver-ahora-on.png' /></span>";
                Mytv.playEnabled = true
            }
        }
        if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
            Mytv.buttonsPosition = -1;
            a = a.replace("-on.png", "-off.png");
            a = a.replace("datalist-rec-date-on", "")
        }
        Mytv.checkButtons();
        var b = "mytv-buttons";
        if (a == "") {
            b += " mytv-buttons-hidden"
        }
        return '<span class="' + b + '">' + a + "</span>"
    },
    buildMiddlePanel: function(a) {
        var e = $("#left-panel-list").find("li.displayed").eq(LeftPanel.actualItem);
        var i = e.data("programId");
        var g = DataStore.get(Type.Program, i);
        var k = DataStore.get(Type.Channel, e.data("channelId"));
        var d = e.data("channelId");
        var c = DataStore.get(Type.Event, ((d == "" || d == null || d == "null" || !d) ? a.event : e.data("eventId")));
        var l = DataSheet.getExtendedInfo(g, k, c, e);
        var h = l.html;
        var j = "";
        var n = false;
        if (Mytv.type == "pending-recordings") {
            j += "<div class='bg-mask'></div>"
        } else {
            if (Mytv.recordings[i] && (Mytv.recordings[i].expired === true || Mytv.recordings[i].fit === false)) {
                n = true;
                j += "<div class='bg-mask-disabled' style='color:white'><div class='disabled-content'><p>El periodo de disponibilidad de esta grabación ha finalizado.<br /><br />Si lo deseas, puedes ampliar el periodo de disponibilidad de las grabaciones ampliando tu suscripción.</p></div></div>"
            } else {
                j += "<div class='bg-mask'></div>"
            }
        }
        if (n == false) {
            h += Mytv.getButtons(e, l, g, k)
        }
        var m = $("#middle-preview-panel");
        m.removeClass("datalist").addClass("mytvdata");
        var f = m.find(".info");
        if (f && f.length) {
            f.html(h);
            var b = m.find(".bg-image");
            var o = b.attr("src");
            var p = g.listBgUrl ? API.image_base_url + g.listBgUrl : "./resource/general/generic-container.jpg";
            if (p != o) {
                b.attr("src", p)
            }
        } else {
            h = "<div class='info'>" + h + "</div>";
            if (g.listBgUrl) {
                h += "<img class='bg-image' src='" + API.image_base_url + g.listBgUrl + "' onerror=\"this.onerror=null;this.src='./resource/general/generic-container.jpg'\"  alt=''>"
            } else {
                h += "<img class='bg-image' src='./resource/general/generic-container.jpg'  alt=''>"
            }
            h += "<div class='bg-mask'></div>";
            TVA.putInnerHTML(document.getElementById("middle-preview-panel"), h)
        }
        m.find(".bg-mask").remove();
        m.find(".bg-mask-disabled").remove();
        m.append(j);
        Mytv.checkButtons();
        TVA.invalidate()
    },
    loadInfo: function(a) {
        if (a) {
            Mytv.currentInfoLoaded = a;
            API.getMyTVProgramDetails(a)
        }
    },
    keyHandler: function(a) {
        if (View.actualFocus == "left-panel") {
            LeftPanel.keyHandler(a)
        }
    },
    setStatus: function(a, e) {
        if (a) {
            var d = a.find("img");
            if (d && d.length) {
                var f = d.attr("src");
                var c = f;
                if (e == true) {
                    f = f.replace("-off", "-on")
                } else {
                    f = f.replace("-on", "-off")
                }
                if (f != c) {
                    d.attr("src", f)
                }
            }
        }
    },
    moveFocus: function(c, i, f) {
        try {
            if (c == 0 && Mytv.buttonsPosition == -1 && f !== true) {
                return
            }
            var b = $(".mytv-button-1");
            var a = $(".mytv-button-2");
            if (!b.length) {
                return
            }
            var d = b.html();
            var h = a && a.length ? a.html() : "";
            if (c < 0 || c > 0) {
                if (TVA.OTT.LIST_FOCUS_OVER_PLAY == false) {
                    Mytv.buttonsPosition += c;
                    if (Mytv.buttonsPosition <= -2) {
                        Mytv.buttonsPosition = (h == "") ? 0 : 1
                    } else {
                        if (Mytv.buttonsPosition >= 2) {
                            Mytv.buttonsPosition = -1
                        }
                    }
                    if (h == "" && Mytv.buttonsPosition >= 1) {
                        Mytv.buttonsPosition = -1
                    }
                    switch (Mytv.buttonsPosition) {
                        case -1:
                            Mytv.setStatus(b, false);
                            Mytv.setStatus(a, false);
                            break;
                        case 0:
                            Mytv.setStatus(b, true);
                            Mytv.setStatus(a, false);
                            break;
                        case 1:
                            Mytv.setStatus(b, false);
                            Mytv.setStatus(a, true);
                            break
                    }
                } else {
                    if (d.indexOf("-on") > 0 && h != "") {
                        Mytv.setStatus(b, false);
                        Mytv.setStatus(a, true);
                        Mytv.buttonsPosition = 1
                    } else {
                        Mytv.setStatus(b, true);
                        Mytv.setStatus(a, false);
                        Mytv.buttonsPosition = 0
                    }
                }
            } else {
                if (i > 0 && i < 3) {
                    if (i == 2 && h != "") {
                        Mytv.setStatus(b, false);
                        Mytv.setStatus(a, true);
                        Mytv.buttonsPosition = 1
                    } else {
                        Mytv.setStatus(b, true);
                        Mytv.setStatus(a, false);
                        Mytv.buttonsPosition = 0
                    }
                } else {
                    if (i == -1 && (TVA.OTT.LIST_FOCUS_OVER_PLAY == false)) {
                        Mytv.setStatus(b, false);
                        Mytv.setStatus(a, false);
                        Mytv.buttonsPosition = -1
                    }
                }
            }
            Mytv.checkButtons()
        } catch (g) {}
    },
    checkButtons: function() {
        if (Mytv.playEnabled == true && Mytv.buttonsPosition == 0 && Footer.leftMethods.hasOwnProperty(TVA.tvKey.KEY_ENTER)) {
            $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).removeClass("disabled")
        } else {
            $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).addClass("disabled")
        }
        var a = $("#middle-preview-panel").find(".mytv-button-verficha");
        if (!a || (a && !a.length)) {
            $(".leftFooterButton-" + TVA.tvKey.KEY_1).html("Votar")
        } else {
            $(".leftFooterButton-" + TVA.tvKey.KEY_1).html("Ficha")
        }
    },
    clickButton: function(d) {
        Mytv.moveFocus(0, d, true);
        if (d == 3) {
            var c = $($("#left-panel-list").find("li.displayed")[LeftPanel.actualItem]);
            var b = c.data("programId");
            if (b) {
                var a = DataStore.get(Type.Program, b);
                PopUp.setVotingDetails(b, a.userVote);
                PopUp.showMe("voting", false, "");
                View.changeView(PopUp)
            }
            return
        }
        LeftPanel.keyHandler(TVA.tvKey.KEY_ENTER)
    }
};
var Storefront = {
    classname: "storefront",
    mode: "123456789",
    pageIdx: -1,
    currentFilters: null,
    currentChannels: null,
    maxChannels: 0,
    actualItem: [],
    actualRow: [],
    nextRow: [],
    itemRow: [],
    gridPanelUnhideTimeout: 0,
    initView: function() {
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        Header.actualPage = Storefront.pageIdx;
        GridPanel.footerLoaded = false;
        var a = [];
        Footer.setLeft(a);
        LeftPanel.init({
            mytv: false,
            displayItems: 12,
            scrollLimit: 6,
            title: false,
            actualPos: false,
            classC: "side-panel-series-movies"
        });
        $("#content-multi-panel").removeClass("hide-this");
        clearTimeout(this.gridPanelUnhideTimeout);
        this.gridPanelUnhideTimeout = 0;
        $("#grid-panel-right").addClass("hide-this");
        Storefront.buildPage(1);
        LeftPanel.hideMe(false);
        Storefront.setFocus();
        $("#multi-panel").removeClass("hide-this");
        View.loaderHide();
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this");
        $("#epg").addClass("hide-this");
        $("#small-slider-vertical").addClass("hide-this");
        View.showMainPageInfo(this.classname, Storefront.mode)
    },
    deInitView: function() {
        clearTimeout(this.gridPanelUnhideTimeout);
        this.gridPanelUnhideTimeout = 0;
        $("#multi-panel").addClass("hide-this");
        TVA.putInnerHTML(document.getElementById("left-panel-list"), "");
        TVA.putInnerHTML(document.getElementById("scroll-grid-container"), "");
        for (var a = 0; a < Storefront.maxChannels; a++) {
            TVA.putInnerHTML(document.getElementById("channel_items_count" + a), "");
            TVA.putInnerHTML(document.getElementById("grid-row-series" + a), "")
        }
        Storefront.maxChannels = 0;
        LeftPanel.hideMe(true);
        LeftPanel.reset();
        GridPanel.hideMe(true);
        GridPanel.reset();
        SidePanel.hideMe(true);
        SidePanel.reset();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        GridPanel.footerLoaded = false
    },
    setFocus: function() {
        GridPanel.footerLoaded = false;
        if (View.actualFocus == "popup-message-container") {
            if (View.lostFocus !== null && View.lostHover !== null) {
                Commons.offFocus(View.actualFocus);
                Commons.offHover(View.actualHover);
                Commons.setFocus(View.lostFocus);
                Commons.setHover(View.lostHover);
                View.lostFocus = null;
                View.lostHover = null;
                return
            }
        }
        LeftPanel.setFocus()
    },
    buildPage: function(d, c, o, p) {
        if (d === 1) {
            Storefront.currentFilters = null;
            Storefront.currentChannels = null;
            API.getStorefrontFilters(Storefront.mode)
        } else {
            if (d === 2) {
                var h = 0;
                if (Storefront.fromHistory == true) {
                    h = parseInt(Storefront.actualItem[Storefront.mode]);
                    if (isNaN(h) || h < 0 || h >= c.length) {
                        h = 0
                    }
                }
                Storefront.currentFilters = c;
                Storefront.buildFilters(c);
                var n = h;
                if (n > 0) {
                    LeftPanel.hideMe(false);
                    var f = $("#left-panel-list");
                    var m = f.find("li");
                    var e = m.height();
                    var k = e * n;
                    var b = k;
                    var l = f.parent().height();
                    var j = f.height() - k;
                    if (j < l) {
                        k -= (l - j)
                    }
                    var a = (b - k) / e;
                    if (a < LeftPanel.scrollLimit) {
                        k -= ((LeftPanel.scrollLimit - a) * e)
                    }
                    if (k < 0) {
                        k = 0
                    }
                    LeftPanel.actualItem = n;
                    LeftPanel.visibleItem = (b - k) / e;
                    f.css("top", -k)
                }
                LeftPanel.setFocus();
                LeftPanel.applyFilter()
            } else {
                if (d === 3) {
                    Storefront.currentChannels = c;
                    Storefront.buildChannels(c);
                    for (var g = 0; g < 3 && g < c.length; g++) {
                        API.getStorefrontContent(Storefront.mode, o, c[g]["id"], g, p);
                        c[g]["id"] = ""
                    }
                    Storefront.args = {
                        htmlIndex: o,
                        param1: c,
                        arg: p
                    }
                } else {
                    if (d === 4) {
                        Storefront.buildPrograms(o, c)
                    }
                }
            }
        }
        TVA.invalidate()
    },
    buildFilters: function(d) {
        var b = "";
        for (var a = 0; a < d.length; a++) {
            var c = d[a];
            b += "<li id='left-panel-option" + a + "' class='displayed' data-filterKey='" + c.op + "' data-filterArg='" + c.arg + "' onmouseover='LeftPanel.hoverTo(" + a + ");' onclick='LeftPanel.keyHandler(TVA.tvKey.KEY_ENTER);'>" + c.text + "</li>"
        }
        TVA.putInnerHTML(document.getElementById("left-panel-list"), b);
        LeftPanel.setFocus()
    },
    buildChannels: function(a) {
        GridPanel.reset();
        var c = "";
        for (var b = 0; b < a.length; b++) {
            var d = a[b];
            c += "<div id='grid-row" + b + "' class='grid-row' onmouseover='$(this).addClass(\"active\");' onmouseout='$(this).removeClass(\"active\");'><span class='prev' onmouseover='GridPanel.setHover(this.id," + b + ");' onmouseout='GridPanel.offHover(this.id," + b + ");' onclick='GridPanel.left(true);'></span><span class='next' onmouseover='GridPanel.setHover(this.id," + b + ");' onmouseout='GridPanel.offHover(this.id," + b + ");' onclick='GridPanel.right(true);'></span><div class='info'><h1 class='channel on-parent-hover-green'>" + d.name + "</h1><div id='channel_items_count" + b + "' class='list-count'></div></div><div class='row-scroller'><ul id='grid-row-series" + b + "' class='grid-row-list'></ul></div></div>"
        }
        TVA.putInnerHTML(document.getElementById("scroll-grid-container"), c)
    },
    buildPrograms: function(j, c) {
        var k = "";
        var m = 0;
        var a = 1;
        if (Storefront.fromHistory == true) {
            m = parseInt(Storefront.actualRow[Storefront.mode]);
            a = parseInt(Storefront.nextRow[Storefront.mode]);
            if (isNaN(m)) {
                m = 0
            }
            if (isNaN(a)) {
                a = 1
            }
        }
        for (var q = 0; q < c.length; q++) {
            var p = c[q];
            var g = DataStore.get("Program", p.program);
            var b = typeof c[q]["asset"] != "undefined" && c[q]["asset"] !== null;
            var h = "";
            var l = "resource/";
            if (g.coverUrl != null) {
                if (j == m || j == a) {
                    h = "<img class='storefront-img-slider' src='" + l + "general/empty.png' data-coverurl='" + API.image_base_url + g.coverUrl + "' alt=''/>"
                } else {
                    h = "<img class='storefront-img-slider' src='" + l + "general/empty.png' data-coverurl='" + API.image_base_url + g.coverUrl + "' alt=''/>"
                }
            } else {
                h = "<img class='storefront-img-slider' src='" + l + "general/empty.png' alt=''/>"
            }
            var d = /T.[0-9]+/gi;
            var u = g.title.replace(d, "");
            var o = (g.season) ? "<div class='show-season'><div class='season'>T." + g.season + "</div></div>" : "";
            var t = '<div class="thumb-icon-list">';
            if (b) {
                t += '<img src="' + l + 'general/empty.png" class="thumb-icon-storefront thumb-icon-storefront-play" />'
            } else {
                if (TVA.OTT.CONFIGDATA.recordingDisabled !== true) {
                    t += '<img src="' + l + 'general/empty.png" class="thumb-icon-storefront thumb-icon-storefront-rec" />'
                }
            }
            t += "</div>";
            k += "<li id='grid-item-" + j + "-" + q + "' data-programId='" + g.id + "' data-channelId='" + p.channel + "' data-eventId='" + (p.event ? p.event : "") + "' data-assetMatchesProgram='" + (p.assetMatchesProgram ? "1" : "0") + "' data-assetId='" + (b ? c[q]["asset"] : "") + "'' onmouseover='GridPanel.hoverTo(" + j + ", " + q + ");' onmouseout='Commons.offHover(this.id);' onclick='GridPanel.moreInfo(TVA.tvKey.KEY_ENTER);'> <div class='bg-default-caratulas'></div>" + h + t + "<h3 class='name'>" + u + "</h3>" + o + "</li>"
        }
        if (c) {
            TVA.putInnerHTML(document.getElementById("channel_items_count" + j), "<span id='channel_current_item" + j + "' class='on-parent-hover-green'>1</span> de " + c.length);
            TVA.putInnerHTML(document.getElementById("grid-row-series" + j), k)
        }
        if (j > Storefront.maxChannels) {
            Storefront.maxChannels = j
        }
        try {
            if (m == j && m < Storefront.currentChannels.length) {
                GridPanel.hideMe(false);
                if (Storefront.fromHistory == true && TVA.OTT.DEVICETYPE != TVA.OTT.DEVICETYPE_BRAVIA) {
                    GridPanel.setFocus();
                    while (m-- > 0) {
                        GridPanel.down(false)
                    }
                    if (Storefront.actualRow[Storefront.mode] < Storefront.nextRow[Storefront.mode]) {
                        var n = $("#grid-panel-right");
                        var r = $("#grid-row" + GridPanel.row);
                        if (r.offset().top - n.offset().top >= r.height()) {
                            GridPanel.down(false);
                            GridPanel.up(false)
                        }
                    }
                    var f = Storefront.itemRow[Storefront.mode];
                    while (f-- > 0) {
                        GridPanel.right()
                    }
                    View.actualFocus = "grid-panel-right";
                    GridPanel.checkImages(true)
                }
            } else {
                this.gridPanelUnhideTimeout = setTimeout("GridPanel.hideMe(false);", 2000)
            }
        } catch (s) {}
        if (Storefront.currentChannels && (j == 0 || j == 1)) {
            GridPanel.checkImages()
        }
    },
    keyHandler: function(a) {
        if (View.actualFocus.indexOf("popup") >= 0) {
            View.actualFocus = "grid-panel-right"
        }
        if (View.actualFocus == "left-panel") {
            if (LeftPanel.keyHandler(a) == true) {
                Storefront.fromHistory = false
            }
        } else {
            if (View.actualFocus == "grid-panel-right") {
                GridPanel.keyHandler(a)
            }
        }
    },
    moreInfo: function() {
        Storefront.actualItem[Storefront.mode] = LeftPanel.actualItem;
        var a = $("#grid-panel-right");
        var b = $("#grid-row" + GridPanel.row);
        if (b.offset().top - a.offset().top < b.height()) {
            Storefront.actualRow[Storefront.mode] = GridPanel.row;
            Storefront.nextRow[Storefront.mode] = GridPanel.row + 1
        } else {
            Storefront.actualRow[Storefront.mode] = GridPanel.row;
            Storefront.nextRow[Storefront.mode] = GridPanel.row - 1
        }
        Storefront.itemRow[Storefront.mode] = GridPanel.item[GridPanel.row]
    }
};
var TotalStore = {
    classname: "totalstore",
    options: [],
    initView: function() {
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        Header.actualPage = 9;
        $("#left-panel-title").html("");
        var a = [];
        Footer.setLeft(a);
        Footer.disableLeft();
        LeftPanel.init({
            mytv: false,
            displayItems: 5,
            scrollLimit: 4,
            title: true,
            actualPos: true,
            classC: "side-panel-mytv"
        });
        LeftPanel.hideMe(false);
        $("#content-multi-panel").removeClass("hide-this");
        $("#multi-panel").removeClass("hide-this");
        $("#small-slider-vertical").addClass("hide-this");
        MidPanel.hideMe(false);
        View.loaderHide();
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this");
        $("#epg").addClass("hide-this");
        $(".preview-panel").addClass("totalstore-middle-planel-preview");
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        $("#left-panel-scroll-down").addClass("totalstore-scroll-down");
        $("#left-panel-scroll-up").addClass("totalstore-scroll-up");
        this.buildLeftPanel()
    },
    buildLeftPanel: function() {
        var e = "";
        if (this.options && this.options.length > 0) {
            var d = 0;
            for (var c in this.options) {
                if (this.options.hasOwnProperty(c)) {
                    var f = this.options[c];
                    var b = f.name;
                    var a = 0;
                    if (f.name) {
                        a++
                    }
                    if (f.tagLine1) {
                        b += "<div class='left-panel-tagline1' >" + f.tagLine1 + "</div>";
                        a++
                    }
                    if (f.tagLine2) {
                        b += "<div class='left-panel-tagline2' >" + f.tagLine2 + "</div>";
                        a++
                    }
                    if (a < 2) {
                        b = "<div class='left-panel-div-1' >" + b + "</div>"
                    } else {
                        if (a < 3) {
                            b = "<div class='left-panel-div-2' >" + b + "</div>"
                        } else {
                            b = "<div class='left-panel-div-3' >" + b + "</div>"
                        }
                    }
                    if (f.logoUrl) {
                        b = "<div class='totalstore-logo'><img src='" + f.logoUrl + "'></div>" + b
                    }
                    e += '<li id="left-panel-option' + d + '" class="itemTV displayed totalstore-option" data-itemId="id_' + c + '" onmouseover="LeftPanel.hoverTo(' + d + ', -1);" >' + b + "</li>";
                    d++
                }
            }
        } else {
            PopMsg.show("info", 44)
        }
        TVA.putInnerHTML(document.getElementById("left-panel-list"), e);
        $("#left-panel-actual-pos").hide();
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), "");
        this.setFocus()
    },
    deInitView: function() {
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        $(".preview-panel").removeClass("totalstore-middle-planel-preview");
        $("#left-panel-scroll-down").removeClass("totalstore-scroll-down");
        $("#left-panel-scroll-up").removeClass("totalstore-scroll-up")
    },
    setFocus: function() {
        LeftPanel.setFocus()
    },
    loadInfo: function(c) {
        var a = "";
        var b = this.options[c.replace("id_", "")];
        a += "<div class='info'>";
        if (b.description) {
            a += "<h1 id='mytv-program-name' class='series'>" + b.description;
            if (b.description2) {
                a += "<span class='span-separator'></span>" + b.description2
            }
            a += "</h1>"
        }
        if (b.description3) {
            a += "<h3 class='description'>" + b.description3 + "</h3>"
        }
        a += "</div>";
        if (b.backgroundUrl) {
            a += "<img class='bg-image' src='" + b.backgroundUrl + "' onerror=\"this.onerror=null;this.src='./resource/general/generic-container.jpg'\"  alt=''>"
        } else {
            a += "<img class='bg-image' src='./resource/general/generic-container.jpg'  alt=''>"
        }
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), a);
        TVA.invalidate()
    },
    keyHandler: function(a) {
        switch (a) {
            case TVA.tvKey.KEY_ENTER:
            case TVA.tvKey.KEY_1:
                return true
        }
        return LeftPanel.keyHandler(a)
    }
};
var EPG = {
    classname: "epg",
    currentDayOffset: 0,
    channelIDList: [],
    channelInfoList: [],
    prevFocus: null,
    currentDetails: null,
    onlyOneChannel: false,
    initView: function(fromPage) {
        Monocanal.fromPage = fromPage;
        EPG.onlyOneChannel = false;
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        Header.actualPage = 2;
        var footerElements = [];
        footerElements.push({
            text: "Ver",
            className: "enter-button-footer",
            disabled: true,
            keycode: TVA.tvKey.KEY_ENTER,
            method: function() {
                var el = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
                var details = {
                    programId: el.data("programId"),
                    eventId: el.data("eventId"),
                    channelId: el.data("channelId"),
                    assetId: el.data("assetId")
                };
                if (details.assetId && details.programId && details.channelId) {
                    EPG.goDataSheet()
                } else {
                    var ch = null;
                    if (details.eventId) {
                        var event = DataStore.get(Type.Event, el.data("eventId"));
                        if (event && !event.channel) {
                            return false
                        }
                        ch = event.channel
                    }
                    if (!ch || ch == null || ch == "null") {
                        try {
                            var oc = $($("#channel-vertical-scroll").find(".epg-channel")[ProgramGrid.actualChannel]).attr("onclick");
                            if (oc) {
                                eval(oc);
                                return false
                            }
                        } catch (e) {}
                    }
                    if (ch && ch !== null && ch !== "null") {
                        API.getChannels("direct", 0, ch)
                    } else {
                        API.getChannels("direct", ProgramGrid.actualChannel)
                    }
                }
                return false
            }
        });
        footerElements.push({
            text: "Ficha",
            className: "one-button-footer",
            keycode: TVA.tvKey.KEY_1,
            method: function() {
                EPG.goDataSheet();
                return false
            }
        });
        footerElements.push({
            text: "Día -",
            className: "green-button-footer",
            keycode: TVA.tvKey.KEY_GREEN,
            method: function() {
                EPG.previousDay();
                return false
            }
        });
        footerElements.push({
            text: "Día +",
            className: "yellow-button-footer",
            keycode: TVA.tvKey.KEY_YELLOW,
            method: function() {
                EPG.nextDay();
                return false
            }
        });
        if (TVA.device != "ps3") {
            footerElements.push({
                text: "Pag +/-",
                className: "blue-button-footer",
                keycode: TVA.tvKey.KEY_BLUE,
                method: function() {
                    ProgramGrid.pageDown();
                    return false
                }
            })
        }
        Footer.setLeft(footerElements, true);
        if (fromPage !== null && typeof fromPage !== "undefined" && fromPage.classname && (fromPage.classname === "datasheet" || fromPage.classname === "datalist" || fromPage.classname === "videoplayer") && EPG.prevFocus != null) {
            ProgramGrid.hideMe(false);
            SidePanel.hideMe(false);
            if (EPG.prevFocus) {
                View.actualFocus = EPG.prevFocus.actualFocus;
                View.actualHover = EPG.prevFocus.actualHover;
                EPG.prevFocus = null;
                Commons.setFocus(View.actualFocus);
                Commons.setHover(View.actualHover);
                ProgramGrid.getProgramDetails()
            }
        } else {
            EPG.currentDayOffset = 0;
            API.getChannels("epg")
        }
        View.loaderHide();
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this");
        $("#content-multi-panel").addClass("hide-this");
        $("#multi-panel").addClass("hide-this");
        View.showMainPageInfo(this.classname)
    },
    deInitView: function(a) {
        if (EPG.onlyOneChannel == true) {
            EPG.onlyOneChannel = false;
            Monocanal.deInitView(a)
        } else {
            if (typeof a !== "undefined" && a.classname && (a.classname === "datasheet" || a.classname === "datalist" || a.classname === "videoplayer")) {
                ProgramGrid.hideMe(true);
                SidePanel.hideMe(true);
                EPG.prevFocus = {
                    actualFocus: View.actualFocus,
                    actualHover: View.actualHover
                };
                return
            }
        }
        ProgramGrid.hideMe(true);
        ProgramGrid.init();
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        SidePanel.hideMe(true);
        SidePanel.reset();
        $("#channel-vertical-scroll").css("top", 0);
        $("#epg-list-program").css("top", 0);
        TVA.putInnerHTML(document.getElementById("channel-vertical-scroll"), "");
        TVA.putInnerHTML(document.getElementById("epg-list-program"), "");
        TVA.putInnerHTML(document.getElementById("epg-info"), "")
    },
    setFocus: function() {
        if (EPG.onlyOneChannel == true) {
            Monocanal.setFocus();
            return
        }
        ProgramGrid.setFocus()
    },
    nextDay: function() {
        if (EPG.onlyOneChannel == true) {
            Monocanal.nextDay();
            return
        }
        if (EPG.currentDayOffset < 7) {
            EPG.currentDayOffset++;
            API.getEPGContent(EPG.currentDayOffset, EPG.channelIDList)
        }
    },
    previousDay: function() {
        if (EPG.onlyOneChannel == true) {
            Monocanal.previousDay();
            return
        }
        if (EPG.currentDayOffset > -7) {
            EPG.currentDayOffset--;
            API.getEPGContent(EPG.currentDayOffset, EPG.channelIDList)
        }
    },
    buildChannelGrid: function(a) {
        if (a && a.length == 1) {
            EPG.onlyOneChannel = true;
            try {
                Monocanal.buildChannelGrid(a)
            } catch (g) {
                console.log(g)
            }
            return
        }
        var c = "";
        EPG.currentDayOffset = 0;
        EPG.channelIDList = [];
        EPG.channelInfoList = [];
        for (var b = 0; b < a.length; b++) {
            var d = a[b];
            var f = "" + d.logoUrl;
            c = "";
            var h = "onclick=\"API.getChannels('direct',0,'" + d.id + "');\" ";
            if (f == "" || f == "undefined" || f == "null") {
                c = "<div id='epg-channel-id-" + d.id + "' " + h + " class='epg-channel epg-channel-nobg'><div class='epg-channel-nobg-div'>" + d.name + "</div></div>"
            } else {
                c = "<div id='epg-channel-id-" + d.id + "' " + h + " class='epg-channel'><img src='" + API.image_base_url + f + "' alt='" + d.name + "'></div>"
            }
            EPG.channelInfoList[d.id] = c;
            EPG.channelIDList.push(d.id)
        }
        API.getEPGContent(EPG.currentDayOffset, EPG.channelIDList)
    },
    buildGridContent: function(p, l) {
        if (EPG.onlyOneChannel == true) {
            Monocanal.buildGridContent(p, l);
            return
        }
        Footer.showLeft();
        $("#date-epg").html(l.getDate() + "/" + (l.getMonth() + 1));
        var k = "";
        var g = "";
        for (var s = 0; s < p.length; s++) {
            var w = p[s];
            g += EPG.channelInfoList[w.id];
            k += "<div id='channelId" + s + "' class='epg-row'>";
            for (var q = 0; q < w.events.length; q++) {
                var r = DataStore.get(Type.Event, w.events[q]);
                var d = r.startTime;
                var h = d.getDate();
                var m = d.getHours();
                var a = d.getMinutes();
                var t = r.endTime;
                var e = t.getDate();
                var f = t.getHours();
                var n = t.getMinutes();
                var v = l.getDate();
                var c;
                var o;
                if (h === v) {
                    c = (m * 60 + a) * 4;
                    if (e === v) {
                        o = Utils.getSecondsBetweenDates(d, t) / 60
                    } else {
                        var b = new Date(d.getTime());
                        b.setHours(24, 0, 0);
                        o = Utils.getSecondsBetweenDates(d, b) / 60
                    }
                    o *= 4
                } else {
                    c = 0;
                    o = f * 60 + n;
                    o *= 4
                }
                if (o - 12 > 0) {
                    o -= 12
                }
                var u = c + (o / 2);
                k += "<div class='epg-item' id='channelId" + s + "-" + q + "' style='left:" + c + "px; width:" + o + "px' data-eventId='" + r.id + "' data-index='" + q + "' data-posCenter='" + u + "' onmouseover=\"ProgramGrid.setHover(" + s + "," + q + ");\" onclick='EPG.click(" + s + ", " + q + ");'><div class='left-border'></div><div class='right-border'></div><div class='center-border'><div class='item-text'><h2 style='width:" + (o - 18) + "px'>" + r.title + "</h2></div></div></div>"
            }
            k += "</div>"
        }
        TVA.putInnerHTML(document.getElementById("channel-vertical-scroll"), g);
        TVA.putInnerHTML(document.getElementById("epg-list-program"), k);
        ProgramGrid.setFocus()
    },
    click: function(a, b) {
        if (EPG.onlyOneChannel == true) {
            return Monocanal.click(a, b)
        }
        if ($(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).hasClass("disabled") == false) {
            Footer.keyHandler(TVA.tvKey.KEY_ENTER)
        } else {
            if (ProgramGrid.actualChannel != a || ProgramGrid.itemRow != b) {
                ProgramGrid.actualChannel = a;
                ProgramGrid.itemRow = b;
                ProgramGrid.getProgramDetails(true);
                Commons.setHover("channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
                ProgramGrid.scrollLeft()
            } else {
                ProgramGrid.keyHandler(TVA.tvKey.KEY_ENTER)
            }
        }
        return false
    },
    buildDetails: function(c) {
        if (EPG.onlyOneChannel == true) {
            Monocanal.buildDetails(c);
            return
        }
        clearTimeout(ProgramGrid.detailsTimeout);
        ProgramGrid.detailsTimeout = null;
        EPG.currentDetails = c;
        var g = DataStore.get(Type.Program, c.program);
        var d = false;
        var l = false;
        var f = false;
        var k = false;
        var o = "&nbsp;";
        var j = "&nbsp;";
        if (c.event) {
            d = DataStore.get(Type.Event, c.event);
            l = DataStore.get(Type.Channel, d.channel);
            f = d.startTime;
            k = d.endTime;
            o = l.name;
            j = Utils.weekday[f.getDay()] + " " + f.getDate() + " de " + Utils.month[f.getMonth()] + "  " + Utils.checkTimeStr(f.getHours()) + ":" + Utils.checkTimeStr(f.getMinutes()) + " - " + Utils.checkTimeStr(k.getHours()) + ":" + Utils.checkTimeStr(k.getMinutes())
        }
        var e = "";
        if (g.season) {
            e = "T" + g.season;
            if (g.episodePartial) {
                e += " Ep. " + g.episodePartial
            }
            e += " | "
        }
        var m = 0;
        if (g.usersReview) {
            m = Math.round(g.usersReview)
        }
        var h = "";
        h += '<span class="channel green">' + o + '</span><h1 class="series">' + g.title + '</h1><h2 class="chapter">' + ((g.episodeTitle) ? g.episodeTitle : "&nbsp;") + '</h2><h3 class="description">' + e + j + '</h3><h3 class="user-votes">Votos Usuarios<span class="stars stars' + m + '"></span></h3>' + DataSheet.buildIconHTML(g, d);
        var b = $(".epg .bg-image");
        if (g.backgroundUrl != null) {
            b.hide().attr("src", API.image_base_url + (g.backgroundUrl))
        } else {
            b.hide().attr("src", "resource/general/empty.png")
        }
        TVA.putInnerHTML(document.getElementById("epg-info"), h);
        TVA.invalidate();
        var n = $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER);
        var i = $("#epg-ver-div");
        if (c.asset && c.program && c.channel) {
            var p = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
            var a = p.data("eventId");
            if (d.id == a) {
                p.data("assetId", c.asset);
                p.data("programId", c.program);
                p.data("channelId", c.channel)
            }
            n.removeClass("disabled")
        }
        if (n.hasClass("disabled") == false) {
            i.removeClass("hide-this")
        } else {
            i.addClass("hide-this")
        }
    },
    keyHandler: function(a) {
        if (EPG.onlyOneChannel == true) {
            Monocanal.keyHandler(a);
            return
        }
        ProgramGrid.keyHandler(a)
    },
    goDataSheet: function() {
        if (EPG.onlyOneChannel == true) {
            Monocanal.goDataSheet();
            return
        }
        if (ProgramGrid.detailsTimeout != null) {
            return
        }
        var d = $("#channelId" + ProgramGrid.actualChannel + "-" + ProgramGrid.itemRow);
        var c = d.data("eventId");
        var a = DataStore.get(Type.Program, EPG.currentDetails.program);
        var e = DataStore.get(Type.Event, c);
        if (a.parent) {
            var b = DataStore.get(Type.Program, a.parent);
            if (b && b.isGroup === true) {
                var f = "-";
                if (d && d.data("assetId") && d.data("assetId") != "null" && d.data("assetId") != null) {
                    f = d.data("assetId")
                }
                var g = {
                    programId: (a ? a.id : ""),
                    eventId: (e ? e.id : ""),
                    channelId: (e.channel && e.channel["id"] ? e.channel["id"] : ""),
                    parentId: (a ? a.parent : ""),
                    assetId: f,
                    program: b,
                    programNode: a,
                    finfo: {
                        programId: (a ? a.id : ""),
                        assetId: f,
                        eventId: (e ? e.id : "")
                    }
                };
                DataList.setDetails(g, g.finfo);
                View.changeView(DataList);
                return
            }
        }
        c = d.data("eventId");
        if (c) {
            DataSheet.setDetails(null, c);
            View.changeView(DataSheet)
        }
    }
};
var Monocanal = {
    showTitle: false,
    classname: "epg",
    currentDayOffset: 0,
    channelIDList: [],
    channelInfoList: [],
    prevFocus: null,
    currentDetails: null,
    contents: [],
    actualPos: -1,
    fromPage: null,
    initView: function(c) {
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        Monocanal.contents = [];
        Header.actualPage = 9;
        var b = $("#left-panel-title");
        b.html("");
        var a = [];
        a.push({
            text: "Ficha",
            disabled: false,
            className: "one-button-footer",
            keycode: TVA.tvKey.KEY_1,
            method: function() {
                EPG.goDataSheet();
                return false
            }
        });
        a.push({
            text: "Ver",
            className: "enter-button-footer",
            keycode: TVA.tvKey.KEY_ENTER,
            disabled: true,
            method: function() {
                Monocanal.keyHandler(TVA.tvKey.KEY_ENTER);
                return false
            }
        });
        Footer.setLeft(a);
        Footer.enableLeft();
        LeftPanel.init({
            mytv: false,
            displayItems: 4,
            scrollLimit: 3,
            title: true,
            actualPos: true,
            classC: "side-panel-mytv"
        });
        LeftPanel.hideMe(false);
        $("#content-multi-panel").addClass("hide-this");
        $("#multi-panel").removeClass("hide-this");
        $("#small-slider-vertical").addClass("hide-this");
        $("#left-panel-describe").addClass("monocanal-sidepanel");
        if (Monocanal.showTitle == true) {
            b.addClass("monocanal-leftpanel-title")
        }
        MidPanel.hideMe(false);
        View.loaderHide();
        $("#prev-big-slider").addClass("hide-this");
        $("#next-big-slider").addClass("hide-this");
        $("#sliders").addClass("hide-this");
        $("#epg").addClass("hide-this");
        $(".preview-panel").addClass("monocanal-middle-planel-preview");
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        $("#left-panel-scroll-down").addClass("monocanal-scroll-down");
        $("#left-panel-scroll-up").addClass("monocanal-scroll-up")
    },
    deInitView: function() {
        Monocanal.actualPos = LeftPanel.actualItem;
        Monocanal.fromPage = null;
        TVA.putInnerHTML(document.getElementById("middle-preview-panel"), "");
        $(".preview-panel").removeClass("monocanal-middle-planel-preview");
        $("#left-panel-scroll-down").removeClass("monocanal-scroll-down");
        $("#left-panel-scroll-up").removeClass("monocanal-scroll-up");
        $("#left-panel-describe").removeClass("monocanal-sidepanel");
        if (Monocanal.showTitle == true) {
            $("#left-panel-title").removeClass("monocanal-leftpanel-title")
        }
        $("#multi-panel").addClass("hide-this");
        Monocanal.contents = []
    },
    setFocus: function() {
        LeftPanel.setFocus();
        TVA.invalidate();
        Monocanal.checkEvent()
    },
    nextDay: function() {},
    previousDay: function() {},
    buildChannelGrid: function(a) {
        EPG.currentDayOffset = 0;
        EPG.channelInfoList = [];
        EPG.channelIDList = [];
        EPG.channelIDList.push(a[0]["id"]);
        API.getEPGContent(EPG.currentDayOffset, EPG.channelIDList)
    },
    buildGridContent: function(m) {
        Monocanal.initView(Monocanal.fromPage);
        var t = Utils.now();
        var e = 0;
        var h = "";
        if (m && m.length > 0 && m[0].contents && m[0].contents.length) {
            var n = 0;
            var q = m[0].contents;
            Monocanal.contents = q;
            var l, c, r, g, d, o, f, a;
            for (var p in q) {
                if (q.hasOwnProperty(p)) {
                    d = q[p];
                    o = DataStore.get(Type.Event, d.event["id"]);
                    f = DataStore.get(Type.Program, d.program["id"]);
                    if (o.startTime.getTime() <= t) {
                        e = p
                    }
                    g = "";
                    r = "";
                    c = "";
                    l = "";
                    a = "";
                    try {
                        g = f.title;
                        if (f.season && f.season.length) {
                            g += " T." + f.season
                        }
                        if (f.episodePartial && f.episodePartial.length) {
                            g += " E." + f.episodePartial
                        }
                        if (f.episodeTitle && f.episodeTitle.length) {
                            g += ": " + f.episodeTitle
                        }
                        r += "<strong>";
                        if (f.parentGenre) {
                            r += f.parentGenre
                        } else {
                            r += f.type
                        }
                        if (f.genre) {
                            r += ", " + f.genre
                        }
                        r += "</strong>";
                        if (f.productionCountry) {
                            for (var s = 0; s < f.productionCountry.length; s++) {
                                if (s == 0) {
                                    r += ", "
                                } else {
                                    r += "/"
                                }
                                r += f.productionCountry[s]["name"]
                            }
                        }
                        if (f.productionYear && f.productionYear.length) {
                            r += ", " + f.productionYear
                        }
                        c = f.synopsis;
                        if (f.thumbnailUrl != null) {
                            a = API.image_base_url + f.thumbnailUrl
                        }
                        if (Monocanal.showTitle != true) {
                            l = Utils.weekDayAbbreviation[o.startTime.getDay()] + " " + o.startTime.getDate() + " de " + Utils.monthAbbreviation[o.startTime.getMonth()] + "  <br/>"
                        }
                        l += Utils.checkTimeStr(o.startTime.getHours()) + ":" + Utils.checkTimeStr(o.startTime.getMinutes())
                    } catch (b) {}
                    var j = '<span class="monocanal-left-option monocanal-date' + (Monocanal.showTitle == true ? "-only" : "") + '" >' + l + "</span>";
                    j += '<span class="monocanal-left-option monocanal-bg" ><img class="monocanal-bg-img" src="' + a + "\" onerror=\"if(this.src.indexOf('generic-thumbnail.jpg')<0) this.src='resource/general/generic-thumbnail.jpg';\" /></span>";
                    j += '<span class="monocanal-left-option monocanal-left-options" >';
                    j += '<span class="monocanal-left-suboption monocanal-tit" >' + g + "</span>";
                    j += '<span class="monocanal-left-suboption monocanal-info" >' + r + "</span>";
                    j += '<span class="monocanal-left-suboption monocanal-synop" >' + c + "</span>";
                    j += "</span>";
                    h += '<li onclick="Monocanal.keyHandler(TVA.tvKey.KEY_ENTER);" id="left-panel-option' + n + '" class="itemTV displayed monocanal-option" data-itemId="id_' + p + '" onmouseover="Monocanal.hoverTo(' + n + ', -1);" >' + j + "</li>";
                    n++
                }
            }
        } else {
            PopMsg.show("info", 44)
        }
        TVA.putInnerHTML(document.getElementById("left-panel-list"), h);
        $("#left-panel-actual-pos").hide();
        TVA.putInnerHTML(document.getElementById("current-item-left-panel"), "");
        $("#content-multi-panel").addClass("hide-this");
        $("#selector-multi-panel").removeClass("hide-this");
        $("#multi-panel").removeClass("hide-this");
        try {
            if (typeof Monocanal.fromPage !== "undefined" && Monocanal.fromPage && Monocanal.fromPage.classname && (Monocanal.fromPage.classname === "datasheet" || Monocanal.fromPage.classname === "datalist" || Monocanal.fromPage.classname === "videoplayer") && !isNaN(Monocanal.actualPos) && isFinite(Monocanal.actualPos) && Monocanal.actualPos >= 0 && Monocanal.actualPos < Monocanal.contents.length) {
                Monocanal.setOffset(Monocanal.actualPos);
                Monocanal.actualPos = -1
            } else {
                Monocanal.setOffset(e)
            }
        } catch (k) {
            console.log(k)
        }
    },
    setOffset: function(b) {
        var j = parseInt(b);
        if (j > 0) {
            var e = $("#left-panel-list");
            var h = e.find("li");
            LeftPanel.hideMe(false);
            var d = h.height();
            var g = d * j;
            var c = g;
            var i = e.parent().height();
            var f = e.height() - g;
            if (f < i) {
                g -= (i - f)
            }
            var a = (c - g) / d;
            if (a < LeftPanel.scrollLimit) {
                g -= ((LeftPanel.scrollLimit - a) * d)
            }
            if (g < 0) {
                g = 0
            }
            LeftPanel.actualItem = j;
            LeftPanel.visibleItem = (c - g) / d;
            e.css("top", -g);
            $("#left-panel-option" + j).addClass("monocanal-current-event")
        }
        Monocanal.setFocus()
    },
    click: function() {
        return false
    },
    buildDetails: function() {},
    hoverTo: function(d, c) {
        LeftPanel.hoverTo(d, c);
        Monocanal.checkEvent()
    },
    playChannel: function() {
        API.getChannels("live")
    },
    keyHandler: function(a) {
        switch (a) {
            case TVA.tvKey.KEY_ENTER:
                if ($(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).hasClass("disabled") == false) {
                    Monocanal.playChannel();
                    return false
                }
            case TVA.tvKey.KEY_1:
                EPG.goDataSheet();
                return false
        }
        var b = LeftPanel.keyHandler(a);
        Monocanal.checkEvent();
        return b
    },
    checkEvent: function() {
        var e = Monocanal.contents[LeftPanel.actualItem];
        if (!e) {
            return
        }
        var c = DataStore.get(Type.Event, e.event["id"]);
        var a = Utils.now();
        if (Monocanal.showTitle == true) {
            var b = "";
            if (c && c.startTime) {
                b = c.startTime;
                b = Utils.weekday[b.getDay()] + ", " + b.getDate() + " de " + Utils.month[b.getMonth()]
            }
            $("#left-panel-title").html(b)
        }
        var d = (c && c.startTime && c.startTime.getTime() <= a && c.endTime && c.endTime.getTime() > a);
        if (d) {
            $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).removeClass("disabled")
        } else {
            $(".leftFooterButton-" + TVA.tvKey.KEY_ENTER).addClass("disabled")
        }
        Footer.enableLeft()
    },
    goDataSheet: function() {
        var h = Monocanal.contents[LeftPanel.actualItem];
        var g = h.event["asset"] && h.event["asset"]["id"] ? h.event["asset"]["id"] : "";
        var a = DataStore.get(Type.Program, h.program["id"]);
        var d = DataStore.get(Type.Event, h.event["id"]);
        if (!d.channel) {
            d.channel = {
                id: EPG.channelIDList
            }
        }
        var c = h.event["id"];
        if (a.parent) {
            var b = DataStore.get(Type.Program, a.parent);
            if (b && b.isGroup === true) {
                var e = "-";
                if (g && g.length) {
                    e = g
                }
                var f = {
                    programId: (a ? a.id : ""),
                    eventId: (d ? d.id : ""),
                    channelId: (d.channel && d.channel["id"] ? d.channel["id"] : ""),
                    parentId: (a ? a.parent : ""),
                    assetId: e,
                    program: b,
                    programNode: a,
                    finfo: {
                        programId: (a ? a.id : ""),
                        assetId: e,
                        eventId: (d ? d.id : "")
                    }
                };
                DataList.setDetails(f, f.finfo);
                View.changeView(DataList);
                return
            }
        }
        if (c) {
            DataSheet.setDetails(null, c);
            View.changeView(DataSheet)
        }
    }
};
var PopUp = {
    classname: "popup",
    type: "",
    time: false,
    callback: null,
    isVisible: false,
    pairingCode: "",
    previousHover: "",
    text: "",
    deInitTimeout: null,
    initView: function() {
        Commons.setFocus("popup-message-container");
        View.loaderHide()
    },
    showMe: function(c, d, e) {
        View.loaderHide();
        var a = View.actualPageIs(PopUp);
        if (a && PopUp.type == "pairing" && (c == "error" || c == "block")) {
            if (PopMsg.getText(5) == e || PopMsg.getText(47) == e) {
                return
            }
        } else {
            if (a && PopUp.type == "block") {
                return
            }
        }
        if (typeof e === "string") {
            e = e.replace(/\n/g, "<br/>")
        }
        if (c == "pairing") {
            PopUp.text = e
        }
        TVA.putInnerHTML(document.getElementById("popup-message-text"), e);
        PopUp.time = d;
        PopUp.type = c;
        PopUp.setFocus();
        PopUp.isVisible = true;
        PopUp.pairingCode = "";
        var b = $("#pairing-codes");
        b.addClass("hide-this");
        if (PopUp.type == "pairing" && $(".header-menu-last").html() != "VINCULAR") {
            PopUp.loadPairing(true, true)
        } else {
            if (PopUp.type == "pairing") {
                b.removeClass("hide-this")
            }
            $("#popup-message-container").removeClass("hide-this");
            PopUp.showMessagesContainer();
            $("#messages-frame").addClass("hide-this")
        }
        if (d) {
            PopUp.startHideTimeout(7)
        }
    },
    startHideTimeout: function(a) {
        clearTimeout(PopUp.deInitTimeout);
        PopUp.deInitTimeout = setTimeout(function() {
            PopUp.deInitView()
        }, a * 1000)
    },
    setCallback: function(a) {
        PopUp.callback = a
    },
    deInitView: function() {
        Keyboard.isFocused = false;
        clearTimeout(PopUp.deInitTimeout);
        PopUp.time = false;
        PopUp.type = "";
        PopUp.hideMessagesContainer();
        $("#messages-frame").addClass("hide-this");
        $("#pairing-codes").addClass("hide-this");
        $("#voting").addClass("hide-this");
        $("#messages-actions").addClass("hide-this");
        $(".option-button").addClass("hide-this");
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        if (View.tempPage) {
            View.actualPage = View.tempPage
        }
        if (!View.actualPage) {
            View.tempPage = Home;
            View.actualPage = View.tempPage
        }
        View.actualPage.setFocus();
        PopUp.callback = null;
        PopUp.isVisible = false;
        PopUp.pairingCode = "";
        clearInterval(API.pairingTimeout);
        API.pairingTimeout = null;
        Header.checkActive();
        if (TVA.OTT.CLOSE_CHLIST == false && SidePanel.isVisible()) {
            SidePanel.setFocus()
        }
    },
    setFocus: function() {
        Commons.setFocus("popup-message-container");
        Commons.offHover(View.actualHover);
        $(".option-button").addClass("hide-this");
        var m = $(".messages-icon");
        var e = $("#messages-image-left");
        var c = $("#messages-image-right");
        var a = $("#popup-message-container");
        var n = $("#option1-popup-message");
        var l = $("#option2-popup-message");
        var k = $("#option3-popup-message");
        var f = $("#ok-popup-message");
        var p = $("#cancel-popup-message");
        var o = $("#messages-image");
        var g = $(".messages-actions");
        g.removeClass("messages-actions-help");
        m.removeClass("hide-this");
        k.addClass("hide-this");
        o.addClass("hide-this");
        e.addClass("hide-this");
        c.addClass("hide-this");
        a.removeClass("popup-message-container-fullscreen");
        PopUp.setStep(0, 0);
        var j = false;
        var d = $("#voting");
        d.addClass("hide-this");
        if (PopUp.type == "ok") {
            a.removeClass().addClass("message ok-message");
            f.removeClass("hide-this");
            p.addClass("hide-this");
            Commons.setHover("ok-popup-message")
        } else {
            if (PopUp.type == "delete") {
                a.removeClass().addClass("message delete-message");
                f.removeClass("hide-this");
                p.removeClass("hide-this");
                Commons.setHover("ok-popup-message")
            } else {
                if (PopUp.type == "error") {
                    a.removeClass().addClass("message error-message");
                    f.removeClass("hide-this");
                    p.addClass("hide-this");
                    Commons.setHover("ok-popup-message")
                } else {
                    if (PopUp.type == "block") {
                        a.removeClass().addClass("message error-message");
                        f.addClass("hide-this");
                        p.addClass("hide-this");
                        Commons.setHover("ok-popup-message")
                    } else {
                        if (PopUp.type == "interrogation") {
                            a.removeClass().addClass("message interrogation-message");
                            f.removeClass("hide-this");
                            p.addClass("hide-this");
                            Commons.setHover("ok-popup-message")
                        } else {
                            if (PopUp.type == "info") {
                                a.removeClass().addClass("message info-message");
                                f.removeClass("hide-this");
                                p.addClass("hide-this");
                                Commons.setHover("ok-popup-message")
                            } else {
                                if (PopUp.type == "pairing") {
                                    if ($(".header-menu-last").html() != "VINCULAR") {
                                        $("#popup-message-focus").removeClass().addClass("message pairing-message");
                                        $("#pairing-codes").removeClass("hide-this");
                                        Commons.setHover("login-alta")
                                    } else {
                                        a.removeClass().addClass("message pairing-message");
                                        $("#pairing-codes").removeClass("hide-this");
                                        f.addClass("hide-this");
                                        p.removeClass("hide-this");
                                        Commons.setHover("cancel-popup-message")
                                    }
                                } else {
                                    if (PopUp.type == "voting") {
                                        a.removeClass().addClass("message voting-message");
                                        d.removeClass("hide-this");
                                        f.removeClass("hide-this");
                                        p.removeClass("hide-this");
                                        Commons.setHover("voting-stars")
                                    } else {
                                        if (PopUp.type == "playfrom") {
                                            a.removeClass().addClass("message info-message");
                                            f.addClass("hide-this");
                                            n.removeClass("hide-this").html("Ver desde donde lo dejé");
                                            l.removeClass("hide-this").html("Ver desde el principio");
                                            p.removeClass("hide-this");
                                            Commons.setHover("option1-popup-message")
                                        } else {
                                            if (PopUp.type == "direct-start") {
                                                a.removeClass().addClass("message info-message");
                                                f.addClass("hide-this");
                                                n.removeClass("hide-this").html("OK");
                                                l.removeClass("hide-this").html("No mostrar de nuevo");
                                                p.addClass("hide-this");
                                                Commons.setHover("option1-popup-message");
                                                j = true
                                            } else {
                                                if (PopUp.type == "tutorial") {
                                                    a.removeClass().addClass("message info-message");
                                                    a.addClass("popup-message-container-fullscreen");
                                                    m.addClass("hide-this");
                                                    f.addClass("hide-this");
                                                    PopUp.tutorialCurrentPosition = 1;
                                                    n.addClass("hide-this");
                                                    l.addClass("hide-this");
                                                    k.addClass("hide-this");
                                                    p.addClass("hide-this");
                                                    e.addClass("hide-this");
                                                    c.removeClass("hide-this");
                                                    g.addClass("messages-actions-help");
                                                    PopUp.setStep(PopUp.tutorialCurrentPosition, PopUp.tutorial.length);
                                                    o.removeClass("hide-this").css("background-image", 'url("' + PopUp.tutorial[PopUp.tutorialCurrentPosition - 1] + '")');
                                                    Commons.setHover("option1-popup-message");
                                                    j = true
                                                } else {
                                                    if (PopUp.type == "recording-chapter" || PopUp.type == "recording-serie") {
                                                        a.removeClass().addClass("message info-message");
                                                        f.addClass("hide-this");
                                                        n.removeClass("hide-this").html("Grabar Serie");
                                                        if (PopUp.type == "recording-chapter") {
                                                            l.removeClass("hide-this").html("Grabar Capitulo")
                                                        } else {
                                                            l.addClass("hide-this")
                                                        }
                                                        p.removeClass("hide-this");
                                                        Commons.setHover("option1-popup-message")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var b = $("#messages-actions");
        if (!PopUp.time) {
            b.removeClass("hide-this")
        } else {
            b.addClass("hide-this")
        }
        var i = $("#messages-container");
        var h = i.find("#popup-message-container");
        if (j == true) {
            i.addClass("messages-nobg");
            h.addClass("messages-div-bg")
        } else {
            i.removeClass("messages-nobg");
            h.removeClass("messages-div-bg")
        }
        a.removeClass("hide-this")
    },
    setCode: function(c) {
        if (c.length > 0) {
            var b = "";
            for (var a = 0; a < c.length; a++) {
                b += '<span id="pair-num' + a + '" class="pairing-num">' + c[a] + "</span>"
            }
            TVA.putInnerHTML(document.getElementById("pairing-codes"), b);
            PopUp.pairingCode = c
        }
    },
    updateCode: function() {
        if (document.getElementById("codigoactivacion") && PopUp.pairingCode.length > 0) {
            var b = "";
            var d = PopUp.pairingCode;
            for (var a = 0; a < d.length; a++) {
                b += "<li>" + d[a] + "</li>"
            }
            TVA.putInnerHTML(document.getElementById("codigoactivacion"), b);
            if (d.length < 6) {
                var c = $(".codigoactivaciondiv");
                var e = c.width();
                c.width(Math.round(e * d.length / 6) + "px")
            }
        }
    },
    setVotingDetails: function(c, a) {
        var b = $("#voting-stars-stars");
        if (a > 5 || a < 1) {
            a = 3
        }
        if (c) {
            b.data("programId", c)
        }
        b.data("stars", a).removeClass().addClass("stars stars" + a)
    },
    keyHandler: function(j) {
        if (Main.oldDeviceMessageShowed === true) {
            Main.keyDown(j);
            return
        }
        var e = PopUp.callback;
        var k = "";
        var l = "";
        var n = $("#option1-popup-message");
        var m = $("#option2-popup-message");
        if (PopUp.type == "delete") {
            switch (j) {
                case TVA.tvKey.KEY_LEFT:
                    Commons.offHover(View.actualHover);
                    Commons.setHover("ok-popup-message");
                    break;
                case TVA.tvKey.KEY_RIGHT:
                    Commons.offHover(View.actualHover);
                    Commons.setHover("cancel-popup-message");
                    break;
                case TVA.tvKey.KEY_ENTER:
                    if (e) {
                        e(View.actualHover == "ok-popup-message")
                    }
                    PopUp.deInitView();
                    break;
                case TVA.tvKey.KEY_RETURN:
                    PopUp.deInitView();
                    break
            }
        } else {
            if (PopUp.type == "pairing") {
                if (j == TVA.tvKey.KEY_RETURN) {
                    if (API.auth == false) {
                        PopUp.deInitView()
                    } else {
                        TVA.handleReturn()
                    }
                } else {
                    if ($(".header-menu-last").html() != "VINCULAR") {
                        switch (j) {
                            case TVA.tvKey.KEY_LEFT:
                            case TVA.tvKey.KEY_UP:
                                Commons.offHover(View.actualHover);
                                Commons.setHover("login-alta");
                                break;
                            case TVA.tvKey.KEY_RIGHT:
                            case TVA.tvKey.KEY_DOWN:
                                Commons.offHover(View.actualHover);
                                Commons.setHover("login-login");
                                break;
                            case TVA.tvKey.KEY_ENTER:
                                if (View.actualHover == "login-alta" || View.actualHover == "login-login") {
                                    PopUp.goFrame(View.actualHover)
                                } else {}
                                break;
                            case TVA.tvKey.KEY_RETURN:
                                if (API.auth == false) {
                                    PopUp.deInitView()
                                } else {
                                    TVA.handleReturn()
                                }
                                break
                        }
                    } else {
                        if (j == TVA.tvKey.KEY_ENTER && !PopUp.time) {
                            if (API.auth == false) {
                                PopUp.deInitView()
                            } else {
                                TVA.handleReturn()
                            }
                        }
                    }
                }
            } else {
                if (PopUp.type == "pairing-login") {
                    PopUp.pairingHandler(j, false)
                } else {
                    if (PopUp.type == "pairing-alta") {
                        PopUp.pairingHandler(j, true)
                    } else {
                        if (PopUp.type == "playfrom") {
                            switch (j) {
                                case TVA.tvKey.KEY_LEFT:
                                    Commons.offHover(View.actualHover);
                                    if (View.actualHover == "option2-popup-message") {
                                        k = "option1-popup-message"
                                    } else {
                                        if (View.actualHover == "cancel-popup-message") {
                                            k = "option2-popup-message"
                                        } else {
                                            k = "cancel-popup-message"
                                        }
                                    }
                                    Commons.setHover(k);
                                    break;
                                case TVA.tvKey.KEY_RIGHT:
                                    Commons.offHover(View.actualHover);
                                    k = "option2-popup-message";
                                    if (View.actualHover == "option2-popup-message") {
                                        k = "cancel-popup-message"
                                    } else {
                                        if (View.actualHover == "cancel-popup-message") {
                                            k = "option1-popup-message"
                                        }
                                    }
                                    Commons.setHover(k);
                                    break;
                                case TVA.tvKey.KEY_ENTER:
                                    l = View.actualHover;
                                    PopUp.deInitView();
                                    if (e) {
                                        e(l)
                                    }
                                    break;
                                case TVA.tvKey.KEY_RETURN:
                                    PopUp.deInitView();
                                    if (e) {
                                        e("")
                                    }
                                    break
                            }
                            n.removeClass("hide-this").html("Ver desde donde lo dejé");
                            m.removeClass("hide-this").html("Ver desde el principio");
                            $("#cancel-popup-message").removeClass("hide-this")
                        } else {
                            if (PopUp.type == "direct-start") {
                                switch (j) {
                                    case TVA.tvKey.KEY_LEFT:
                                    case TVA.tvKey.KEY_RIGHT:
                                        Commons.offHover(View.actualHover);
                                        k = "option2-popup-message";
                                        if (View.actualHover == "option2-popup-message") {
                                            k = "option1-popup-message"
                                        }
                                        Commons.setHover(k);
                                        break;
                                    case TVA.tvKey.KEY_ENTER:
                                        var f = View.actualHover;
                                        PopUp.deInitView();
                                        if (e) {
                                            e(f == "option2-popup-message" ? 1 : 0)
                                        }
                                        break;
                                    case TVA.tvKey.KEY_RETURN:
                                        PopUp.deInitView();
                                        if (e) {
                                            e(0)
                                        }
                                        break
                                }
                            } else {
                                if (PopUp.type == "tutorial") {
                                    switch (j) {
                                        case TVA.tvKey.KEY_LEFT:
                                        case TVA.tvKey.KEY_RIGHT:
                                            if (m.hasClass("hide-this") == false) {
                                                Commons.offHover(View.actualHover);
                                                k = "option2-popup-message";
                                                if (View.actualHover == "option2-popup-message") {
                                                    if (j == TVA.tvKey.KEY_LEFT) {
                                                        k = "option1-popup-message"
                                                    } else {
                                                        k = "option3-popup-message"
                                                    }
                                                } else {
                                                    if (View.actualHover == "option3-popup-message") {
                                                        if (j == TVA.tvKey.KEY_LEFT) {
                                                            k = "option2-popup-message"
                                                        } else {
                                                            k = "option1-popup-message"
                                                        }
                                                    } else {
                                                        if (View.actualHover == "option1-popup-message") {
                                                            if (j == TVA.tvKey.KEY_LEFT) {
                                                                k = "option3-popup-message"
                                                            } else {
                                                                k = "option2-popup-message"
                                                            }
                                                        }
                                                    }
                                                }
                                                Commons.setHover(k);
                                                PopUp.checkTutorialScroll()
                                            } else {
                                                PopUp.tutorialMove(j == TVA.tvKey.KEY_LEFT ? -1 : +1)
                                            }
                                            break;
                                        case TVA.tvKey.KEY_ENTER:
                                            var d = n.hasClass("hide-this");
                                            if (d == false) {
                                                var i = View.actualHover;
                                                var g = (i == "option3-popup-message" ? 2 : i == "option2-popup-message" ? 1 : 0);
                                                if (g == 0 || g == 1) {
                                                    PopUp.deInitView();
                                                    if (e) {
                                                        e(g)
                                                    }
                                                } else {
                                                    PopUp.setFocus()
                                                }
                                            }
                                            break;
                                        case TVA.tvKey.KEY_RETURN:
                                            if (e) {
                                                e(0)
                                            }
                                            PopUp.deInitView();
                                            break
                                    }
                                } else {
                                    if (PopUp.type == "recording-chapter" || PopUp.type == "recording-serie") {
                                        switch (j) {
                                            case TVA.tvKey.KEY_LEFT:
                                                Commons.offHover(View.actualHover);
                                                k = "cancel-popup-message";
                                                if (View.actualHover == "option2-popup-message") {
                                                    k = "option1-popup-message"
                                                } else {
                                                    if (View.actualHover == "cancel-popup-message") {
                                                        if (PopUp.type == "recording-chapter") {
                                                            k = "option2-popup-message"
                                                        } else {
                                                            k = "option1-popup-message"
                                                        }
                                                    }
                                                }
                                                Commons.setHover(k);
                                                break;
                                            case TVA.tvKey.KEY_RIGHT:
                                                Commons.offHover(View.actualHover);
                                                k = "option2-popup-message";
                                                if (View.actualHover == "option2-popup-message") {
                                                    k = "cancel-popup-message"
                                                } else {
                                                    if (View.actualHover == "option1-popup-message") {
                                                        if (PopUp.type == "recording-chapter") {
                                                            k = "option2-popup-message"
                                                        } else {
                                                            k = "cancel-popup-message"
                                                        }
                                                    } else {
                                                        if (View.actualHover == "cancel-popup-message") {
                                                            k = "option1-popup-message"
                                                        }
                                                    }
                                                }
                                                Commons.setHover(k);
                                                break;
                                            case TVA.tvKey.KEY_ENTER:
                                                l = View.actualHover;
                                                PopUp.deInitView();
                                                if (e) {
                                                    if (l == "option1-popup-message") {
                                                        e(true)
                                                    } else {
                                                        if (l == "option2-popup-message") {
                                                            e(false)
                                                        }
                                                    }
                                                }
                                                break;
                                            case TVA.tvKey.KEY_RETURN:
                                                PopUp.deInitView();
                                                break
                                        }
                                    } else {
                                        if (PopUp.type == "voting") {
                                            var b, a;
                                            switch (j) {
                                                case TVA.tvKey.KEY_RIGHT:
                                                    if (View.actualHover === "voting-stars") {
                                                        b = $("#voting-stars-stars");
                                                        a = b.data("stars");
                                                        a++;
                                                        if (a <= 5) {
                                                            b.removeClass().addClass("stars stars" + a).data("stars", a)
                                                        }
                                                    } else {
                                                        Commons.offHover(View.actualHover);
                                                        Commons.setHover("cancel-popup-message")
                                                    }
                                                    break;
                                                case TVA.tvKey.KEY_LEFT:
                                                    if (View.actualHover === "voting-stars") {
                                                        b = $("#voting-stars-stars");
                                                        a = b.data("stars");
                                                        a--;
                                                        if (a > 0) {
                                                            b.removeClass().addClass("stars stars" + a).data("stars", a)
                                                        }
                                                    } else {
                                                        Commons.offHover(View.actualHover);
                                                        Commons.setHover("ok-popup-message")
                                                    }
                                                    break;
                                                case TVA.tvKey.KEY_UP:
                                                    if (View.actualHover !== "voting-stars") {
                                                        Commons.offHover(View.actualHover);
                                                        Commons.setHover("voting-stars")
                                                    }
                                                    break;
                                                case TVA.tvKey.KEY_DOWN:
                                                    if (View.actualHover === "voting-stars") {
                                                        Commons.offHover(View.actualHover);
                                                        Commons.setHover("ok-popup-message")
                                                    }
                                                    break;
                                                case TVA.tvKey.KEY_ENTER:
                                                    if (View.actualHover == "ok-popup-message") {
                                                        b = $("#voting-stars-stars");
                                                        var h = b.data("programId");
                                                        a = b.data("stars");
                                                        API.voteProgram(h, a)
                                                    } else {
                                                        if (View.actualHover == "cancel-popup-message") {
                                                            PopUp.deInitView()
                                                        }
                                                    }
                                                    break;
                                                case TVA.tvKey.KEY_RETURN:
                                                    PopUp.deInitView();
                                                    break
                                            }
                                        } else {
                                            if (j == TVA.tvKey.KEY_RETURN || (j == TVA.tvKey.KEY_ENTER && !PopUp.time)) {
                                                PopUp.callback = null;
                                                PopUp.deInitView();
                                                try {
                                                    if (e) {
                                                        e()
                                                    }
                                                    e = null
                                                } catch (c) {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    goFrame: function(a) {
        if (a == "login-alta" && TVA.GUI.REGISTER == false) {
            a = "login-login"
        }
        if (a == "login-alta") {
            PopUp.loadExternal("login-registro.html", function() {
                $("#login-registro-email").removeClass("hide-this");
                TVA.putInnerHTML(document.getElementById("login-title"), "Si todavía no eres usuario");
                TVA.putInnerHTML(document.getElementById("login-name-label"), "email");
                TVA.putInnerHTML(document.getElementById("login-subtitle"), "Regístrate y Pruébalo Gratis");
                TVA.putInnerHTML(document.getElementById("login-registro-btnentrar"), "Registrar");
                document.getElementById("condiciones-checkox-check").checked = false;
                $("#condiciones-checkox").removeClass("condiciones-checkox-true");
                $(".condiciones").removeClass("hide-this");
                Keyboard.init();
                PopUp.prepareFrame();
                var b = $("#login-select");
                if (b.is(":visible")) {
                    Commons.setHover("login-select")
                } else {
                    Commons.setHover("login-name")
                }
                PopUp.type = "pairing-alta";
                $(".salirlogin").removeClass("salirlogin-login");
                PopUp.focusHover()
            })
        } else {
            if (a == "login-login") {
                PopUp.loadExternal("login-registro.html", function() {
                    $("#login-registro-email").addClass("hide-this");
                    TVA.putInnerHTML(document.getElementById("login-title"), "Si ya eres usuario...");
                    TVA.putInnerHTML(document.getElementById("login-name-label"), "Usuario o email");
                    TVA.putInnerHTML(document.getElementById("login-subtitle"), "Accede a tu cuenta");
                    TVA.putInnerHTML(document.getElementById("login-registro-btnentrar"), "Entrar");
                    $(".condiciones").addClass("hide-this");
                    Keyboard.init();
                    PopUp.prepareFrame();
                    var b = $("#login-select");
                    if (b.is(":visible")) {
                        Commons.setHover("login-select")
                    } else {
                        Commons.setHover("login-name")
                    }
                    PopUp.type = "pairing-login";
                    $(".salirlogin").addClass("salirlogin-login");
                    PopUp.focusHover()
                })
            }
        }
    },
    prepareFrame: function() {
        var c = $(".login-select-div");
        if (TVA.OTT.CONFIGDATA && TVA.OTT.CONFIGDATA.providers && TVA.OTT.CONFIGDATA.providers.length > 0) {
            var b = $("#login-select");
            c.removeClass("hide-this");
            if (TVA.OTT.DEVICETYPE != 4002) {
                b.keydown(function(g) {
                    var d = false;
                    var f = 0;
                    try {
                        f = typeof g.keyCode !== "undefined" && g.keyCode > 0 ? g.keyCode : g.which;
                        d = PopUp.loginSelectKeyHandler(f);
                        if (d == false && g && g.preventDefault) {
                            g.preventDefault()
                        }
                    } catch (h) {}
                    return d
                })
            }
            PopUp.loginSelectKeyHandler(0)
        } else {
            c.addClass("hide-this")
        }
        try {
            if (TVA.OTT.CONFIGDATA.providerLogo && TVA.OTT.CONFIGDATA.providerLogo.length && TVA.OTT.CONFIGDATA.providerLogo.length > 10) {
                $(".logoregistro").css("background-position", "center").css("background-repeat", "no-repeat").css("background-size", "contain").css("background-image", "url(" + TVA.OTT.CONFIGDATA.providerLogo.replace("http://", "//").replace("https://", "//") + ")")
            }
        } catch (a) {}
    },
    loadPairing: function(a, c) {
        PopUp.hideMessagesContainer();
        $("#messages-frame").removeClass("hide-this");
        TVA.putInnerHTML(document.getElementById("codigoactivacion"), "");
        if (a) {
            TVA.putInnerHTML(document.getElementById("messages-frame"), "")
        }
        if (TVA.GUI.REGISTER == false && c === true && View.actualPageIs(PopUp) && (PopUp.type == "pairing" || PopUp.type == "pairing-login" || PopUp.type == "pairing-alta")) {
            if (API.auth == false) {
                PopUp.deInitView()
            } else {
                TVA.handleReturn()
            }
        } else {
            PopUp.type = "pairing";
            var b = "login.html";
            if (TVA.GUI.REGISTER == false) {
                PopUp.goFrame("login-login")
            } else {
                PopUp.loadExternal(b, function() {
                    if (TVA.GUI.REGISTER == false) {
                        return
                    }
                    if (PopUp.text != "") {
                        $("#login-alta-url").html(PopUp.text.replace(/<br\/>/g, "&nbsp;"))
                    }
                    if (API.auth == true) {
                        $("#ventana").addClass("ventana_login");
                        $(".salir").addClass("ventana_login")
                    }
                    PopUp.updateCode();
                    Commons.setHover("login-alta")
                })
            }
        }
    },
    loadExternal: function(a, b) {
        clearInterval(API.pairingTimeout);
        API.pairingTimeout = null;
        if (a == "login.html" && TVA.GUI.REGISTER == false) {
            PopUp.goFrame("login-login");
            return
        }
        PopUp.blur();
        View.loaderShow($("#messages-frame").css("zIndex"));
        setTimeout(function() {
            $("#messages-frame").load(a, function() {
                $(".servicename").html(TVA.OTT.SERVICE);
                try {
                    TVA.putInnerHTML(document.getElementById("CONDICIONESTXT"), TVA.login.CONDICIONES);
                    TVA.putInnerHTML(document.getElementById("PPRIVTXT"), TVA.login.PPRIV);
                    TVA.putInnerHTML(document.getElementById("CHECKBOXTXT"), TVA.login.CHECKBOX)
                } catch (d) {}
                b();
                View.loaderHide();
                if (a == "login.html") {
                    clearInterval(API.pairingTimeout);
                    if (TVA.OTT.PAIRING !== false) {
                        API.pairingTimeout = setInterval(API.authDevice, 10000)
                    }
                    var c = (TVA.GUI.BANNERURL && TVA.GUI.BANNERURL.length) ? TVA.GUI.BANNERURL : ("http://devices.totalchannel.tv/resources/smarttv/banners/login.002.jpg?nc=" + ((new Date()).getDate()));
                    $("<img/>").load(function() {
                        $(".bloquebanner").css("background-image", "url(" + c + ")").removeClass("bloquebanner-border")
                    }).error(function() {
                        var f = $(".bloquebanner");
                        var e = f.height();
                        f.addClass("hide-this");
                        $(".bloquetexto").css({
                            height: Math.round(e / 4) + "px"
                        });
                        $(".wrapperlogin").find(".logo").css({
                            marginTop: Math.round(e / 2) + "px"
                        })
                    }).attr("src", c)
                }
            })
        }, 200)
    },
    pairingHandler: function(a, e) {
        if ($("#messages-container").is(":visible")) {
            switch (a) {
                case TVA.tvKey.KEY_ENTER:
                case TVA.tvKey.KEY_RETURN:
                    PopUp.hideMessagesContainer();
                    Commons.setHover(PopUp.previousHover);
                    break
            }
            return
        } else {
            if (Keyboard.isFocused) {
                if (Keyboard.keyDown(a) == false) {
                    return
                }
            }
        }
        if (typeof e == "undefined") {
            e = (PopUp.type == "pairing-alta")
        }
        var g = $("#login-mail");
        var b = $("#login-select");
        switch (a) {
            case TVA.tvKey.KEY_2:
                Keyboard.shift();
                break;
            case TVA.tvKey.KEY_1:
                var f = document.getElementById("login-pass").type;
                if (f == "text") {
                    f = "password";
                    $("#vercontrasena-li").html("Mostrar contraseña")
                } else {
                    f = "text";
                    $("#vercontrasena-li").html("Ocultar contraseña")
                }
                document.getElementById("login-pass").type = f;
                break;
            case TVA.tvKey.KEY_UP:
                switch (View.actualHover) {
                    case "login-select":
                        return;
                        break;
                    case "login-name":
                        if (b.is(":visible")) {
                            Commons.setHover("login-select");
                            PopUp.focusHover()
                        }
                        break;
                    case "login-mail":
                        Commons.setHover("login-name");
                        PopUp.focusHover();
                        break;
                    case "login-pass":
                        if (g.is(":visible")) {
                            Commons.setHover("login-mail")
                        } else {
                            Commons.setHover("login-name")
                        }
                        PopUp.focusHover();
                        break;
                    case "condiciones-checkox":
                    case "condiciones-uso":
                        Commons.setHover("login-pass");
                        PopUp.focusHover();
                        break;
                    case "condiciones-politica":
                        Commons.setHover("condiciones-checkox");
                        break;
                    case "login-registro-btncancelar":
                    case "login-registro-btnentrar":
                        if (!e) {
                            Commons.setHover("login-pass");
                            PopUp.focusHover()
                        } else {
                            Commons.setHover("condiciones-politica");
                            PopUp.blur()
                        }
                        break;
                    case "politica-down":
                        Commons.setHover("politica-up");
                        break;
                    case "condiciones-down":
                        Commons.setHover("condiciones-up");
                        break;
                    case "politica-up":
                        Scroller.up("#politicadiv", ".condicionesusotexto");
                        break;
                    case "condiciones-up":
                        Scroller.up("#condicionesdiv", ".condicionesusotexto");
                        break
                }
                break;
            case TVA.tvKey.KEY_DOWN:
                switch (View.actualHover) {
                    case "login-select":
                        Commons.setHover("login-name");
                        PopUp.focusHover();
                        break;
                    case "login-name":
                        if (g.is(":visible")) {
                            Commons.setHover("login-mail")
                        } else {
                            Commons.setHover("login-pass")
                        }
                        PopUp.focusHover();
                        break;
                    case "login-mail":
                        Commons.setHover("login-pass");
                        PopUp.focusHover();
                        break;
                    case "login-pass":
                        if (!e) {
                            Commons.setHover("login-registro-btnentrar");
                            PopUp.blur()
                        } else {
                            Commons.setHover("condiciones-checkox");
                            PopUp.blur()
                        }
                        break;
                    case "condiciones-checkox":
                    case "condiciones-uso":
                        Commons.setHover("condiciones-politica");
                        break;
                    case "condiciones-politica":
                        Commons.setHover("login-registro-btnentrar");
                        break;
                    case "login-registro-btncancelar":
                    case "login-registro-btnentrar":
                        return;
                        break;
                    case "politica-up":
                        Commons.setHover("politica-down");
                        break;
                    case "condiciones-up":
                        Commons.setHover("condiciones-down");
                        break;
                    case "politica-down":
                        Scroller.down("#politicadiv", ".condicionesusotexto");
                        break;
                    case "condiciones-down":
                        Scroller.down("#condicionesdiv", ".condicionesusotexto");
                        break
                }
                break;
            case TVA.tvKey.KEY_LEFT:
                switch (View.actualHover) {
                    case "login-registro-btnentrar":
                        Commons.setHover("login-registro-btncancelar");
                        break;
                    case "condiciones-uso":
                        Commons.setHover("condiciones-checkox");
                        PopUp.blur();
                        break;
                    case "condiciones-politica":
                        Commons.setHover("condiciones-uso");
                        break;
                    case "politica-up":
                    case "politica-down":
                        Commons.setHover("condiciones-politica");
                        break;
                    case "condiciones-up":
                    case "condiciones-down":
                        Commons.setHover("condiciones-uso");
                        break;
                    case "login-select":
                        PopUp.loginSelectKeyHandler(a);
                        break
                }
                break;
            case TVA.tvKey.KEY_RIGHT:
                switch (View.actualHover) {
                    case "login-name":
                    case "login-mail":
                    case "login-pass":
                        Keyboard.gainFocus(document.getElementById(View.actualHover), PopUp.onKeyboardLeft);
                        PopUp.blur();
                        break;
                    case "login-registro-btncancelar":
                        Commons.setHover("login-registro-btnentrar");
                        break;
                    case "condiciones-checkox":
                        Commons.setHover("condiciones-uso");
                        break;
                    case "condiciones-uso":
                        if ($("#condicionesdiv").is(":visible")) {
                            Commons.setHover("condiciones-down")
                        }
                        break;
                    case "condiciones-politica":
                        if ($("#politicadiv").is(":visible")) {
                            Commons.setHover("politica-down")
                        }
                        break;
                    case "login-select":
                        PopUp.loginSelectKeyHandler(a);
                        break
                }
                break;
            case TVA.tvKey.KEY_ENTER:
                switch (View.actualHover) {
                    case "login-name":
                    case "login-mail":
                    case "login-pass":
                        Keyboard.gainFocus(document.getElementById(View.actualHover), PopUp.onKeyboardLeft);
                        PopUp.blur();
                        break;
                    case "login-registro-btncancelar":
                        PopUp.loadPairing(false, true);
                        break;
                    case "login-registro-btnentrar":
                        if (PopUp.doLogin() == false) {
                            return
                        }
                        break;
                    case "condiciones-checkox":
                        if (TVA.device === "samsung" && TVA.year < 2012) {
                            document.getElementById("condiciones-checkox-check").checked = !document.getElementById("condiciones-checkox-check").checked;
                            if (document.getElementById("condiciones-checkox-check").checked) {
                                $("#condiciones-checkox").addClass("condiciones-checkox-true")
                            } else {
                                $("#condiciones-checkox").removeClass("condiciones-checkox-true")
                            }
                            Commons.setHover("condiciones-checkox");
                            PopUp.focusHover();
                            return
                        } else {
                            $("#condiciones-checkox-check").click()
                        }
                        break;
                    case "condiciones-uso":
                        PopUp.showDiv(true);
                        Commons.setHover("condiciones-down");
                        break;
                    case "condiciones-politica":
                        PopUp.showDiv(true);
                        Commons.setHover("politica-down");
                        break;
                    case "politica-up":
                        Scroller.up("#politicadiv", ".condicionesusotexto");
                        break;
                    case "condiciones-up":
                        Scroller.up("#condicionesdiv", ".condicionesusotexto");
                        break;
                    case "politica-down":
                        Scroller.down("#politicadiv", ".condicionesusotexto");
                        break;
                    case "condiciones-down":
                        Scroller.down("#condicionesdiv", ".condicionesusotexto");
                        break
                }
                break;
            case TVA.tvKey.KEY_RETURN:
                if (PopUp.type == "pairing-login" || PopUp.type == "pairing-alta") {
                    PopUp.loadPairing(false, true)
                } else {
                    if (API.auth == false) {
                        PopUp.deInitView()
                    } else {
                        TVA.handleReturn()
                    }
                }
                break
        }
        var c = navigator.userAgent.toLowerCase();
        if (c.indexOf("playstation") < 0 && c.indexOf("sony") < 0 && c.indexOf("linux i686") > 0 && c.indexOf("firefox") > 0 && TVA.keyDownEvt) {
            if ((a >= 65 && a <= 90) || (a >= 48 && a <= 57)) {
                var d = "";
                if (a >= 65 && a <= 90) {
                    d = String.fromCharCode(a + 97 - 65)
                } else {
                    d = String.fromCharCode(TVA.keyDownEvt.which)
                }
                if (Keyboard.upperCase > 0 || TVA.keyDownEvt.shiftKey == true) {
                    d = d.toUpperCase()
                }
                Keyboard.input.value += d;
                Keyboard.moveCursor(false);
                if (Keyboard.upperCase == 1) {
                    Keyboard.upperCase = 0;
                    Keyboard.setMask()
                }
            }
        }
        PopUp.showDiv()
    },
    onKeyboardLeft: function() {
        Keyboard.loseFocus();
        Commons.setHover(View.actualHover);
        PopUp.focusHover()
    },
    hidePass: function() {
        var a = document.getElementById("login-pass");
        if (a.type == "text") {
            $("#vercontrasena-li").html("Mostrar contraseña");
            a.type = "password"
        }
    },
    doLogin: function() {
        PopUp.hidePass();
        var b = (PopUp.type == "pairing-login");
        var d = PopMsg.getText(54);
        if (!document.getElementById("login-name").value && d && d.length) {
            PopUp.handleLoginError({
                message: d.replace("#FIELD#", $("#login-name-label").html())
            });
            return false
        }
        if (!b) {
            document.getElementById("login-mail").value = document.getElementById("login-name").value
        }
        if (!document.getElementById("login-pass").value && d && d.length) {
            PopUp.handleLoginError({
                message: d.replace("#FIELD#", $("#login-pass-label").html())
            });
            return false
        }
        if (!b && !document.getElementById("condiciones-checkox-check").checked) {
            d = PopMsg.getText(55);
            if (d && d.length) {
                PopUp.handleLoginError({
                    message: PopMsg.getText(55)
                });
                return false
            }
        }
        var a = $("#login-select"),
            c = "";
        if (a && a.length && a.is(":visible")) {
            c = a.attr("lval");
            if (typeof c != "string" || !c.length) {
                PopUp.handleLoginError({
                    message: d.replace("#FIELD#", $("#login-select-label").html())
                });
                return false
            }
        }
        API.svcArgs = c;
        if (b) {
            API.doLogin(document.getElementById("login-name").value, document.getElementById("login-pass").value)
        } else {
            API.registerAndLogin(document.getElementById("login-name").value, document.getElementById("login-pass").value, document.getElementById("login-mail").value)
        }
        return true
    },
    handleLoginError: function(a) {
        PopUp.previousHover = View.actualHover;
        var b = DataStore.getFromObject(a, "message", "");
        if (!b) {
            if (a && a.error == "NOT_FOUND") {
                b = PopMsg.getText(35)
            } else {
                b = PopMsg.getText(29)
            }
        }
        TVA.putInnerHTML(document.getElementById("popup-message-text"), b);
        PopUp.showMessagesContainer();
        $("#popup-message-container").removeClass().addClass("message error-message");
        $("#ok-popup-message").removeClass("hide-this");
        $("#cancel-popup-message").addClass("hide-this");
        Commons.setHover("ok-popup-message")
    },
    showDiv: function(c) {
        var b = "";
        var a = "";
        switch (View.actualHover) {
            case "login-name":
            case "login-mail":
            case "login-pass":
            case "login-registro-btnentrar":
            case "login-registro-cancelar":
            case "condiciones-checkox":
                b = "#condicionesdiv,#politicadiv,.login-select-info";
                a = "#keyboarddiv,.salirlogin";
                break;
            case "condiciones-uso":
                if (!c) {
                    return
                }
            case "condiciones-up":
            case "condiciones-down":
                b = "#keyboarddiv,#politicadiv,.salirlogin,.login-select-info";
                a = "#condicionesdiv";
                break;
            case "condiciones-politica":
                if (!c) {
                    return
                }
            case "politica-up":
            case "politica-down":
                b = "#condicionesdiv,#keyboarddiv,.salirlogin,.login-select-info";
                a = "#politicadiv";
                break;
            case "login-select":
                b = "#condicionesdiv,#politicadiv,#keyboarddiv,.salirlogin";
                a = ".login-select-info";
                break
        }
        if ((a != "" && !$(a).is(":visible"))) {
            clearTimeout(PopUp.showHideTimeout);
            PopUp.showHideTimeout = setTimeout("$('" + b + "').addClass('hide-this');$('" + a + "').removeClass('hide-this');", 200)
        }
    },
    setHover: function(a) {
        if (TVA.device === "samsung" && TVA.year < 2012 && $("#messages-container").is(":visible")) {
            return
        }
        Commons.setHover(a);
        PopUp.showDiv()
    },
    showMessagesContainer: function() {
        if (TVA.device === "samsung" && TVA.year < 2012) {
            $(":input").css("visibility", "hidden")
        }
        $("#messages-container").removeClass("hide-this")
    },
    hideMessagesContainer: function() {
        if (TVA.device === "samsung" && TVA.year < 2012) {
            $(":input").css("visibility", "visible")
        }
        $("#messages-container").addClass("hide-this")
    },
    hideIfVisible: function() {
        $("#popup-message-container").addClass("hide-this");
        $("#messages-frame").addClass("hide-this");
        PopUp.showMessagesContainer()
    },
    showIfVisible: function() {
        if (PopUp.isVisible) {
            if (PopUp.type == "pairing-login" || PopUp.type == "pairing-alta" || (PopUp.type == "pairing" && $(".header-menu-last").html() != "VINCULAR")) {
                PopUp.hideMessagesContainer();
                $("#messages-frame").removeClass("hide-this")
            } else {
                PopUp.showMessagesContainer();
                $("#popup-message-container").removeClass("hide-this")
            }
        } else {
            PopUp.hideMessagesContainer()
        }
    },
    blur: function() {
        try {
            if (PopUp.lastFocus) {
                if (TVA.device === "samsung" && TVA.year < 2012) {} else {
                    try {
                        var c = true;
                        if (View.actualHover == "condiciones-checkox" || View.actualHover == "login-registro-btnentrar") {} else {
                            if (TVA.device === "ps3" || TVA.device === "toshiba") {
                                var b = PopUp.lastFocus;
                                if (TVA.OTT.DEVICETYPE == 4002) {
                                    c = true
                                } else {
                                    if (b && (b.nodeName == "INPUT" || b.nodeName == "SELECT" || b.nodeName == "TEXTAREA")) {
                                        c = false
                                    }
                                }
                            }
                        }
                        if (c == true) {
                            PopUp.lastFocus.blur()
                        }
                    } catch (f) {}
                }
                $(PopUp.lastFocus).removeClass("login-input-focus");
                PopUp.lastFocus = null
            } else {
                if ((TVA.device === "ps3" || TVA.device === "toshiba") && (View.actualHover == "condiciones-checkox" || View.actualHover == "login-registro-btnentrar")) {
                    $("#login-pass").blur()
                }
            }
        } catch (d) {}
    },
    focusHover: function() {
        PopUp.blur();
        try {
            PopUp.lastFocus = document.getElementById(View.actualHover);
            if (TVA.OTT.DEVICETYPE == 4002) {
                $(document).focus()
            } else {
                PopUp.lastFocus.focus()
            }
            $(PopUp.lastFocus).addClass("login-input-focus")
        } catch (a) {}
    },
    setStep: function(d, a) {
        var c = $("#messages-step");
        var b = $("#messages-image");
        if (d > 0) {
            setTimeout(function() {
                var e = "<ul>";
                for (var f = 0; f < a; f++) {
                    if (f == d - 1) {
                        e += "<li class='step-on' onclick='PopUp.tutorialMove(0," + (f + 1) + ")' > </li>"
                    } else {
                        e += "<li class='step-off' onclick='PopUp.tutorialMove(0," + (f + 1) + ")' > </li>"
                    }
                }
                e += "</ul>";
                c.html("").removeClass("hide-this").html(e);
                var g = (b.width() - c.width()) / 2;
                c.css({
                    left: b.offset().left + g
                })
            }, 10)
        } else {
            c.html("").addClass("hide-this")
        }
    }
};
PopUp.showTutorial = function(a) {
    if (API.reloading === true && a !== true) {
        return false
    }
    if (a === true || totalChannelStorage.getItem("tutorial") !== "0FFF") {
        if (!PopUp.tutorial || !PopUp.tutorial.length) {
            return false
        }
        PopUp.showMe("tutorial", false, "");
        PopUp.callback = function(b) {
            if (b == 1) {
                totalChannelStorage.setItem("tutorial", "0FFF")
            }
            if (API.nextStepFunction != null) {
                API.nextStepFunction();
                API.nextStepFunction = null
            }
        };
        return true
    }
    return false
};
PopUp.checkTutorialScroll = function() {
    if (PopUp.tutorialCurrentPosition == 1) {
        $("#messages-image-left").addClass("hide-this");
        if (PopUp.tutorial.length > 1) {
            $("#messages-image-right").removeClass("hide-this")
        } else {
            $("#messages-image-right").addClass("hide-this")
        }
    } else {
        if (PopUp.tutorial.length <= PopUp.tutorialCurrentPosition) {
            $("#messages-image-left").addClass("hide-this");
            $("#messages-image-right").addClass("hide-this")
        } else {
            $("#messages-image-left").removeClass("hide-this");
            $("#messages-image-right").removeClass("hide-this")
        }
    }
};
PopUp.tutorialMove = function(a, d) {
    var c = $("#option1-popup-message");
    var b = $("#option2-popup-message");
    if (a != 0) {
        PopUp.tutorialCurrentPosition += a
    } else {
        PopUp.tutorialCurrentPosition = d
    }
    if (PopUp.tutorialCurrentPosition < 1) {
        PopUp.tutorialCurrentPosition = 1
    }
    if (PopUp.tutorialCurrentPosition > PopUp.tutorial.length) {
        PopUp.tutorialCurrentPosition = PopUp.tutorial.length
    }
    $("#messages-image").removeClass("hide-this").css("background-image", 'url("' + PopUp.tutorial[PopUp.tutorialCurrentPosition - 1] + '")');
    if (PopUp.tutorial.length <= PopUp.tutorialCurrentPosition) {
        PopUp.setStep(0, 0);
        Commons.offHover(View.actualHover);
        Commons.setHover("option1-popup-message");
        c.removeClass("hide-this").html("Cerrar");
        b.removeClass("hide-this").html("No mostrar de nuevo");
        $("#option3-popup-message").removeClass("hide-this").html("Reiniciar tutorial")
    } else {
        PopUp.setStep(PopUp.tutorialCurrentPosition, PopUp.tutorial.length);
        c.addClass("hide-this");
        b.addClass("hide-this");
        $("#option3-popup-message").addClass("hide-this")
    }
    PopUp.checkTutorialScroll()
};
PopUp.loginSelectKeyHandler = function(a) {
    var c = null;
    switch (a) {
        case 0:
            c = 0;
            break;
        case TVA.tvKey.KEY_LEFT:
            c = -1;
            break;
        case TVA.tvKey.KEY_RIGHT:
            c = 1;
            break;
        case TVA.tvKey.KEY_DOWN:
            return true;
        case TVA.tvKey.KEY_UP:
            return true
    }
    if (c != null) {
        var e = TVA.OTT.CONFIGDATA.providers;
        var b = $("#login-select");
        var d = parseInt(b.attr("idx"));
        if (isNaN(d) || !isFinite(d) || d < 0) {
            d = 0
        }
        d += c;
        if (d >= e.length) {
            d = 0
        } else {
            if (d < 0) {
                d = e.length - 1
            }
        }
        b.attr("lval", e[d].value).attr("idx", d).val(e[d].text);
        return false
    }
    return true
};
var oldPlayerState = -1;
var VideoPlayer = {
    classname: "videoplayer",
    inited: false,
    details: {},
    buffering: false,
    bufferEmptyMessages: [],
    initialBufferingComplete: false,
    isHackNeededTimeout: null,
    videoStartTime: null,
    videoSeekTime: 0,
    currentSeconds: 0,
    currentSecondsOff: 0,
    currentTotalSeconds: 0,
    additionalSeconds: 0,
    playPbStart: 0,
    checkTimeout: null,
    lastPlayerResponseVideo: null,
    changingChannel: false,
    reloadingVideo: false,
    initView: function() {
        VideoPlayer.changingChannel = false;
        VideoPlayer.setFooter();
        VideoPlayer.inited = TVA_Player.init({
            height: 720,
            width: 1280
        });
        var a = $("#liveplayer-container");
        var c = $("#main-container");
        $("#top-panel").hide();
        VideoPlayer.showTrickModes();
        TVA_Player.setAudioInfo({
            track: [],
            selected: 0
        });
        TVA_Player.setSubtitlesInfo({
            track: [],
            selected: 0
        });
        if (VideoPlayer.details.isTrailer) {
            VideoPlayer.watchTrailer();
            VideoPlayer.setDetailsHTML()
        } else {
            if (VideoPlayer.details.isLive || TVA_Player.canSeek == false) {
                if (VideoPlayer.details.isLive && VideoPlayer.details.doNotReload !== true) {
                    API.getCurrentLiveContent(VideoPlayer.details.channelId)
                } else {
                    VideoPlayer.setDetailsHTML()
                }
            } else {
                VideoPlayer.setDetailsHTML()
            }
            if (VideoPlayer.details.assetId !== "") {
                try {
                    if (VideoPlayer.details.doNotReload === true && VideoPlayer.initPlayerResponseVideo) {
                        if (!VideoPlayer.initPlayer(VideoPlayer.initPlayerResponseVideo)) {
                            View.loaderHide()
                        } else {
                            VideoControls.hideControls();
                            Commons.setFocus("video-player");
                            Commons.setHover("video-player");
                            a.removeClass("hide-this");
                            c.addClass("hide-this");
                            VideoControls.updateTimer(0, 0);
                            View.loaderHide();
                            View.loaderShow()
                        }
                        return
                    }
                } catch (b) {}
                if (!API.getAsset(VideoPlayer.details.assetId)) {
                    View.loaderHide();
                    return
                }
            } else {
                OTTAnalytics.sendError(34, "VP01");
                PopMsg.show("error", 34, "VP01")
            }
        }
        Commons.setFocus("video-player");
        Commons.setHover("video-player");
        a.removeClass("hide-this");
        c.addClass("hide-this");
        VideoControls.updateTimer(0, 0);
        VideoControls.showControls(true, VideoPlayer.details.directMode);
        View.loaderHide();
        View.loaderShow()
    },
    showTrickModes: function() {
        var a = $("#video-container-controls").find(".trickmode");
        if (VideoPlayer.details.isTrailer) {
            a.show()
        } else {
            if (VideoPlayer.details.isLive || TVA_Player.canSeek == false) {
                a.hide()
            } else {
                a.show()
            }
        }
    },
    deInitView: function() {
        API.startPairingFn = null;
        API.videoPlayerLoaded = true;
        API.configLoaded = true;
        VideoPlayer.lastPlayerResponseVideo = VideoPlayer.initPlayerResponseVideo;
        window.clearTimeout(VideoPlayer.checkTimeout);
        if (!VideoPlayer.details || VideoPlayer.details.doNotReload !== true) {
            VideoPlayer.initPlayerResponseVideo = null
        }
        View.loaderHide();
        Subtitles.deinit();
        try {
            VideoControls.stop()
        } catch (a) {}
        try {
            VideoControls.reset()
        } catch (a) {}
        try {
            VideoControlsHack.disable()
        } catch (a) {}
        try {
            TVA_Player.setAudioInfo({
                track: [],
                selected: 0
            });
            TVA_Player.setSubtitlesInfo({
                track: [],
                selected: 0
            })
        } catch (a) {}
        window.clearTimeout(VideoPlayer.isHackNeededTimeout);
        VideoPlayer.currentSeconds = 0;
        VideoPlayer.currentSecondsOff = 0;
        VideoPlayer.playPbStart = 0;
        VideoPlayer.videoStartTime = null;
        VideoPlayer.setSeekTime(0);
        VideoPlayer.buffering = false;
        VideoPlayer.initialBufferingComplete = false;
        try {
            if (VideoPlayer.inited) {
                TVA_Player.deinit()
            }
        } catch (a) {}
        $("#liveplayer-container").removeClass("hide-this");
        Commons.offFocus(View.actualFocus);
        Commons.offHover(View.actualHover);
        if (VideoPlayer.changingChannel == false) {
            $("#main-container").removeClass("hide-this")
        }
        Header.hideMe(false);
        $("#footer").removeClass("hide-this");
        SidePanel.hideMe(true);
        SidePanel.reset()
    },
    setFocus: function() {
        VideoControls.setFocus()
    },
    getLive: function(b, a, h) {
        var g = false;
        if (Main.username === "" && typeof h !== "undefined") {
            g = false;
            a = 0
        } else {
            if (typeof a == "undefined" || a < 0) {
                a = 0;
                try {
                    var c = totalChannelStorage.getItem("API.channel.id");
                    if (c) {
                        for (var f = 0; f < b.length; f++) {
                            if (b[f]["id"] == c) {
                                a = f;
                                g = true;
                                break
                            }
                        }
                    }
                } catch (j) {}
            }
        }
        if (g == false && typeof h !== "undefined") {
            try {
                for (var d = 0; d < b.length; d++) {
                    if (b[d]["id"] == h) {
                        a = d;
                        break
                    }
                }
            } catch (j) {}
        }
        if (a < 0 || a >= b.length) {
            a = 0
        }
        if (!b.hasOwnProperty(a)) {
            a = 0
        }
        return b[a]
    },
    setDetails: function(b, a) {
        VideoPlayer.detailsType = b;
        VideoPlayer.details = a
    },
    setFooter: function() {
        var d = [];
        if (VideoPlayer.details.isTrailer) {} else {
            var g = false;
            if (VideoPlayer.details.isLive) {
                g = true
            }
            var b = false;
            if (Main.username !== "") {
                b = true
            }
            d.push({
                text: "Ficha",
                className: "one-button-footer",
                keycode: TVA.tvKey.KEY_1,
                method: function() {
                    var e = DataStore.get(Type.Program, VideoPlayer.details.programId);
                    if (e.parent) {
                        var i = DataStore.get(Type.Program, e.parent);
                        if (i && i.isGroup === true) {
                            var j = "-";
                            if (VideoPlayer.details.assetId) {
                                j = VideoPlayer.details.assetId
                            }
                            var k = {
                                programId: VideoPlayer.details.programId,
                                eventId: VideoPlayer.details.eventId,
                                channelId: VideoPlayer.details.channelId,
                                parentId: (e ? e.parent : ""),
                                assetId: j,
                                program: i,
                                programNode: e,
                                finfo: {
                                    programId: (e ? e.id : ""),
                                    assetId: j,
                                    eventId: VideoPlayer.details.eventId
                                }
                            };
                            DataList.setDetails(k, k.finfo);
                            View.changeView(DataList);
                            return
                        }
                    }
                    DataSheet.setDetails(VideoPlayer.details.programId, VideoPlayer.details.eventId, VideoPlayer.details.channelId, VideoPlayer.details.assetId, VideoPlayer.details.isLive);
                    View.changeView(DataSheet, true)
                }
            });
            d.push({
                text: "Destacados",
                className: "two-button-footer",
                keycode: TVA.tvKey.KEY_2,
                method: function() {
                    VideoControls.hideControls();
                    VideoControls.showControls(true, true)
                }
            });
            if (API.isRecordingDisabled() == false) {
                d.push({
                    text: "Grabar",
                    className: "red-button-footer",
                    disabled: !g,
                    keycode: TVA.tvKey.KEY_RED,
                    method: function() {
                        if (g) {
                            var e = VideoPlayer.details.eventId;
                            API.addMyTVItem("recording", e)
                        }
                        return false
                    }
                })
            }
            var c = "blue-button-footer";
            var a = TVA.tvKey.KEY_BLUE;
            if (TVA.device == "ps3") {
                c = "green-button-footer";
                a = TVA.tvKey.KEY_GREEN
            }
            d.push({
                text: "Votar",
                className: c,
                disabled: !b,
                keycode: a,
                method: function() {
                    if (b) {
                        var i = VideoPlayer.details.programId;
                        if (i) {
                            if (VideoControls.isHidden) {
                                VideoControls.showControls()
                            }
                            var e = DataStore.get(Type.Program, i);
                            PopUp.setVotingDetails(i, e.userVote);
                            PopUp.showMe("voting", false, "");
                            View.changeView(PopUp)
                        }
                    }
                    return false
                }
            });
            try {
                var f = TVA_Player.getAudioTracks();
                if (f && f.track && f.track.length > 1) {
                    c = "green-button-footer";
                    a = TVA.tvKey.KEY_GREEN;
                    if (TVA.device == "ps3") {
                        c = "blue-button-footer";
                        a = TVA.tvKey.KEY_BLUE
                    }
                    d.push({
                        text: "Audio",
                        className: c,
                        disabled: false,
                        keycode: a,
                        method: function() {
                            if (oldPlayerState == TVA_Player.state.playing) {
                                TVA_Player.setAudioTrack()
                            }
                            return false
                        }
                    })
                }
            } catch (h) {}
            try {
                if (Subtitles.loaded() == true) {
                    d.push({
                        text: "Subtitulos",
                        className: "yellow-button-footer",
                        disabled: false,
                        keycode: TVA.tvKey.KEY_YELLOW,
                        method: function() {
                            if (oldPlayerState == TVA_Player.state.playing) {
                                var e = Subtitles.showNext();
                                Alert.show("Subtitulos: " + ("" + e).toUpperCase(), true)
                            }
                            return false
                        }
                    })
                }
            } catch (h) {}
        }
        Footer.setLeft(d);
        Footer.enableLeft()
    },
    setDetailsHTML: function() {
        var f = "";
        var b = [];
        var k = "";
        var i = [];
        var e = "<span class='span-separator'></span>";
        if (VideoPlayer.details.programId || VideoPlayer.details.eventId) {
            var d = DataStore.get(Type.Program, VideoPlayer.details.programId);
            var a = DataStore.get(Type.Event, VideoPlayer.details.eventId);
            var h = DataStore.get(Type.Channel, a.channel);
            var g = "";
            if (a.startDate) {
                g = Utils.weekday[a.startDate.getDay()] + " " + a.startDate.getDate() + " de " + Utils.month[a.startDate.getMonth()] + "  " + Utils.checkTimeStr(a.startDate.getHours()) + ":" + Utils.checkTimeStr(a.startDate.getMinutes())
            }
            var c = "";
            if (d.season) {
                c = "T" + d.season;
                if (d.episodePartial) {
                    c += " Ep. " + d.episodePartial
                }
            }
            b = [];
            if (d.type) {
                b.push(d.type)
            }
            if (d.genre) {
                b.push(d.genre)
            }
            if (d.productionYear) {
                b.push(d.productionYear)
            }
            b = b.join(" ");
            k = DataSheet.buildIconHTML(d, a);
            i = [];
            if (h.name) {
                i.push("<span class='live-channel-name' >" + h.name + "</span>")
            }
            if (d.title) {
                i.push("<span class='live-title' >" + d.title + "</span>")
            }
            var j = [];
            if (d.episodeTitle) {
                j.push(d.episodeTitle)
            }
            if (c) {
                j.push(c)
            }
            if (b && b.length > 0) {
                j.push(b)
            }
            if (g && g.length > 0) {
                j.push(g)
            }
            if (k && k.length > 0) {
                j.push(k)
            }
            f += "<div class='info live-info'>";
            f += "<h1 class='series'>" + i.join(e) + "</h1>";
            f += "<h2 class='description'>" + j.join(e) + "</h2>";
            f += "</div>"
        }
        f += "<div class='top-panel-info' >Pulsa INFO para CERRAR</div>";
        TVA.putInnerHTML(document.getElementById("top-panel"), f);
        $("#top-panel").show()
    },
    watchTrailer: function() {
        var a = DataStore.get(Type.Program, VideoPlayer.details.programId);
        var b = a.trailerUrl;
        if (b) {
            TVA_Player.setURL(b);
            VideoControls.play();
            TVA_Player.show();
            VideoControls.setFocus()
        } else {
            OTTAnalytics.sendError(47, "VP02");
            PopMsg.show("error", 47, "VP02")
        }
    },
    initPlayer: function(b, e) {
        VideoPlayer.lastPlayerResponseVideo = {
            pbId: (b ? b.pbId : ""),
            assetId: (VideoPlayer.details ? VideoPlayer.details.assetId : "")
        };
        var d = "";
        try {
            if (e) {
                d = JSON.stringify(e)
            }
        } catch (a) {}
        Messenger.videoPlayerResponseReceived(d);
        if (b && b.url && b.pbId) {
            TVA_Player.canSeek = !Utils.isHLS(b.url);
            VideoPlayer.showTrickModes();
            var c = parseInt(b.played);
            if (VideoPlayer.reloadingVideo == true) {
                c = 0
            }
            if (VideoPlayer.details.isLive === true && VideoPlayer.details.channelId !== null) {
                totalChannelStorage.setItem("API.channel.id", VideoPlayer.details.channelId)
            }
            if (TVA.OTT.PLAYER_CAN_PLAY_FROM_POSITION && !isNaN(c) && c > 30 && !VideoPlayer.details.isLive) {
                View.loaderHide();
                PopUp.showMe("playfrom", false, "");
                View.changeView(PopUp);
                VideoPlayer.videoItem = b;
                PopUp.callback = VideoPlayer.initPlayerCallback
            } else {
                b.played = null;
                VideoPlayer.initPlayerResponse(b)
            }
            return true
        } else {
            OTTAnalytics.sendError(47, "VP03");
            View.previousPage(true);
            PopMsg.show("error", 47, "VP03");
            return false
        }
    },
    initPlayerCallback: function(b) {
        var a = VideoPlayer.videoItem;
        switch (b) {
            case "option2-popup-message":
                a.played = null;
            case "option1-popup-message":
                View.loaderShow();
                VideoPlayer.initPlayerResponse(a);
                break;
            default:
                View.previousPage();
                VideoPlayer.lastPlayerResponseVideo = a;
                Messenger.videoPlayerCanceled();
                VideoPlayer.lastPlayerResponseVideo = null;
                break
        }
    },
    initPlayerResponse: function(g) {
        VideoPlayer.initPlayerResponseVideo = g;
        VideoPlayer.lastPlayerResponseVideo = g;
        Messenger.videoPlayerConnecting();
        window.clearTimeout(VideoPlayer.checkTimeout);
        VideoPlayer.checkTimeout = window.setTimeout("VideoPlayer.checkPlayerStatus();", View.bufferingTimeoutTime);
        var c = $("#video-drm");
        try {
            OTTAnalytics.preStartPlay(g, VideoPlayer.details);
            c.html("");
            var h = parseInt(g.played);
            if (isNaN(h) || h < 0) {
                h = 0
            }
            if (typeof TVA_Widevine != "undefined" && g.drm && g.drm["type"] == "widevine") {
                TVA_Widevine.playWidevine({
                    url: g.url,
                    drmServerURL: g.drm["emmUrl"],
                    portalID: g.drm["portalId"],
                    streamID: g.pbId,
                    userData: g.pbId,
                    plastPlayedPosition: h
                })
            } else {
                if (g.drm && g.drm["type"] == "playready" && !window.platform) {
                    c.html(".");
                    g.drm["userData"] = g.pbId;
                    TVA_Player.play(g.drm, h)
                } else {
                    if (g.drm && g.drm["type"] == "playready" && window.platform) {
                        c.html(".");
                        var b = {
                            drm: g.drm["type"],
                            url: g.drm["url"],
                            licenseUrl: g.drm["emmUrl"],
                            userData: g.pbId
                        };
                        var f = h > 0 ? h : null;
                        if (window.platform.videoPlayer.play(b, f) === null) {
                            OTTAnalytics.sendError(47, "VP07");
                            View.previousPage(true);
                            PopMsg.show("error", 47, "VP07");
                            return
                        }
                    } else {
                        if (!g.drm || g.drm["type"] == "" || g.drm["type"] == "none") {
                            c.html("'");
                            if (!window.platform && typeof TVA_Widevine != "undefined" && TVA_Widevine.playVideo) {
                                TVA_Widevine.playVideo(g.url, h)
                            } else {
                                if (window.platform && window.platform.videoPlayer) {
                                    var a = {
                                        url: g.url
                                    };
                                    var d = h > 0 ? h : null;
                                    if (window.platform.videoPlayer.play(a, d) === null) {
                                        OTTAnalytics.sendError(47, "VP08");
                                        View.previousPage(true);
                                        PopMsg.show("error", 47, "VP08");
                                        return
                                    }
                                } else {
                                    OTTAnalytics.sendError(47, "VP04");
                                    View.previousPage(true);
                                    PopMsg.show("error", 47, "VP04");
                                    return
                                }
                            }
                        } else {
                            OTTAnalytics.sendError(47, "VP05");
                            View.previousPage(true);
                            PopMsg.show("error", 47, "VP05");
                            return
                        }
                    }
                }
            }
        } catch (i) {}
        OTTAnalytics.startPlay(g, VideoPlayer.details);
        EVT.reset();
        EVT.currentAssetId = VideoPlayer.details.assetId;
        EVT.currentPbId = g.pbId;
        VideoPlayer.buffering = false;
        VideoPlayer.currentSeconds = 0;
        VideoPlayer.currentSecondsOff = 0;
        VideoPlayer.videoStartTime = Utils.now();
        VideoPlayer.setSeekTime(VideoPlayer.videoStartTime);
        VideoControls.play();
        TVA_Player.show();
        VideoControls.setFocus()
    },
    setSeekTime: function(a) {
        if (typeof a == "undefined") {
            a = Utils.now()
        }
        VideoPlayer.videoSeekTime = a
    },
    checkPlayerStatus: function() {
        console.log("###############");
        if (VideoPlayer.initialBufferingComplete == false) {
            OTTAnalytics.sendError(34, "VPLC02");
            View.previousPage(true);
            PopMsg.show("error", 34, "VPLC02")
        }
    },
    reloadVideo: function() {
        if (VideoPlayer.details.isLive) {
            return VideoPlayer.currentChannel()
        } else {
            var a = VideoPlayer.playPbStart;
            var c = EVT.pausedTime;
            VideoPlayer.details.doNotReload = true;
            VideoPlayer.reloadingVideo = true;
            VideoPlayer.changingChannel = true;
            try {
                View.changeView(VideoPlayer)
            } catch (b) {}
            VideoPlayer.reloadingVideo = false;
            VideoPlayer.playPbStart = a;
            EVT.pausedTime = c;
            if (TVA.device == "ps3" && TVA_Player.playPos >= 15) {
                if (window && window.platform && window.platform.ver >= 4) {
                    TVA_Player.pendingSeek = TVA_Player.playPos - 15
                } else {
                    TVA_Player.backward(15)
                }
            }
        }
        return true
    },
    currentChannel: function() {
        if (!VideoPlayer.details.isLive) {
            return false
        }
        if (DataStore.LiveChannels.length <= 0) {
            return false
        }
        var c;
        for (var a = 0; a < DataStore.LiveChannels.length; a++) {
            c = DataStore.LiveChannels[a];
            if (c.id === VideoPlayer.details.channelId) {
                var b = VideoPlayer.playPbStart;
                var d = EVT.pausedTime;
                VideoPlayer.setDetails("live", {
                    channelId: c.id,
                    programId: null,
                    eventId: null,
                    assetId: c.liveAsset,
                    isLive: true,
                    doNotReload: true
                });
                VideoPlayer.changingChannel = true;
                View.changeView(VideoPlayer);
                VideoPlayer.playPbStart = b;
                EVT.pausedTime = d;
                return true
            }
        }
        return false
    },
    channelNext: function() {
        if (!VideoPlayer.details.isLive) {
            return false
        }
        if (DataStore.LiveChannels.length <= 1) {
            return false
        }
        var c = false;
        var d;
        var e = null;
        var a = "" + VideoPlayer.details.channelId;
        for (var b = 0; b < DataStore.LiveChannels.length; b++) {
            d = DataStore.LiveChannels[b];
            if (c) {
                e = d;
                break
            } else {
                if ("" + d.id === a) {
                    c = true
                }
            }
        }
        if (!e) {
            e = DataStore.LiveChannels[0]
        }
        if (e) {
            VideoPlayer.setDetails("live", {
                channelId: e.id,
                programId: null,
                eventId: null,
                assetId: e.liveAsset,
                isLive: true
            });
            VideoPlayer.changingChannel = true;
            View.changeView(VideoPlayer);
            return true
        }
        return false
    },
    channelPrevious: function() {
        if (!VideoPlayer.details.isLive) {
            return false
        }
        if (DataStore.LiveChannels.length <= 1) {
            return false
        }
        var c = false;
        var d;
        var e = null;
        var a = "" + VideoPlayer.details.channelId;
        for (var b = DataStore.LiveChannels.length - 1; b >= 0; b--) {
            d = DataStore.LiveChannels[b];
            if (c) {
                e = d;
                break
            } else {
                if ("" + d.id === a) {
                    c = true
                }
            }
        }
        if (!e && DataStore.LiveChannels.length > 0) {
            e = DataStore.LiveChannels[DataStore.LiveChannels.length - 1]
        }
        if (e) {
            VideoPlayer.setDetails("live", {
                channelId: e.id,
                programId: null,
                eventId: null,
                assetId: e.liveAsset,
                isLive: true
            });
            VideoPlayer.changingChannel = true;
            View.changeView(VideoPlayer);
            return true
        }
        return false
    },
    hasStarted: function(c) {
        if (typeof c === "undefined") {
            c = true
        }
        var b = false;
        if (VideoPlayer.initialBufferingComplete == true) {
            var a = Utils.now();
            b = (a > VideoPlayer.videoStartTime + (3000));
            if (c) {
                b = b && (a > VideoPlayer.videoSeekTime + (6000))
            }
        }
        return b
    },
    bufferingStart: function() {
        VideoPlayer.buffering = true;
        View.bufferingStart();
        if (VideoPlayer.hasStarted(true) == true) {
            var c = new Date();
            var a = c.toISOString();
            var b = a.match(/(\d{4}\-\d{2}\-\d{2})T(\d{2}:\d{2}:\d{2})/);
            VideoPlayer.bufferEmptyMessages.push(b[1] + " " + b[2])
        }
    },
    bufferingComplete: function() {
        VideoPlayer.buffering = false;
        View.bufferingComplete();
        if (!VideoPlayer.initialBufferingComplete) {
            VideoPlayer.initialBufferingComplete = true;
            VideoPlayer.bufferEmptyMessages = [];
            EVT.start();
            VideoPlayer.videoStartTime = Utils.now();
            VideoPlayer.isHackNeededTimeout = window.setTimeout(VideoPlayer.checkIfHackNeeded, 3000);
            TVA_Player.checkAudioAndSubtitles();
            if (!VideoPlayer.details.isLive) {
                try {
                    var a = "";
                    if (VideoPlayer.initPlayerResponseVideo) {
                        a = VideoPlayer.initPlayerResponseVideo.url
                    }
                    if (a && a !== "") {
                        Subtitles.check(a, function() {
                            if (VideoPlayer.initialBufferingComplete == false || oldPlayerState != TVA_Player.state.playing) {
                                return -1
                            }
                            return TVA_Player.getRealTime() / 1000
                        }, function(c) {
                            $(".subtitles").html(c.replace(/\n/g, "<br/>"))
                        })
                    }
                } catch (b) {}
            }
            VideoControls.mouseover();
            VideoControls.checkControls()
        }
    },
    checkIfHackNeeded: function() {
        if (!VideoPlayer.details.isLive) {
            VideoControlsHack.disable();
            return
        }
        var a = Utils.now();
        if (VideoPlayer.videoStartTime < a - 4000) {
            if (VideoPlayer.currentSeconds === 0) {
                VideoControlsHack.enable()
            } else {
                VideoControlsHack.disable()
            }
        } else {
            VideoPlayer.isHackNeededTimeout = window.setTimeout(VideoPlayer.checkIfHackNeeded, 1000)
        }
    },
    keyHandler: function(a) {
        if (View.actualFocus === "side-panel-container-video") {
            SidePanel.keyHandler(a)
        } else {
            if (VideoControls.visibleControls() == false) {
                if (View.actualFocus == "filter-thumbnail-list-container") {
                    ThumbSliderFilter.keyHandler(a, true, true);
                    if (a != TVA.tvKey.KEY_STOP) {
                        return
                    }
                } else {
                    if (View.actualFocus == "thumbnail-list") {
                        if (a != TVA.tvKey.KEY_DOWN) {
                            ThumbSlider.keyHandler(a, true)
                        } else {
                            VideoControls.hideControls()
                        }
                        if (a != TVA.tvKey.KEY_STOP) {
                            return
                        }
                    }
                }
            }
            switch (a) {
                case TVA.tvKey.KEY_ENTER:
                    if (VideoControls.isHidden) {
                        API.getChannels("live");
                        return
                    }
                    break;
                case TVA.tvKey.KEY_PLAY:
                    VideoControls.play();
                    break;
                case TVA.tvKey.KEY_PAUSE:
                    VideoControls.pause();
                    break;
                case TVA.tvKey.KEY_RW:
                    VideoControls.rewind();
                    break;
                case TVA.tvKey.KEY_FF:
                    VideoControls.forward();
                    break;
                case TVA.tvKey.KEY_FAST_FW:
                    if (TVA.tvKey.KEY_FAST_FW > 0) {
                        VideoControls.fForward()
                    }
                    break;
                case TVA.tvKey.KEY_FAST_RW:
                    if (TVA.tvKey.KEY_FAST_RW > 0) {
                        VideoControls.fRewind()
                    }
                    break;
                case TVA.tvKey.KEY_STOP:
                    if (VideoControls.isHidden) {
                        VideoControls.showControls()
                    }
                    View.previousPage();
                    break;
                case TVA.tvKey.KEY_UP:
                    if (!VideoControls.isHidden) {
                        Header.setFocus();
                        return
                    }
                    break;
                case TVA.tvKey.KEY_CH_UP:
                    VideoPlayer.channelNext();
                    break;
                case TVA.tvKey.KEY_CH_DOWN:
                    VideoPlayer.channelPrevious();
                    break;
                case TVA.tvKey.KEY_INFO:
                case TVA.tvKey.KEY_DOWN:
                    VideoControls.lastButtonPress = 0;
                    if (VideoControls.isHidden) {
                        VideoControls.showControls()
                    } else {
                        VideoControls.hideControls()
                    }
                    return;
                    break;
                case TVA.tvKey.KEY_5:
                case TVA.tvKey.KEY_ZOOM:
                    if (TVA.device == "ps3") {
                        return
                    }
                    if (TVA_Player.zoom()) {
                        VideoControls.lastButtonPress = 0;
                        return
                    }
                    break;
                default:
                    break
            }
            VideoControls.keyHandler(a)
        }
    },
    checkChannelError: function() {
        if (VideoPlayer.details.isLive && VideoPlayer.details.channelId) {
            var a = totalChannelStorage.getItem("API.channel.id");
            if (a === VideoPlayer.details.channelId) {
                totalChannelStorage.setItem("API.channel.id", "")
            }
        }
    },
    seekTo: function(a) {
        if (!VideoPlayer.details.isLive && oldPlayerState == TVA_Player.state.playing) {
            try {
                if (TVA_Player.seekTo) {
                    VideoPlayer.setSeekTime();
                    TVA_Player.seekTo(a)
                }
            } catch (b) {}
        }
    }
};

function playHeadChanged(a) {
    if (OTTAnalytics.updatingPlayTime == true) {
        return
    }
    VideoPlayer.currentSeconds = a;
    OTTAnalytics.checkPosition(a);
    if (VideoPlayer.details.isLive) {
        VideoControls.updateTimer(VideoPlayer.additionalSeconds + a, VideoPlayer.currentTotalSeconds)
    } else {
        VideoControls.updateTimer(a, TVA_Player.getLength())
    }
}

function playStateChanged(b) {
    if (Debug.enabled) {
        var c = "";
        if (b == TVA_Player.state.stopped) {
            c = "STOPPED"
        } else {
            if (b == TVA_Player.state.playing) {
                c = "PLAYING"
            } else {
                if (b == TVA_Player.state.paused) {
                    c = "PAUSED"
                } else {
                    if (b == TVA_Player.state.buffering) {
                        c = "BUFFERING"
                    } else {
                        if (b == TVA_Player.state.finished) {
                            c = "FINISHED"
                        } else {
                            if (b == TVA_Player.state.connecting) {
                                c = "CONNECTING"
                            }
                        }
                    }
                }
            }
        }
    }
    if (VideoPlayer.details.isLive) {
        if (oldPlayerState == TVA_Player.state.stopped && b == TVA_Player.state.playing) {
            View.loaderShow()
        } else {
            if (oldPlayerState == TVA_Player.state.buffering && b == TVA_Player.state.playing) {
                View.loaderHide()
            }
        }
    }
    if (b == TVA_Player.state.finished) {
        var a = false;
        if (VideoPlayer.initialBufferingComplete == false && TVA.device == "lg") {
            a = true
        }
        if (a) {
            OTTAnalytics.sendError(34, "VPLC01")
        }
        View.previousPage(a);
        if (a) {
            PopMsg.show("error", 34, "VPLC01")
        }
    } else {
        if (b == TVA_Player.state.buffering) {
            VideoPlayer.bufferingStart()
        } else {
            if (b == TVA_Player.state.playing && VideoPlayer.buffering) {
                VideoPlayer.bufferingComplete()
            }
        }
    }
    if (b == TVA_Player.state.playing) {
        $("#player-controls0").addClass("pause");
        Subtitles.refresh()
    } else {
        if (b == TVA_Player.state.paused) {
            $("#player-controls0").removeClass("pause")
        }
        Subtitles.pause()
    }
    oldPlayerState = b
}

function playError(b, a) {
    if (b === true && View.actualPageIs(VideoPlayer)) {
        var c = "VPCN09";
        if (typeof a != "undefined") {
            c = c + ":" + a
        }
        OTTAnalytics.sendError(34, c);
        View.previousPage(true);
        PopMsg.show("error", 34, c)
    }
}

function bufferingProgress(a) {};
var View = {
    actualPage: null,
    actualFocus: "",
    actualHover: "",
    tempPage: null,
    history: [],
    loaderDepth: 0,
    loaderStepTime: 200,
    loaderElement: false,
    loaderAnim: false,
    loaderAnimIndex: 0,
    loaderTimeout: null,
    bufferingTimeout: null,
    bufferingTimeoutTime: 20000,
    lostFocus: null,
    lostHover: null,
    getMainPageResponseParams: null,
    init: function() {
        View.actualPage = null;
        View.actualFocus = "";
        View.actualHover = "";
        View.lostFocus = null;
        View.lostHover = null;
        View.tempPage = null;
        View.history = [];
        View.loaderDepth = 0;
        View.loaderAnimIndex = 0;
        View.loaderTimeout = null;
        View.bufferingTimeout = null;
        View.getMainPageResponseParams = null;
        try {
            $("#prev-big-slider").addClass("hide-this");
            $("#next-big-slider").addClass("hide-this");
            $("#sliders").addClass("hide-this");
            $("#content-multi-panel").addClass("hide-this");
            $("#multi-panel").addClass("hide-this");
            $("#epg").addClass("hide-this");
            $("#small-slider-vertical").addClass("hide-this");
            $("#liveplayer-container").addClass("hide-this");
            $("#main-container").removeClass("hide-this")
        } catch (a) {}
    },
    initButtons: function() {
        try {
            if (TVA.OTT.CONFIGDATA && TVA.OTT.CONFIGDATA.recordingDisabled === true) {
                TVA.GUI.HIDE_BUTTONS.push(".header-myrecordings")
            }
            if (TVA.GUI && TVA.GUI.HIDE_BUTTONS) {
                for (var b in TVA.GUI.HIDE_BUTTONS) {
                    if (TVA.GUI.HIDE_BUTTONS.hasOwnProperty(b)) {
                        $(TVA.GUI.HIDE_BUTTONS[b]).addClass("hide-this").hide()
                    }
                }
            }
            var a = "hide-this-at-startup";
            var c = $("." + a);
            if (c && c.length) {
                c.removeClass(a)
            }
        } catch (d) {}
    },
    processConfig: function(f) {
        try {
            ThumbSliderFilter.jsonResponse(typeof f !== "undefined" && f !== null && typeof f.cscat !== "undefined" ? f.cscat : null);
            Header.jsonResponse(typeof f !== "undefined" && f !== null && typeof f.totalstore !== "undefined" ? f.totalstore : null);
            PopUp.tutorial = (typeof f !== "undefined" && f !== null && typeof f.tutorial !== "undefined" ? f.tutorial : null);
            var d = [];
            for (var c in PopUp.tutorial) {
                if (PopUp.tutorial.hasOwnProperty(c)) {
                    d[d.length] = PopUp.tutorial[c]
                }
            }
            PopUp.tutorial = d
        } catch (h) {}
        var a = $(".header-menu-help");
        if (!PopUp.tutorial || !PopUp.tutorial.length) {
            a.addClass("hide-this")
        } else {
            a.removeClass("hide-this")
        }
        Home.alignDivs();
        try {
            if (TVA.OTT.CONFIGDATA.providerLogo && TVA.OTT.CONFIGDATA.providerLogo.length && TVA.OTT.CONFIGDATA.providerLogo.length > 10) {
                try {
                    var g = $("#page-logo").find("img");
                    g.attr("src", TVA.OTT.CONFIGDATA.providerLogo.replace("http://", "//").replace("https://", "//")).addClass("img-external")
                } catch (h) {}
            }
        } catch (b) {}
    },
    changeView: function(c, g) {
        if (c == null) {
            return
        }
        if (API.isRecordingDisabled() == true && c == Mytv) {
            c = EPG
        }
        if (TVA.OTT.CLOSE_CHLIST == false && View.actualPage === c && SidePanel.isVisible() && !View.actualPageIs(VideoPlayer)) {
            SidePanel.closePanel();
            if (!View.actualPageIs(Storefront)) {
                return
            }
        }
        if (c == VideoPlayer && Main.username == "") {
            API.startPairing();
            return
        }
        View.loaderShow();
        if (View.actualPage == null) {
            View.actualPage = c;
            View.lostFocus = null;
            View.lostHover = null
        } else {
            if (c === PopUp) {
                if (View.actualPage !== PopUp) {
                    View.lostFocus = View.actualFocus;
                    View.lostHover = View.actualHover;
                    View.tempPage = View.actualPage
                } else {}
            } else {
                APICache.cleanData();
                View.actualPage.deInitView(c);
                View.lostFocus = null;
                View.lostHover = null
            }
            try {} catch (b) {}
            if (API.auth == true && Main.username == "" && ((View.actualPage == VideoPlayer && c != VideoPlayer && c != PopUp) || (View.actualPage == Home && c == PopUp))) {
                var e = false;
                if (View.actualPage === VideoPlayer && c != VideoPlayer && c != PopUp) {
                    e = true;
                    c = Home
                } else {
                    if (PopUp.type.indexOf("pairing") < 0) {
                        e = true
                    }
                }
                if (e) {
                    API.startPairing(false)
                }
            }
            if (g === false) {} else {
                if (g === true || (View.actualPage !== c && View.actualPage !== VideoPlayer && View.actualPage !== PopUp && c !== PopUp)) {
                    View.history.push(View.actualPage)
                }
            }
            var f = [];
            for (var a = 0; a < View.history.length; a++) {
                var d = View.history[a];
                if (View.history.lastIndexOf(d) === a) {
                    f.push(d)
                }
            }
            View.history = f;
            View.actualPage = c
        }
        View.initActualPage(false, false, null)
    },
    initActualPage: function(b, a, c) {
        if (typeof b == "boolean" && b == true) {
            if (API.initialized && !Header.storeFrontLoaded) {
                API.getStorefrontOps()
            }
        }
        if (typeof b !== "boolean") {
            a = false
        }
        Header.checkActive();
        View.showClock();
        View.actualPage.fromHistory = a;
        View.actualPage.initView(c)
    },
    previousPage: function(c, b) {
        if (c === true) {
            if (View.actualPage === PopUp) {
                PopUp.deInitView()
            }
            Messenger.videoPlayerStoppedDisabled = true
        }
        if (TVA.device === "ps3" && View.history.length <= 0 && window.platform.ver > 0) {
            return
        } else {
            if (TVA.OTT.DEVICETYPE == 3001 && TVA.OTT.WEBOS && View.history.length <= 0) {
                history.back();
                return
            }
        }
        if (b !== true && View.history.length == 0) {
            return
        }
        View.loaderShow();
        APICache.cleanData();
        View.newPage = View.history.pop();
        var a = View.actualPage;
        View.actualPage.deInitView(View.newPage);
        View.actualPage = View.newPage;
        if (View.actualPage) {
            View.initActualPage(false, true, a);
            $("#header" + Header.activePage).removeClass("active");
            $("#header" + Header.actualPage).addClass("active");
            Header.activePage = Header.actualPage
        } else {
            Main.unload()
        }
    },
    loaderInit: function() {
        View.loaderElement = $("#loadermask");
        if (!View.loaderElement.attr("zidx")) {
            View.loaderElement.attr("zidx", View.loaderElement.css("zIndex"))
        }
        View.loaderAnim = $("#loaderAnim");
        View.loaderAnimIndex = 0;
        clearTimeout(View.loaderTimeout);
        View.loaderTimeout = null;
        clearTimeout(View.bufferingTimeout);
        View.bufferingTimeout = null
    },
    loaderShow: function(a) {
        View.loaderDepth++;
        if (View.loaderDepth == 1 || !View.loaderElement.is(":visible")) {
            View.loaderElement.show();
            View.loaderAnimStart()
        }
        clearTimeout(View.bufferingTimeout);
        View.bufferingTimeout = setTimeout(View.bufferingTimeoutComplete, API.timeout + 1000);
        if (a) {
            View.loaderElement.css("zIndex", a + 1)
        }
    },
    loaderHide: function() {
        View.loaderDepth--;
        if (View.loaderDepth <= 0) {
            View.loaderElement.hide();
            View.loaderAnimStop();
            View.loaderElement.css("zIndex", View.loaderElement.attr("zidx"));
            View.loaderDepth = 0;
            TVA.invalidate()
        }
    },
    bufferingStart: function() {
        if (View.loaderDepth == 0) {
            View.loaderElement.show();
            View.loaderAnimStart()
        }
        clearTimeout(View.bufferingTimeout);
        View.bufferingTimeout = setTimeout(View.bufferingTimeoutComplete, View.bufferingTimeoutTime)
    },
    bufferingTimeoutComplete: function() {
        View.loaderDepth--;
        View.bufferingComplete()
    },
    bufferingComplete: function() {
        clearTimeout(View.bufferingTimeout);
        View.loaderElement.hide();
        View.loaderAnimStop();
        View.loaderElement.css("zIndex", View.loaderElement.attr("zidx"));
        View.loaderDepth = 0;
        TVA.invalidate()
    },
    loaderAnimStart: function() {
        clearTimeout(View.loaderTimeout);
        View.loaderTimeout = window.setTimeout(View.loaderAnimStep, View.loaderStepTime)
    },
    loaderAnimStep: function() {
        View.loaderAnimIndex++;
        if (View.loaderAnimIndex > 11) {
            View.loaderAnimIndex = 0
        }
        View.loaderAnim.removeClass().addClass("load" + View.loaderAnimIndex);
        clearTimeout(View.loaderTimeout);
        View.loaderTimeout = window.setTimeout(View.loaderAnimStep, View.loaderStepTime)
    },
    loaderAnimStop: function() {
        clearTimeout(View.bufferingTimeout);
        View.bufferingTimeout = null;
        clearTimeout(View.loaderTimeout);
        View.loaderTimeout = null
    },
    actualPageIs: function(a) {
        return (View.actualPage === a || (View.tempPage === a && View.actualPage === PopUp))
    },
    showClock: function() {
        try {
            var a = totalChannelStorage.getItem("clock");
            if (a == "1" && View.actualPageIs(VideoPlayer)) {
                $("#directo").addClass("hide-this");
                $("#clock-footer").removeClass("hide-this");
                $("#video-buffering").removeClass("hide-this");
                View.updateClock()
            } else {
                $("#directo").removeClass("hide-this");
                $("#clock-footer").addClass("hide-this");
                $("#video-buffering").addClass("hide-this")
            }
        } catch (c) {}
    },
    updateClock: function() {
        try {
            var c = new Date();
            var b = "" + c.getHours();
            if (b.length == 1) {
                b = "0" + b
            }
            var f = "" + c.getMinutes();
            if (f.length == 1) {
                f = "0" + f
            }
            TVA.putInnerHTML(document.getElementById("clock-footer"), b + ":" + f);
            var a = "" + VideoPlayer.bufferEmptyMessages.length;
            if (a == "0") {
                a = ""
            }
            TVA.putInnerHTML(document.getElementById("video-buffering"), a)
        } catch (d) {}
    },
    showMainPageInfo: function(f, g) {
        var e = {};
        if (typeof g !== "string") {
            for (var a in g) {
                if (g.hasOwnProperty(a)) {
                    if (g[a] && g[a] !== "") {
                        e[a] = g[a]
                    }
                }
            }
        } else {
            e = g
        }
        var d = {
            c: f || (View.actualPage ? View.actualPage.classname : "Home"),
            h: Header.actualPage,
            p: e
        };
        try {
            var b = navigator.userAgent;
            if (b.indexOf("Firefox") > 0) {
                console.log(JSON.stringify(d).replace(/"/g, "|"))
            }
        } catch (c) {}
    },
    getMainPage: function(a) {
        TVA.getMainPage(a)
    },
    getMainPageResponse: function(a, f) {
        var b = null;
        var d = -1;
        var h = null;
        try {
            if (typeof f == "string" && f.length) {
                if (View.getMainPageResponseParams == f) {
                    return
                }
                h = f;
                f = JSON.parse(f);
                if (f) {
                    var g = null;
                    switch (f.c) {
                        case "datalist":
                            g = View.decodeParams(f.p);
                            DataList.focusInfo = g;
                            DataList.info = g;
                            b = DataList;
                            break;
                        case "datasheet":
                            g = View.decodeParams(f.p);
                            DataSheet.details = g;
                            b = DataSheet;
                            break;
                        case "storefront":
                            Storefront.mode = f.p;
                            b = Storefront;
                            break;
                        case "epg":
                            b = EPG;
                            break;
                        case "mytv":
                            Mytv.type = f.p;
                            b = Mytv;
                            break
                    }
                    if (b != null) {
                        d = f.h
                    }
                }
            }
        } catch (c) {}
        if (b == null) {
            if (View.getMainPageResponseParams != null && View.actualPage != null) {
                return
            }
            b = Home
        }
        if (d >= 0) {
            Header.previousActivePage = d;
            Header.checkActive();
            Header.actualPage = d
        }
        View.getMainPageResponseParams = h;
        a(b)
    },
    decodeParams: function(a) {
        var b = {};
        if (a.m) {
            b.parentId = a.m
        }
        if (a.p) {
            b.programId = a.p
        }
        if (a.e) {
            b.eventId = a.e
        }
        if (a.a) {
            b.assetId = a.a
        }
        if (a.c) {
            b.channelId = a.c
        }
        return b
    }
};
var Alert = {
    time: 2000,
    timeout: null,
    show: function(g, c, d) {
        if (typeof d === "undefined") {
            d = Alert.time;
            if (c !== true) {
                d = 3000
            }
        }
        var f = "alert-message";
        var h = "-txt";
        if (c === true) {
            f += "-centered";
            h += "-p"
        }
        TVA.putInnerHTML(document.getElementById(f + h), g);
        var b = $("#" + f);
        b.show();
        if (c === true) {
            var a = $("#" + f + "-txt");
            if (a.height() > 0 && a.find("p").length == 1 && a.find("p").height() > 0) {
                var e = Math.floor((a.height() - a.find("p").height()) / 2);
                if (e <= 0) {
                    e = "0"
                }
                a.css("padding-top", e + "px")
            } else {
                a.css("padding-top", "21px")
            }
        }
        clearTimeout(this.timeout);
        this.timeout = setTimeout("Alert.hide(" + c + ")", d)
    },
    hide: function(a) {
        var b = "alert-message";
        var c = "-txt";
        if (a === true) {
            b += "-centered";
            c += "-p"
        }
        TVA.putInnerHTML(document.getElementById(b + c), "");
        $("#" + b).hide()
    }
};
var Keyboard = {
    mask: 0,
    hover: null,
    input: "",
    upperCase: 0,
    isFocused: false,
    onLeft: null,
    textHelper: null,
    init: function() {
        Keyboard.mask = 0;
        Keyboard.hover = null;
        Keyboard.input = "";
        Keyboard.upperCase = 0;
        Keyboard.isFocused = false;
        Keyboard.onLeft = null;
        Keyboard.textHelper = null;
        $("#keyboarddiv .keyboard").mouseover(function() {
            Keyboard.setFocus(this)
        });
        this.setMask()
    },
    gainFocus: function(b, a) {
        this.isFocused = true;
        this.onLeft = a;
        $("#keyboarddiv").show();
        this.input = b;
        Keyboard.setFocus($("#1_0").get(0));
        return false
    },
    loseFocus: function(a) {
        this.isFocused = false;
        this.cleanFocus();
        this.input.focus();
        this.onLeft = null;
        if (a === true) {
            Main.keyDown(TVA.tvKey.KEY_DOWN)
        }
        return false
    },
    hide: function() {
        $("#keyboarddiv").hide();
        this.loseFocus();
        return false
    },
    shift: function() {
        Keyboard.upperCase++;
        if (Keyboard.upperCase > 2) {
            Keyboard.upperCase = 0
        }
        if (Keyboard.upperCase < 2) {
            Keyboard.setMask()
        } else {
            Keyboard.setShift()
        }
        return false
    },
    changeMask: function() {
        this.mask++;
        if (this.mask >= 3) {
            this.mask = 0
        }
        Keyboard.setMask();
        return false
    },
    del: function() {
        if (Keyboard.input) {
            Keyboard.input.value = Keyboard.input.value.substr(0, Keyboard.input.value.length - 1);
            Keyboard.moveCursor()
        }
        return false
    },
    moveCursor: function(b) {
        try {
            if (!Keyboard.input) {
                return
            }
            if (Keyboard.input.setSelectionRange) {
                var a = Keyboard.input.value.length;
                Keyboard.input.setSelectionRange(a, a)
            } else {
                Keyboard.input.value = Keyboard.input.value
            }
            Keyboard.input.scrollLeft = Keyboard.input.scrollWidth
        } catch (c) {}
    },
    decodeEntities: function(a) {
        if (Keyboard.textHelper == null) {
            Keyboard.textHelper = document.createElement("textarea")
        }
        TVA.putInnerHTML(Keyboard.textHelper, a);
        var b = Keyboard.textHelper.value;
        if (b.length == 0) {
            b = a
        }
        return b.substr(0, 1)
    },
    toHTML: function(a) {
        return a.replace(/[<>\&\"\']/g, function(b) {
            return "&#" + b.charCodeAt(0) + ";"
        })
    },
    _lastOnClickTimestamp: 0,
    onClick: function(b) {
        if (TVA.OTT.DEVICETYPE == 3000) {
            var a = Utils.now();
            if (Keyboard._lastOnClickTimestamp == 0) {
                Keyboard._lastOnClickTimestamp = a
            } else {
                if (a - Keyboard._lastOnClickTimestamp < 90) {
                    return
                }
                Keyboard._lastOnClickTimestamp = a
            }
        }
        if (!Keyboard.input) {
            Keyboard.input = $("#" + View.actualHover);
            if (Keyboard.input.length) {
                Keyboard.input = Keyboard.input.get(0)
            } else {
                Keyboard.input = null
            }
        }
        if (Keyboard.input) {
            Keyboard.input.value += this.decodeEntities($(b).html());
            Keyboard.moveCursor(false);
            if (Keyboard.upperCase == 1) {
                Keyboard.upperCase = 0;
                Keyboard.setMask()
            }
        }
        return false
    },
    cleanFocus: function() {
        if (Keyboard.hover) {
            $(Keyboard.hover).removeClass("keyboard-hover");
            var b = $(Keyboard.hover).attr("class").split(" ");
            for (var a = 0; a < b.length; a++) {
                if (b[a].substr(0, 5) == "icon-") {
                    $(Keyboard.hover).removeClass(b[a] + "-hover")
                }
            }
        }
        return false
    },
    setFocus: function(c) {
        this.cleanFocus();
        Keyboard.hover = c;
        var b = $(Keyboard.hover).attr("class").split(" ");
        for (var a = 0; a < b.length; a++) {
            if (b[a].substr(0, 5) == "icon-") {
                $(Keyboard.hover).addClass(b[a] + "-hover")
            }
        }
        $(Keyboard.hover).addClass("keyboard-hover");
        return false
    },
    setMask: function() {
        $("#keyboarddiv .keyboard").each(function() {
            var d = $(this);
            var c = d.attr(Keyboard.upperCase > 0 ? "umask" : "mask");
            if (!c) {
                return
            }
            var e = Keyboard.mask;
            if (e >= c.length) {
                e = c.length - 1
            }
            var b = c.substr(e, 1);
            b = Keyboard.decodeEntities(b);
            d.html(Keyboard.toHTML(b))
        });
        var a = "";
        switch (this.mask) {
            case 0:
                a = "#12";
                break;
            case 1:
                a = "]ÀÈ";
                break;
            default:
                a = "ABC";
                break
        }
        if (Keyboard.upperCase > 0) {
            a = a.toUpperCase()
        } else {
            a = a.toLowerCase()
        }
        $("#keyboarddiv .changebtn").html(a);
        if (Keyboard.upperCase > 0) {
            $("#keyboard-shift-li").html("Minúsculas")
        } else {
            $("#keyboard-shift-li").html("Mayúsculas")
        }
        Keyboard.setShift();
        return false
    },
    setShift: function() {
        if (Keyboard.upperCase == 2) {
            $(".icon-shift").addClass("icon-shift-fixed")
        } else {
            $(".icon-shift").removeClass("icon-shift-fixed")
        }
    },
    keyDown: function(h) {
        var f = h;
        if (h.keyCode) {
            f = h.keyCode
        }
        var c = true;
        try {
            if (!$("#keyboarddiv").is(":visible")) {
                if (f == 13 || f == 29443) {
                    if (!h.target && !Keyboard.input) {
                        h.target = $("#txt1").get(0)
                    }
                    Keyboard.setFocus(h.target)
                }
                return false
            }
            if (!Keyboard.hover) {
                Keyboard.setFocus($("#0_0").get(0));
                return false
            }
            var d = $(Keyboard.hover);
            var i = d.attr("id").split("_");
            var b = false,
                a = false;
            switch (f) {
                case TVA.tvKey.KEY_UP:
                    b = true;
                    i[0]--;
                    c = false;
                    break;
                case TVA.tvKey.KEY_DOWN:
                    b = true;
                    i[0]++;
                    c = false;
                    break;
                case TVA.tvKey.KEY_LEFT:
                    if (i[1] == 0 && this.onLeft) {
                        this.onLeft();
                        return false
                    }
                    i[1]--;
                    var g = i[1];
                    if (!$("#" + i[0] + "_" + g).length) {
                        while (!$("#" + i[0] + "_" + g).length && g > 0) {
                            g--
                        }
                    }
                    if ($("#" + i[0] + "_" + g).length) {
                        i[1] = g
                    }
                    a = true;
                    c = false;
                    break;
                case TVA.tvKey.KEY_RIGHT:
                    i[1]++;
                    var g = i[1];
                    if (!$("#" + i[0] + "_" + g).length) {
                        while (!$("#" + i[0] + "_" + g).length && g < 20) {
                            g++
                        }
                    }
                    if ($("#" + i[0] + "_" + g).length) {
                        i[1] = g
                    }
                    a = true;
                    c = false;
                    break;
                case TVA.tvKey.KEY_ENTER:
                    if (d.attr("onclick")) {
                        d.click()
                    } else {
                        Keyboard.onClick("#" + d.attr("id"))
                    }
                    c = false;
                    break
            }
            if (b) {
                var g = i[1];
                while (!$("#" + i[0] + "_" + g).length && g > 0) {
                    g--
                }
                if (!$("#" + i[0] + "_" + g).length) {
                    while (!$("#" + i[0] + "_" + g).length && g < 20) {
                        g++
                    }
                }
                if ($("#" + i[0] + "_" + g).length) {
                    i[1] = g;
                    a = true
                }
            }
            if (a && $("#" + i[0] + "_" + i[1]).length) {
                Keyboard.setFocus($("#" + i[0] + "_" + i[1]).get(0))
            }
            try {
                h.preventDefault()
            } catch (h) {}
        } catch (h) {}
        return c
    }
};
if (!TVA.login) {
    TVA.login = {};
    TVA.login.CHECKBOX = "";
    TVA.login.CONDICIONES = '<h3>CONDICIONES DE USO DE OVER THE TOP INTERNET TELEVISION,S.L.</h3><br/> <br/> <font class="bold" >ACEPTACIÓN:</font><br/> <br/> Este sitio web es propiedad de OVER THE TOP INTERNET TELEVISION SL, con domicilio social en Av. Diagonal 177- Planta 12, Barcelona 08018, provista de CIF B-66250192 e inscrita en el Registro Mercantil de Barcelona, al Tomo 44.234, Folio 173, Sección 8, hoja número B 450480.<br/> <br/> Es importante que leas con atención todos los términos y Condiciones de Uso contenidos a continuación.<u>Mediante el mero acceso o uso a este sitio web, adquieres la condición de "Usuario" y consientes dichos términos y Condiciones de Uso. Si estás en desacuerdo, por favor no uses la web o Plataforma de OVER THE TOP INTERNET TELEVISION SL ni te registres en la misma</u>.<br/> <br/> Nos reservamos la posibilidad de modificar estas Condiciones de Uso en cualquier momento por razones legales, por motivos técnicos o por cambios en la prestación de los servicios de OVER THE TOP INTERNET TELEVISION SL, en adelante OTT Internet TV SL, o en la normativa, así como modificaciones que pudieran derivarse de códigos tipo aplicables o, en su caso, por decisiones corporativas. Cuando esto ocurra lo publicaremos en la Web y/o te avisaremos de ello a través de nuestra Plataforma, y si continúas utilizando los servicios de OTT Internet TV SL, entenderemos que has aceptado las modificaciones introducidas. Si no estuvieras de acuerdo con las modificaciones efectuadas, deberás dejar de utilizar la Plataforma.<br/> <br/> Te recomendamos no obstante que visites periódicamente las Condiciones de Uso para comprobar si existen actualizaciones. Puedes consultar siempre que lo desees la versión vigente en el apartado Condiciones de Uso que permanecerán disponibles en la Web.<br/> <br/> Estas Condiciones de Uso podrán ser completadas por OTT Internet TV SL a través de condiciones particulares que regulen el uso de determinados servicios o productos (ya sean gratuitos o ya sean de pago) que se puedan ofrecer a través de la Plataforma. En efecto, el acceso a ciertos contenidos y la utilización de algunos servicios o productos pueden encontrarse sometidos a determinadas condiciones particulares, que, según los casos, sustituirán, completarán y/o modificarán las presentes Condiciones de Uso de OTT Internet TV SL y, en caso de contradicción, prevalecerán los términos de las condiciones particulares sobre los estipulados en estas Condiciones de Uso.<br/> <br/> Estos términos y Condiciones de Uso serán de aplicación a los usuarios de la web o Plataforma de OTT Internet TV SL. No obstante, te advertimos de que la web o Plataforma de OTT Internet TV SL podría contener links o enlaces a websites de terceros. En este sentido, OTT Internet TV SL no asume ninguna responsabilidad por el contenido, políticas de privacidad o prácticas de estos terceros, tal y como se indicará a continuación. Adicionalmente, OTT Internet TV SL no podrá censurar o editar el contenido de cualquier sitio web de terceros. Mediante el uso de este sitio web, consientes en mantener indemne a OTT Internet TV SL de cualquier tipo de responsabilidad derivado del uso por tu parte del sitio web de cualquier tercero.<br/> <br/> <font class="bold" >ACCESO A LA WEB Y REGISTRO:</font><br/> <br/> El acceso a la Web es libre y gratuito. No obstante, para poder acceder a determinados servicios de OTT Internet TV SL será indispensable que te registres a través de nuestra Plataforma, mediante la cumplimentación de los oportunos formularios.<br/> <br/> Te informamos de que para registrarte en OTT Internet TV SL tienes que ser mayor de 14 años y sólo podrás contratar nuestros servicios como cliente si eres mayor de edad.<br/> <br/> El equipo de OTT Internet TV SL puede ponerse en contacto contigo, en cualquier momento, para que demuestres tu edad real aportándonos fotocopia de tu DNI o un documento equivalente. Si no se nos facilita esa información dentro del plazo que se te indique, desde OTT Internet TV SL nos reservamos el derecho a bloquear o cancelar tu cuenta.<br/> <br/> Los datos del DNI o del documento que se aporte serán utilizados única y exclusivamente por el personal autorizado de OTT Internet TV SL para realizar esta tarea de identificación, o, en su caso, para realizar tareas de facturación de los servicios o productos que contrates.<br/> <br/> Si somos informados de que un menor de edad está registrado como usuario y/o cliente en OTT Internet TV SL incumpliendo lo dispuesto en los párrafos anteriores, adoptaremos las medidas necesarias y podremos eliminar o bloquear la cuenta de ese usuario y/o cliente.<br/> <br/> Te pedimos que cualquier abuso o vulneración de las presentes Condiciones de Uso que detectes y, en particular, aquéllos que afecten a menores, nos lo reportes de inmediato.<br/> <br/> Como Usuario, aceptas que OTT Internet TV SL pueda utilizar y/o almacenar la información facilitada por tu parte o por tu banco (datos personales, datos de tu red, preferencias y si finalmente contratas el servicio, datos bancarios). También nos autorizas para que podamos recoger ciertos datos estáticos de tu configuración de red, que nos permitan identificarla. Todos estos datos, nos ayudarán para personalizar el servicio y para poder prestarte algunos servicios específicos, tanto de contenidos, como de publicidad, así como para configurarte el servicio de alertas (tanto de sistema, como de grabaciones) y comunicados de novedades y estrenos de contenidos.<u>Te sugerimos en este punto que leas con atención nuestra Política de Privacidad y protección de datos (ver aviso legal específico)</u>.<br/> <br/> En tu condición de usuario, te comprometes a hacer un uso diligente del código de usuario y de la clave de acceso facilitadas en el momento de efectuar el registro en nuestra Plataforma. En este sentido, te comprometes a mantenerlas en secreto y a comunicar a OTT Internet TV SL cualquier pérdida, revelación a terceros o robo de las mismas en el menor plazo de tiempo posible, con el fin de que OTT Internet TV SL pueda desactivarlas. Queda expresamente prohibido compartir las cuentas de usuario y nos reservamos el derecho de tomar cuantas medidas estén a nuestro alcance para evitarlo y restringir el servicio en caso de que se constate que esto ha ocurrido.<br/> <br/> <font class="bold" >DESCRIPCIÓN DEL SERVICIO:</font><br/> <br/> OTT Internet TV SL pone a disposición de cualquier usuario que se registre en su Plataforma y que disponga de una conexión de banda ancha a Internet, la opción de seleccionar y visualizar distintos canales de televisión y contenidos audiovisuales de terceros en el territorio español.<br/> <br/> Como usuario, tendrás opción de disfrutar del servicio en la modalidad "Prueba Gratis", si la opción comercial que selecciones recoge esta posibilidad, de acuerdo a las condiciones establecidas en cada momento y publicadas y detalladas en la web o site comercial asociados. Es necesario que te registres para poder disfrutar del servicio en esta modalidad y aceptar las Condiciones de Uso, así como nuestra Política de Privacidad. En esta modalidad, podrás disfrutar del servicio durante el período máximo establecido en la promoción comercial correspondiente, salvo que expresamente indiquemos lo contrario en la descripción del servicio publicada en la web.<br/> <br/> Como usuario puedes tener acceso a nuestra Plataforma y a los contenidos comercializados a través de la misma utilizando equipos o dispositivos autorizados de conexión, tales como Media Centers, Set-Top Boxes, y televisores, o bien a través de dispositivos SmartTV, inclusive plataformas móviles, televisores, consolas, tablets y PC, así como a través de plataformas que integran servicios Over The Top de las principales marcas disponibles en el mercado en cada momento. En la web o site comercial asociado se facilitará siempre un listado actualizado de los dispositivos sobre los cuales se puede disfrutar de cada paquete de servicio.<br/> <br/> Del mismo modo, se facilitará siempre vía web un listado y detalle actualizado de los paquetes y productos comerciales ofertados y disponibles sobre cada dispositivo.<br/> <br/> En cada uno de los paquetes comerciales y para cada uno de los canales que se incluyen en la oferta comercial concreta, te informamos de que se incluyen todas modalidades de acceso a los contenidos audiovisuales (salvo que se indique lo contrario en la descripción del paquete comercial correspondiente), así como distintos servicios editoriales de nuestra Plataforma, entre ellas y sin perjuicio de cualquier otra modalidad que se ofrezca en el futuro:<br/> <br/> <font class="bold" >1. <u>Televisión en directo</u></font>: te permite visualizar en directo  y a través de la conexión de banda ancha a internet, el mismo contenido que el/los canal/es retransmiten libremente o a través de las plataformas de TV de pago tradicionales. Accediendo a la información de cada paquete contratado, hallarás el número de canales disponibles (si se añaden otros), así como el detalle de los mismos.<br/> <br/> <font class="bold" >2. <u>Servicio Network PVR</u></font>: te permite programar grabaciones en  la Guía de Programación prevista para los siguientes días. Podrás siempre solicitar que se grabe un programa que se emita en cualquiera de los canales que se emiten en la plataforma y desde cualquier dispositivo. Las grabaciones no se podrán reproducir desde dispositivos portables si no te encuentras en tu hogar, salvo que explícitamente se indique en la descripción del paquete contratado. Por lo tanto, es imprescindible que nos definas cuál será tu punto de acceso habitual en el momento del registro de la cuenta de usuario para que designemos ese sitio como tu punto de acceso autorizado (MiRed). En algunos casos y bajo determinadas circunstancias puntuales, nos reservamos el derecho de ajustar o modificar las condiciones de uso de este servicio. El número de horas de grabación, así como el número de grabaciones simultáneas que te permitimos, estará especificado en todo momento en la descripción del paquete comercial disponible en nuestra web. Por otra parte, las grabaciones tendrán una duración limitada, por lo que deberás tenerlo en cuenta para disfrutar del servicio. El sistema te avisará de ciertos eventos relevantes, tales como avisos de caducidad, alertas de disponibilidad de los contenidos grabados, necesidad de borrado por limitaciones de espacio, etc. El sistema te ofrece un servicio de alertas básico activado en el momento de registro, pero podrás configurarlo a tu medida, accediendo a la zona de MiPerfil.<br/> <br/> <font class="bold" >3. <u>Servicio Catch Up TV</u></font>: te permite seleccionar y visualizar a través de la conexión de banda ancha a internet, contenidos en diferido de los emitidos en directo por los canales de TV y que la plataforma referencia como piezas independientes a través de los diferentes motores de recomendación de la plataforma. La duración y la accesibilidad de estos contenidos son limitadas y están en todo caso sujeta a los derechos de explotación que le han sido licenciados a OTT Internet TV SL por parte de los titulares de contenidos.<br/> <br/> <font class="bold" >4. <u>Servicio de Recomendaciones de Consumo de Contenidos  y Contenido Editorial Relacional</u></font>: el sistema configurará distintos grados y modalidades de recomendación de consumo de contenidos y pondrá a tu disposición la correspondiente selección, tanto en las interfaces de servicio en las distintas aplicaciones, como en envíos programados a tu cuenta de correo. Así mismo, incluimos también un servicio editorial que te permite estar informado de las novedades de los contenidos que se emiten en cada canal, así como de datos relevantes del sector, de las productoras, actores y personajes, así como de los canales de televisión y distribuidoras de dichos contenidos, que te será enviado a tu correo y también se mostrará en otros formatos y medidas en algunas interfaces de servicio en cada dispositivo (secciones de Destacados, Sliders promocionales, Secciones más Vistas más Valoradas TotalFan, etc.). El sistema te ofrece un servicio de básico activado en el momento de registro, pero podrás configurarlo a tu medida, accediendo a la zona de MiPerfil.<br/> <br/> <font class="bold" >5. <u>Servicio DTA</u></font> (Dynamic Targetted Advertising): la plataforma incluirá en algunos contenidos, cierta publicidad en distintos formatos, que pondrá a tu disposición en función de tu perfil de uso y consumo de contenidos. A medida que se recaben datos sobre tus preferencias, este servicio se irá personalizando y adaptando. Este servicio no es configurable por el usuario.<br/> <br/> OTT Internet TV SL se reserva el derecho de limitar el número máximo de horas de consumo de visualización de video a 20 horas en los paquetes TotalChannel Pack Premium, paquete TotalChannel DUO y a 40 horas en el paquete TotalChannel Pack Premium XL, a su pleno criterio con el fin de poder garantizar la calidad de servicio. En caso de que adopte esta medida, se le comunicará al usuario la tarifa o paquete comercial recomendado para satisfacer sus hábitos de consumo.<br/> <br/> El usuario podrá visualizar los contenidos desde cualquier dispositivo habilitado, pero en ningún caso se le permite más de una visualización simultánea. El número posible de dispositivos vinculables estará especificado en la descripción del servicio en la web.<br/> <br/> Cualquier cambio efectuado en la zona Mi Perfil del apartado "Notificaciones" se hará efectivo en un plazo de 72h.<br/> <br/> <font class="bold" ><u>CONDICIONES DE CONTRATACIÓN</u></font><br/> <br/> Como Usuario, tendrás siempre acceso y, en todo caso con carácter previo al proceso de contratación de nuestros servicios, a la Descripción del Servicio y Condiciones de Contratación. Asimismo, antes de completar el proceso de compra, podrás visualizar el precio final a pagar por el Servicio, con el correspondiente desglose.<br/> <br/> Durante el proceso de contratación se te indicarán los medios técnicos para identificar y corregir los errores en la introducción de tus datos.Todo el proceso de contratación se realizará en lengua española.<br/> <br/> Todo el proceso de contratación se realizará en lengua española.<br/> <br/> Una vez contratado el Servicio, en cualquiera de sus modalidades, podrás visualizar una página de confirmación.Una vez contratado el Servicio, en cualquiera de sus modalidades, podrás visualizar una página de confirmación.<br/> <br/> Dentro de las 24 horas siguientes a la contratación, OTT Internet TV SL te remitirá mediante email confirmatorio de los productos o servicios contratados a OTT Internet TV SL. Dicho email, así como estas condiciones es susceptible de archivarse e imprimirse. De igual forma, te informamos de que OTT Internet TV SL archivará los documentos electrónicos que formalicen el servicio contratado. Finalmente, te informamos de que podrás descargarte online la factura desde nuestra Web, sí así lo deseas.<br/> <br/> El precio de compra de los servicios deberá ser abonado, mediante tarjeta de crédito o débito, asociada a una cuenta bancaria de una persona con domicilio en España.<br/> <br/> Una vez contratado el servicio, el pago del mismo se realizará por mensualidades anticipadas. En el caso de que así nos lo indiques, mediante marcación en la casilla correspondiente, la renovación del servicio se realizará automáticamente cada mes y, en consecuencia, cada mes se efectuará el cargo correspondiente en la cuenta bancaria que nos facilites.<br/> <br/> OTT Internet TV SL no abonará el precio del mes en curso, una vez iniciada la prestación del servicio. No obstante, podrás cancelar y darte de baja en el servicio para el mes siguiente, siempre y cuando tú mismo acced con tus credenciales lo indiques en tu cuenta eliminando el tic de renovación automática con 24 horas de antelación a la fecha que te facturamos.<br/> <br/> Asimismo, te informamos de que OTT Internet TV SL se reserva la facultad de sustituir servicios obsoletos por versiones actualizadas del mismo, con la eventual actualización del precio, lo cual te será notificado oportunamente.<br/> <br/> OTT Internet TV SL no se responsabiliza en relación con la confidencialidad y seguridad de la información y datos que proporciones con ocasión del pago de tus compras y suscripciones electrónicas mediante tarjeta de crédito o débito, en la medida en que el tratamiento de dicha información y datos no se encuentre, en exclusiva, bajo el control de OTT Internet TV SL.<br/> <br/> Sin perjuicio de lo anterior, te informamos de que OTT Internet TV SL procura instalar todos los medios de seguridad a su alcance para evitar la pérdida, mal uso, alteración, acceso no autorizado y robo de los datos facilitados.<br/> <br/> <font class="bold" >PROPIEDAD INTELECTUAL E INDUSTRIAL:</font><br/> <br/> Todos los contenidos ofrecidos en la Plataforma, incluyendo la propia web, obras audiovisuales, textos, sinopsis, fotografías o ilustraciones, logos, marcas, grafismos, diseños, interfaces, etc., pertenecen a OTT Internet TV SL o han sido licenciados a OTT Internet TV SL por los terceros titulares de los derechos sobre dicho contenido y están protegidos por derechos de propiedad intelectual e industrial.<br/> <br/> Puedes utilizar la Plataforma y los contenidos publicados en ella de forma no exclusiva, sólo para tu uso privado (uso doméstico), y en cada caso según las condiciones de uso de cada contenido, dependiendo de si solo eres visitante de la página web, usuario registrado en período de "Prueba Gratis" o ya cliente que ha contratado nuestros servicios.<br/> <br/> No está permitido el uso comercial de los contenidos, ni copiar, almacenar o descargar, distribuir, publicar, enviar, transformar, utilizar cualquier técnica de ingeniería inversa, descompilar los contenidos o parte de los mismos, o realizar cualquier uso de medios o procedimientos distintos de los que se ponen a tu disposición en la Plataforma para utilizar los contenidos de forma distinta a la autorizada por OTT Internet TV SL.<br/> <br/> Tampoco puedes suprimir o manipular las indicaciones de copyright u otros créditos que identifiquen a los titulares de derechos de los contenidos que encuentres en la Plataforma ni los dispositivos técnicos de protección, las huellas digitales, marcas de agua, o cualquier otra medida tecnológica o mecanismo de protección o información incorporado a los contenidos ofrecidos en la Plataforma.<br/> <br/> Si imprimes, copias o descargas cualquier parte de nuestra web incumpliendo estos términos de uso, tu derecho a usar nuestra web cesará inmediatamente y estarás obligado, a nuestra elección, a devolver o destruir todas las copias de los materiales que hayas realizado. Lo anterior se entiende sin perjuicio de cualquier otra consecuencia legal.<br/> <br/> Las marcas, nombres comerciales o signos distintivos son titularidad de OTT Internet TV SL, sin que pueda entenderse que el acceso a nuestro portal o sitio web atribuya ningún derecho sobre las citadas marcas, nombres comerciales y/o signos distintivos.<br/> <br/>  Se hace constar que, al publicar contenidos (tales como "videos"o "comentarios") en los foros y secciones habilitadas para ello en nuestra Plataforma, estás concediendo a OTT Internet TV SL una licencia sobre los derechos de propiedad intelectual y/o industrial que en su caso pudieran corresponderte sobre tales contenidos. Dicha licencia no es exclusiva y abarca la totalidad de los derechos y modalidades de explotación de tales contenidos (incluyendo, de forma no limitativa, la reproducción, distribución, comunicación pública y transformación, por cualquier medio y en cualquier forma o soporte, tangible o intangible, con inclusión expresa de Internet), para todo el mundo y durante toda su vida legal, sin derecho a percibir por ello remuneración alguna.<br/> <br/> Excepción hecha de los datos de carácter personal que OTT Internet TV SL pueda recoger de acuerdo con lo establecido en nuestra Política de Privacidad, cualesquiera informaciones, ideas o materiales, de cualquier naturaleza, que sean remitidos a OTT Internet TV SL por el usuario, serán considerados públicos y no confidenciales y podrán ser utilizados libremente y sin cargo alguno por OTT Internet TV SL, así como por cualquiera de sus matrices o filiales, en los términos descritos en el párrafo anterior.<br/> <br/> Como usuario de nuestra Plataforma, al suministrar informaciones o contenidos en este sentido y con las consecuencias descritas en los dos párrafos anteriores, garantizas que no estás vulnerando ningún derecho de terceros, ni infringiendo ninguna disposición legal o reglamentaria, asumiendo de forma plena y exclusiva, cualquier responsabilidad que pudiera derivarse del suministro de tales informaciones o contenidos y de las consecuencias que se derivan de dicho suministro con arreglo a los dos párrafos anteriores.<br/> <br/> Por lo tanto, OTT Internet TV SL no se hace responsable respecto a posibles infracciones de derechos de propiedad intelectual y/o industrial de terceros ocasionados por los contenidos suministrados por terceros.Por lo tanto, OTT Internet TV SL no se hace responsable respecto a posibles infracciones de derechos de propiedad intelectual y/o industrial de terceros ocasionados por los contenidos suministrados por terceros.<br/> <br/> <font class="bold" >EXCLUSIÓN DE RESPONSABILIDAD:</font><br/> <br/> <font class="bold" >De los contenidos</font><br/> <br/> El acceso a nuestra Plataforma no implica la obligación por parte de OTT Internet TV SL de comprobar la veracidad, exactitud, adecuación, idoneidad, exhaustividad y actualidad de los contenidos titularidad terceros suministrada a través de nuestra plataforma.<br/> <br/> <font class="bold" >De la calidad del servicio</font><br/> <br/> Por supuesto, estamos realizando nuestros mayores esfuerzos para asegurar la continuidad, seguridad y calidad de nuestra Plataforma en base al estado actual de la técnica. Sin embargo, no podemos garantizar la disponibilidad permanente y la continuidad del funcionamiento de la Plataforma, ni la ausencia de virus u otros elementos dañinos que puedan producir alteraciones en tu sistema informático (corresponde al Usuario, en todo caso, la disponibilidad de herramientas adecuadas para la detección y desinfección de programas informáticos dañinos), ni tampoco la repercusión que la calidad de la conexión a internet de los usuarios pueda tener en el servicio, la fiabilidad, utilidad, veracidad, exactitud, exhaustividad y actualidad de la información contenida en la web. Por lo tanto, no nos hacemos responsables en caso de que cualquiera de estas circunstancias ocurra.<br/> <br/> <font class="bold" >De la disponibilidad del Servicio</font><br/> <br/> En relación con lo anterior, te informamos de que el acceso a la Plataforma requiere de servicios y suministros de terceros, incluidos el transporte a través de redes de telecomunicaciones cuya fiabilidad, calidad, continuidad y funcionamiento no corresponde a OTT Internet TV SL. Por consiguiente, los servicios proveídos a través de nuestra Plataforma pueden ser suspendidos, cancelados o resultar inaccesibles.<br/> <br/> De otra parte, te informamos de que determinados contenidos pueden ser objeto de bloqueo, a requerimiento de los titulares de los mismos, sin que OTT Internet TV SL pueda responsabilizarse de la eventual repercusión de la calidad o disponibilidad del Servicio.<br/> <br/> OTT Internet TV SL no se responsabiliza de los daños o perjuicios de cualquier tipo producidos en el Usuario que traigan causa de fallos o desconexiones en las redes de telecomunicaciones que produzcan la suspensión, cancelación o interrupción del servicio del Portal durante la prestación del mismo o con carácter previo.<br/> <br/> Finalmente, te informamos de que OTT Internet TV SL podrá eliminar, con carácter excepcional, algunos de los canales incluidos en el paquete que contrates, en el caso de perder los derechos de explotación sobre el mismo. En estos casos, OTT Internet TV SL hará todo lo posible por que el canal eliminado sea sustituido por otro de similares características, con el fin de que se vea afectado, lo mínimo posible, la calidad del Servicio contratado.<br/> <br/> <font class="bold" >Del contenido publicado por los usuarios</font><br/> <br/> No controlamos el contenido publicado por los usuarios en las zonas públicas de nuestra Plataforma y no asumimos responsabilidad alguna por estos contenidos. No obstante, OTT Internet TV SL se reserva la posibilidad de supervisar y/o moderar cualquier contenido publicado por los usuarios en la Plataforma y, en caso de que sean ofensivos, atentatorios contra los derechos humanos, inapropiados, difamatorios o susceptibles de vulnerar cualquier derecho de terceros, de editarlo o eliminarlo.<br/> <br/> En este sentido, si tienes conocimiento de la existencia de ese tipo información o contenido en OTT Internet TV SL que pueda ser indebido ponte en contacto con nosotros enviando un correo electrónico a <em>soporte@totalchannel.com</em><br/> <br/> <font class="bold" >POLÍTICA DE COOKIES:</font><br/> <br/> Te informamos de que OTT Internet TV SL podrá utilizar cookies durante la prestación del servicio del Portal. Mediante el acceso a este sitio web, das tu consentimiento para ello. Las cookies son procedimientos automáticos de recogida de información relativa a las preferencias determinadas por un usuario durante su visita a una determinada página web. Esta información se registra en pequeños archivos que son guardados en los equipos informáticos del usuario correspondiente de forma imperceptible. Cada vez que el usuario vuelve a acceder al sitio web en cuestión estos archivos se activan automáticamente de manera que se configura el sitio web con las preferencias señaladas en anteriores visitas.<br/> <br/> En definitiva, las cookies son ficheros físicos de información personal alojados en el propio terminal del usuario y asociados inequívocamente a este terminal. Gracias a las cookies OTT Internet TV SL te puede reconocer después de haber accedido por primera vez a nuestra plataforma y obtiene así información sobre la frecuencia de las visitas, los contenidos más vistos u otros datos, todo ello con el fin de optimizar y mejorar tu experiencia y la plataforma en general. Las cookies no pueden leer los archivos cookie creados por otros proveedores.<br/> <br/> El Usuario tiene la posibilidad de configurar su programa navegador de manera que se impida la creación de archivos cookie o se advierta del momento en que esto ocurre. Por lo tanto, OTT Internet TV SL te recomienda que revises las instrucciones o manuales de tu navegador y/o dispositivo de acceso para ampliar esta información ya que, según lo indicado, tienes la posibilidad de configurar tu navegador o el dispositivo de acceso para impedir su instalación. No obstante, determinados servicios de OTT Internet TV SL no podrán ser prestados de forma óptima sin tener instaladas las cookies.<br/> <br/> Concretamente estamos utilizando las Cookies para las finalidades que a continuación te exponemos, si en un futuro utilizamos otras con el propósito de ofrecerte más y mejores servicios, te informaremos de ello.<br/> <br/> Las Cookies propias de OTT Internet TV SL para acceder a nuestros servicios tienen como finalidad:<br/> <br/> 1. Recopilar información sobre tu navegación por OTT Internet TV SL. Nos sirven, por ejemplo, para recordarte una sesión iniciada con anterioridad, o incluso para identificarte en algunas ocasiones como un usuario anónimo.<br/> <br/> 2. Gestionar meta-datos (datos sobre los datos) y no tus datos personales.<br/> <br/> 3. Proporcionarnos información sobre los contenidos cuya visualización solicitas para facilitar dicha visualización y gestionar la configuración de tu perfil de usuario; también para adaptar y configurar el motor de recomendaciones y contenidos relacionados con tus preferencias y la publicidad segmentada asociada con tu perfil de usuario.<br/> <br/> 4. Otorgarnos información tecnológica para poder tramitar tus solicitudes como puedan ser licencias necesarias de otro software necesario para que funcione la Plataforma correctamente.<br/> <br/> <br/>Puedes obtener más información sobre nuestras Cookies accede aquí: www.totalchannel.com/politica-de-cookies<br/> <font class="bold" >LINKS:</font><br/> <br> <font class="bold" >De los contenidos y servicios enlazados a través del Portal:</font><br/> <br/> El servicio de acceso a esta web podrá incluir dispositivos técnicos de enlace, directorios e incluso instrumentos de búsqueda que te permiten como Usuario acceder a otras páginas y portales de Internet (en adelante, "Sitios Enlazados"). En estos casos, OTT Internet TV SL actúa como prestador de servicios de intermediación de conformidad con el artículo 17 de la Ley 34/2002, de 12 de julio, de Servicios de la Sociedad de la Información y el Comercio Electrónico (LSSI) y sólo será responsable de los contenidos y servicios suministrados en los Sitios Enlazados en la medida en que tenga conocimiento efectivo de la ilicitud y no haya desactivado el enlace con la diligencia debida.<br/> <br/> En el supuesto de que consideres que existe un Sitio Enlazado con contenidos ilícitos o inadecuados podrás comunicárselo a OTT Internet TV SL, sin que en ningún caso esta comunicación conlleve la obligación de retirar el correspondiente enlace.<br/> <br/> En ningún caso, la existencia de Sitios Enlazados debe presuponer la existencia de acuerdos con los responsables o titulares de los mismos, ni la recomendación, promoción o identificación de OTT Internet TV SL con las manifestaciones, contenidos o servicios provistas.<br/> <br/> OTT Internet TV SL no conoce los contenidos y servicios de los Sitios Enlazados y por tanto no se hace responsable por los daños producidos por la ilicitud, calidad, desactualización, indisponibilidad, error e inutilidad de los contenidos y/o servicios de los Sitios Enlazados ni por cualquier otro daño que no sea directamente imputable a OTT Internet TV SL.<br/> <br/> <font class="bold" >Introducción de enlaces al Portal:</font><br/> <br/> Si quieres introducir enlaces desde tus propias páginas web a nuestro portal, deberás cumplir con las condiciones que se detallan a continuación sin que el desconocimiento de las mismas evite las responsabilidades derivadas de la Ley:<br/> <br/> El enlace únicamente vinculará con la home page o página principal de nuestro portal de internet pero no podrá reproducirla de ninguna forma (deep links, inline links, hot links, copia de los textos, gráficos, etc.).<br/> <br/> Quedará en todo caso prohibido, de acuerdo con la legislación aplicable  y vigente en cada momento, establecer deep links así como frames o marcos de cualquier tipo que envuelvan a nuestro portal o permitan la visualización de los Contenidos a través de direcciones de Internet distintas a las de nuestro portal y, en cualquier caso, cuando se visualicen conjuntamente con contenidos ajenos a nuestro portal de forma que: (I) produzca, o pueda producir, error, confusión o engaño en los usuarios sobre la verdadera procedencia de los Contenidos; (II) suponga un acto de comparación o imitación desleal; (III) sirva para aprovechar la reputación de la marca y prestigio de OTT Internet TV SL; o (IV) de cualquier otra forma resulte prohibido por la legislación vigente.<br/> <br/> No se realizarán desde la página que introduce el enlace ningún tipo de manifestación falsa, inexacta o incorrecta sobre OTT Internet TV SL, sus empleados, proveedores, clientes o sobre la calidad de los servicios que comercializa.<br/> <br/> En ningún caso, se expresará en la página donde se ubique el enlace que OTT Internet TV SL ha prestado su consentimiento para la inserción del enlace o que de otra forma patrocina, colabora, verifica o supervisa los servicios del remitente.<br/> <br/> Está prohibida la utilización de cualquier marca denominativa, gráfica o mixta o cualquier otro signo distintivo de OTT Internet TV SL dentro de la página del remitente salvo en los casos permitidos por la ley o expresamente autorizados por OTT Internet TV SL y siempre que se permita, en estos casos, un enlace directo con nuestro portal en la forma establecida en esta cláusula.<br/> <br/> La página que establezca el enlace deberá cumplir fielmente con la ley y no podrá en ningún caso disponer o enlazar con contenidos propios o de terceros que: (I) sean ilícitos, nocivos o contrarios a la moral y a las buenas costumbres (pornográficos, violentos, racistas, etc.); (II) induzcan o puedan inducir en el usuario la falsa concepción de que OTT Internet TV SL suscribe, respalda, se adhiere o de cualquier manera apoya, las ideas, manifestaciones o expresiones, lícitas o ilícitas, del remitente; (III) resulten inapropiados o no pertinentes con la actividad de OTT Internet TV SL en atención al lugar, contenidos y temática de la página web del remitente.<br/> <br/> OTT Internet TV SL no tiene facultad ni medios humanos y técnicos para conocer, controlar ni aprobar toda la información, contenidos, productos o servicios facilitados por otros sitios web que tengan establecidos enlaces con destino a nuestra web. En este sentido, OTT Internet TV SL no asume ningún tipo de responsabilidad por cualquier aspecto relativo a la página web que establece ese enlace, en concreto, a título enunciativo y no limitativo, sobre su funcionamiento acceso, datos, información, archivos, calidad y fiabilidad de sus productos y servicios, sus propios enlaces y/o cualquiera de sus contenidos en general.<br/> <br/> <font class="bold" >POLÍTICA DE PRIVACIDAD:</font><br/> <br/> Para poder ser usuario registrado o cliente de los servicios de OTT Internet TV SL es necesario que, previamente, leas atentamente nuestra Política de Privacidad. En este sentido, te invitamos a que leas con atención nuestro aviso legal específico en materia de Política de Privacidad.<br/> <br/> <font class="bold" >GENERAL:</font><br/> <br/> Puedes contactar con nosotros enviando un correo electrónico a <em>soporte@totalchannel.com</em>.<br/> <br/> Si incumples estas Condiciones de Uso, OTT Internet TV SL podrá suspender o cancelar tu perfil automáticamente sin previo aviso, y, en ningún caso, tal suspensión o cancelación te daría derecho a reclamación y/o indemnización alguna. A estos efectos, te informamos que OTT Internet TV SL podrá poner en conocimiento y colaborar oportunamente con las autoridades policiales y judiciales competentes si detectase cualquier infracción de la legislación vigente o si tuviera sospecha de la comisión de algún delito.<br/> <br/> Los encabezamientos de las distintas cláusulas son sólo informativos, y no afectarán, calificarán o ampliarán la interpretación de las Condiciones de Uso.<br/> <br/> En el caso de existir discrepancia entre lo establecido en las presentes Condiciones de Uso y las condiciones particulares de cada servicio específico, prevalecerá lo dispuesto en éstas últimas.<br/> <br/> El no ejercicio o ejecución por parte de OTT Internet TV SL de cualquier derecho o disposición contenida en estas Condiciones de Uso no constituirá una renuncia al mismo, salvo reconocimiento y acuerdo por escrito por su parte.<br/> <br/> En el caso de que cualquier disposición o disposiciones de estas Condiciones de Uso fuera(n) considerada(s) nula(s) o inaplicable(s), en su totalidad o en parte, por cualquier Juzgado, Tribunal u órgano administrativo competente, dicha nulidad o inaplicación no afectará a las otras disposiciones de estas Condiciones de Uso.<br/> <br/> <font class="bold" >LEY APLICABLE Y JURISDICCIÓN</font><br/> <br/> Estas Condiciones de Uso se rigen por la ley española y serán competentes los Juzgados y Tribunales de Barcelona, para cuantas cuestiones puedan derivarse del uso de la Plataforma y de sus Condiciones de Uso.<br/> <br/>';
    TVA.login.PPRIV = '<h3>POLÍTICA DE PRIVACIDAD DE OVER THE TOP INTERNET TELEVISION SL</h3><br/> <br/> Esta Política de Privacidad (junto con las Condiciones de Uso y otros documentos referenciados en las mismas), establece las bases sobre las que, en caso de que recabemos o nos facilites datos personales durante tu experiencia en OVER THE TOP INTERNET TELEVISION SL, en adelante OTT Internet TV SL,&nbsp; ya sea a través de la dirección URL www.totalchannel.com (en adelante "la Web") o por otros medios digitales, soportes o dispositivos habilitados por OTT Internet TV SL (en su conjunto, "la Plataforma"), OTT Internet TV SL te garantiza el cumplimiento de la Ley Orgánica 15/1999, de 13 de diciembre, de Protección de Datos de Carácter Personal (en adelante, LOPD) y su normativa de desarrollo.<br/> <br/> Cuando sea necesario que nos facilites o accedamos a tus datos personales, ya sea para poner a disposición todas las facilidades de nuestra Plataforma al registrarte como usuario o como cliente de nuestros servicios, deberás leer esta Política de Privacidad y, en su caso, darnos tu consentimiento para que podamos tratar tus datos.<br/> <br/> <font class="bold" >Recogida de los datos</font><br/> <br/> A través de la Plataforma, OTT Internet TV SL puede recabar distintos tipos de datos personales, es decir, determinada información que por sus características nos permitirá identificarte, y se incorpora al fichero cuyo responsable es OTT Internet TV SL.<br/> <br/> Te informamos de que almacenamos los datos personales que nos facilitas cuando te registras en nuestra Plataforma para acceder a los servicios prestados por OTT Internet TV SL, en cualquiera de sus modalidades.<br/> <br/> Te agradecemos que los datos personales que nos remitas a través de la opción de registro sean veraces, completos, exactos y en todo caso, que estén actualizados.<br/> <br/> OTT Internet TV SL te comunica además, que la no cumplimentación de los datos personales requeridos en el apartado Regístrate podrá impedirnos gestionar adecuadamente el servicio de OTT Internet TV SL.<br/> <br/> Por último, te recordamos que para registrarte en OTT Internet TV SL tienes que ser mayor de 14 años, y sólo podrás contratar nuestros servicios como cliente si eres mayor de edad. Por eso, OTT Internet TV SL se reserva la facultad de solicitarte una fotocopia de tu D.N.I. u otro documento que acredite tu edad, en cuyo caso el equipo de OTT Internet TV SL te garantiza que los datos personales que nos facilites para acreditar tu edad, no serán utilizados para otra finalidad que no sea la de confirmar tu edad.<br/> <br/> <font class="bold" >Finalidad del tratamiento de los datos</font><br/> <br/> OTT Internet TV SL trata tus datos personales para identificarte como usuario, darte acceso a OTT Internet TV SL y poner a tu disposición todas las facilidades para la prestación de los servicios que ofrecemos. Para asegurar el buen uso de la Plataforma y nuestros servicios, OTT Internet TV SL podrá conservar ciertos datos mínimos de sus usuarios por un tiempo limitado tras la cancelación de su perfil.<br/> <br/> Antes de utilizar un nuevo servicio de OTT Internet TV SL, recuerda leer las Condiciones de Uso y si hay alguna condición específica de ese servicio, en ellas podrás ver si se tratan especialmente tus datos personales.<br/> <br/> Según lo indicado, los datos se recaban y serán tratados con la finalidad de facilitar el acceso a los contenidos ofrecidos a través de la plataforma; así como la de prestar, gestionar, informar y mejorar los servicios y/o contenidos ofrecidos; adecuar dichos servicios a las preferencias y gustos de los usuarios. Asimismo podrán ser tratados para realizar acciones publicitarias o promocionales y mantenerle informado sobre otros productos o servicios propios o de terceros, así como facilitarte información y noticias del sector y de los servicios que pueden ofrecerte, por correo electrónico o cualquier otro sistema de comunicación electrónica similar.<br/> <br/> Al aceptar la presente Política de Privacidad, das tu consentimiento y nos autorizas a llevar a cabo el tratamiento de tus datos personales con las finalidades descritas anteriormente.<br/> <br/> No obstante, si no quieres que te enviemos publicidad sobre otros productos o servicios que pudieran ser de tu interés o que podamos ceder tus datos a terceros que indirectamente colaboran con OTT Internet TV SL podrás indicarlo en el formulario de confirmación de la cuenta.<br/> <br/> <font class="bold" >Cesión de información</font><br/> <br/> A los efectos de lo previsto en los artículos 11 y 34.e) LOPD, consientes expresamente que tus datos puedan ser comunicados a cualquiera de las empresas del grupo al que pertenece OTT Internet TV SL, así como a terceros que colaboren directa o indirectamente en nuestra actividad, tratándose de una cesión a terceros, quienes podrán comunicarse contigo en relación con nuestros productos o servicios, con la finalidad que dicha intervención posibilite optimizar nuestra relación comercial contigo.<br/> <br/> Mediante la aceptación de lo dispuesto en el presente aviso legal y política de privacidad, consientes expresamente la utilización de tus datos, de conformidad con lo dispuesto en el artículo 27 LOPD, relativo a la comunicación de la primera cesión de datos.<br/> <br/> Asimismo, te informamos expresamente de que OTT Internet TV SL no acepta, ni recoge en sus ficheros, ni tampoco tratará de ningún modo, cualquier dato personal que no proceda directamente de su titular. En este sentido, te recordamos que solo puedes facilitarnos datos personales de tu propia titularidad y no de terceras personas, cuentes o no cuente con la autorización de éstas.<br/> <br/> <font class="bold" >Privacidad y seguridad en el tratamiento de los datos de carácter personal</font><br/> <br/> OTT Internet TV SL se compromete a tratar de forma absolutamente confidencial tus datos de carácter personal, haciendo uso de los mismos exclusivamente para las finalidades indicadas. OTT Internet TV SL te informa de que tiene implantadas las medidas de seguridad de índole técnica y organizativas necesarias que garanticen la seguridad de tus datos de carácter personal y eviten su alteración, pérdida, tratamiento y/o acceso no autorizado, habida cuenta del estado de la tecnología, la naturaleza de los datos almacenados y los riesgos a que están expuestos, ya provengan de la acción humana o del medio físico o natural. Todo ello de conformidad con lo previsto en el artículo 9 LOPD y en el Real Decreto 1720/2007, de 21 de diciembre, por el que se aprueba el Reglamento de desarrollo de la Ley 15/1999, de 13 de diciembre, de protección de datos de carácter personal.<br/> <br/> <font class="bold" >El ejercicio de tus derechos</font><br/> <br/> El consentimiento para la comunicación de datos de carácter personal es revocable en cualquier momento, si bien no tendrá efectos retroactivos, conforme a lo que dispone el artículo 6 y 11 LOPD.&nbsp;<br/> <br/> Podrás ejercer, si lo deseas, tu derecho de acceso, rectificación, cancelación y oposición al tratamiento de tus datos personales, en los términos y condiciones previstos en la propia LOPD, dirigiendo tu solicitud por correo a nuestra sede social en España "OTT Internet TV SL, S.L., Av. Diagonal 177 - Planta 12, Barcelona 08018", o bien contactando con nosotros en el correo electrónico: <em>soporte@totalchannel.com</em><br/> <br/> <font class="bold" >Información de otros sitios web</font><br/> <br/> Periódicamente, este sitio web de OTT Internet TV SL podrá ofrecer enlaces a otros sitios web. Te recomendamos revisar cuidadosamente las políticas de privacidad y protección de datos en los mismos ya que pueden diferir de la regulación de OTT Internet TV SL.<br/> <br/>'
};
OTTspYoubora = {
    init: function() {},
    play: function(d, a) {
        if (OTTAnalytics.enabled || TVA.OTT.OTTBALANCER) {
            try {
                OTTAnalytics.fillYouboraData(d, a);
                SmartPlugin.playerId = "LGplayer";
                SmartPlugin.player = document.getElementById(SmartPlugin.playerId);
                SmartPlugin.init();
                return
            } catch (c) {}
        }
        a(d, a);
        try {
            setTimeout(function() {
                Messenger.balancedUrl(d.url)
            }, 100)
        } catch (b) {}
    }
};
var OTTAnalytics = {
    firstTime: true,
    initialized: false,
    loadedLibs: false,
    nice264Plugin: null,
    username: "",
    pendingJoin: 0,
    enabled: true,
    updatingPlayTime: false,
    init: function() {
        try {
            if (typeof Nice264Analytics == "function") {
                Debug.fatal("OTTAnalytics.init: ERR: Nice264Analytics must not be defined !")
            }
            try {
                Debug.warning("Starting spYoubora");
                spYoubora.init();
                OTTspYoubora.init()
            } catch (a) {
                Debug.warning("INIT spYoubora ERR: " + a)
            }
        } catch (a) {}
    },
    authOk: function(b) {
        if (typeof b == "undefined") {
            b = Main.username
        }
        this.username = b;
        try {
            if (typeof Nice264Analytics == "function") {
                Debug.fatal("OTTAnalytics.authOk: ERR: Nice264Analytics must not be defined !");
                switch (TVA.device) {
                    case "lg":
                    case "samsung":
                    case "ps3":
                        this.initialized = true;
                        break
                }
            }
        } catch (a) {}
    },
    playerPositionLog: 0,
    playerPositionNotModified: 0,
    checkPosition: function(b) {
        if (b > 0) {
            if (OTTAnalytics.nice264Plugin && TVA.device !== "lg") {
                try {
                    OTTAnalytics.updatingPlayTime = true;
                    OTTAnalytics.nice264Plugin.onCurrentPlayTime(b)
                } catch (c) {}
            }
            OTTAnalytics.updatingPlayTime = false;
            var a = (oldPlayerState == TVA_Player.state.playing);
            if (b == OTTAnalytics.playerPositionLog && a == true) {
                OTTAnalytics.playerPositionNotModified++;
                if (OTTAnalytics.playerPositionNotModified == 30) {
                    VideoPlayer.bufferingStart();
                    OTTAnalytics.bufferingBegin()
                }
            } else {
                if (OTTAnalytics.playerPositionNotModified >= 30) {
                    VideoPlayer.bufferingComplete();
                    OTTAnalytics.bufferingEnd()
                }
                OTTAnalytics.playerPositionNotModified = 0
            }
            OTTAnalytics.playerPositionLog = b
        } else {
            OTTAnalytics.playerPositionLog = 0;
            OTTAnalytics.playerPositionNotModified = 0
        }
    },
    sendError: function(a, c) {
        if (View.actualPageIs(PopUp)) {
            PopUp.deInitView()
        }
        try {
            if (OTTAnalytics.nice264Plugin) {
                var d = null;
                switch (a) {
                    case 51:
                        d = Nice264AnalyticsError.CONNECTION_FAILED ? Nice264AnalyticsError.CONNECTION_FAILED : 1;
                        break;
                    case 47:
                        d = Nice264AnalyticsError.STREAM_NOT_FOUND ? Nice264AnalyticsError.STREAM_NOT_FOUND : 1;
                        break;
                    case 34:
                        switch (c) {
                            case "CONF01":
                                d = Nice264AnalyticsError.CONNECTION_FAILED ? Nice264AnalyticsError.CONNECTION_FAILED : 1000;
                                break;
                            case "VPLC02":
                                d = Nice264AnalyticsError.CONNECTION_FAILED ? Nice264AnalyticsError.CONNECTION_FAILED : 1000;
                                break;
                            case "VPCN09":
                                d = Nice264AnalyticsError.RENDER_ERROR ? Nice264AnalyticsError.RENDER_ERROR : 0;
                                break;
                            case "REND01":
                                d = Nice264AnalyticsError.RENDER_ERROR ? Nice264AnalyticsError.RENDER_ERROR : 0;
                                break;
                            case "STRM01":
                                d = Nice264AnalyticsError.STREAM_NOT_FOUND ? Nice264AnalyticsError.STREAM_NOT_FOUND : 1;
                                break;
                            case "VPLC01":
                                d = Nice264AnalyticsError.RENDER_ERROR ? Nice264AnalyticsError.RENDER_ERROR : 0;
                                break;
                            case "VEV01":
                                d = Nice264AnalyticsError.RENDER_ERROR ? Nice264AnalyticsError.RENDER_ERROR : 0;
                                break;
                            case "AUTH01":
                                d = Nice264AnalyticsError.AUTHENTICATION_FAILED ? Nice264AnalyticsError.AUTHENTICATION_FAILED : 1002;
                                break;
                            default:
                                d = Nice264AnalyticsError.CONNECTION_FAILED ? Nice264AnalyticsError.CONNECTION_FAILED : 1000;
                                break
                        }
                        break
                }
                if (d !== null) {
                    OTTAnalytics.nice264Plugin.error(d, " [nr:" + a + ":" + c + "]");
                    OTTAnalytics.nice264Plugin.stop();
                    OTTAnalytics.nice264Plugin = null
                }
            }
        } catch (b) {}
    },
    bufferingBegin: function() {
        if (OTTAnalytics.nice264Plugin) {
            OTTAnalytics.nice264Plugin.buffer(Nice264AnalyticsEvents.BUFFER_BEGIN)
        }
    },
    bufferingEnd: function() {
        if (OTTAnalytics.nice264Plugin) {
            OTTAnalytics.nice264Plugin.buffer(Nice264AnalyticsEvents.BUFFER_END)
        }
    },
    deinit: function() {
        if (OTTAnalytics.nice264Plugin) {
            OTTAnalytics.nice264Plugin.stop();
            OTTAnalytics.nice264Plugin = null
        }
    },
    getCommunicationClass: function(a) {
        if (!SmartPlugin) {
            return null
        }
        if (!SmartPlugin.getOttCommunicationClass) {
            SmartPlugin._getOttCommunicationClass = null;
            SmartPlugin.getOttCommunicationClass = function() {
                if (SmartPlugin._getOttCommunicationClass == null) {
                    var c = null;
                    try {
                        for (c in SmartPlugin) {
                            if (SmartPlugin.hasOwnProperty(c)) {
                                if (SmartPlugin[c] instanceof YouboraCommunication) {
                                    SmartPlugin._getOttCommunicationClass = SmartPlugin[c];
                                    break
                                }
                            }
                        }
                    } catch (d) {}
                    if (SmartPlugin._getOttCommunicationClass == null) {
                        for (c in SmartPlugin) {
                            if (SmartPlugin.hasOwnProperty(c)) {
                                try {
                                    if (typeof SmartPlugin[c] == "object" && (SmartPlugin[c].getPingTime && SmartPlugin[c].sendAnalytics)) {
                                        SmartPlugin._getOttCommunicationClass = SmartPlugin[c];
                                        break
                                    }
                                } catch (b) {}
                            }
                        }
                    }
                }
                if (SmartPlugin._getOttCommunicationClass == null && SmartPlugin.communicationClass) {
                    SmartPlugin._getOttCommunicationClass = SmartPlugin.communicationClass
                }
                if (SmartPlugin._getOttCommunicationClass == null && SmartPlugin.communications) {
                    SmartPlugin._getOttCommunicationClass = SmartPlugin.communications
                }
                return SmartPlugin._getOttCommunicationClass
            }
        }
        if (a == true) {
            SmartPlugin._getOttCommunicationClass = null
        }
        return SmartPlugin.getOttCommunicationClass()
    },
    preStartPlay: function(h, d) {
        if (typeof youboraData !== "undefined" && youboraData.setAccountCode) {
            youboraData.setAccountCode(TVA.OTT.ACODE)
        }
        if (OTTAnalytics.enabled == false) {
            try {
                if (typeof youboraData !== "undefined") {
                    youboraData.setEnableAnalytics(false)
                }
                if (SmartPlugin) {
                    var c = OTTAnalytics.getCommunicationClass(true);
                    c.enableAnalytics = false;
                    for (var a in c) {
                        if (c.hasOwnProperty(a)) {
                            try {
                                if (typeof c[a] !== "string" && typeof c[a] !== "boolean" && typeof c[a] !== "number") {
                                    if (typeof c[a] === "function") {
                                        if (a.indexOf("send") == 0 || a.indexOf("check") == 0 || a.indexOf("load") == 0 || a.indexOf("validate") == 0 || a == "init" || a == "cPing" || a == "addEventToQueue") {
                                            if (c[a] !== API.voidFn) {
                                                c[a] = API.voidFn
                                            }
                                        } else {
                                            if (a == "getPingTime") {
                                                if (c[a] !== API.voidFn) {
                                                    c[a] = function() {
                                                        return 60 * 1000
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } catch (g) {}
                        }
                    }
                }
            } catch (b) {}
            try {
                c = YouboraCommunication.prototype;
                for (var a in c) {
                    if (c.hasOwnProperty(a)) {
                        try {
                            if (typeof c[a] !== "string" && typeof c[a] !== "boolean" && typeof c[a] !== "number") {
                                if (typeof c[a] === "function") {
                                    if (a.indexOf("send") == 0 || a.indexOf("check") == 0 || a.indexOf("load") == 0 || a.indexOf("validate") == 0 || a == "init" || a == "cPing" || a == "addEventToQueue") {
                                        if (c[a] !== API.voidFn) {
                                            Debbug.log("CLEAN ::::: " + a);
                                            c[a] = API.voidFn
                                        }
                                    } else {
                                        if (a == "getPingTime") {
                                            if (c[a] !== API.voidFn) {
                                                c[a] = function() {
                                                    return 60 * 1000
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (g) {}
                    }
                }
            } catch (f) {}
        }
        if (OTTAnalytics.enabled == false) {} else {
            if (TVA.device === "ps3") {
                this.initPlay(h, d)
            }
        }
    },
    startPlay: function(b, a) {
        if (TVA.device !== "ps3") {
            this.initPlay(b, a)
        }
    },
    initPlay: function(g, b) {
        if (OTTAnalytics.enabled == false) {
            return
        }
        if (this.loadedLibs == false) {
            return
        }
        if (this.initialized == false) {
            return
        }
        try {
            var j = {
                username: this.username,
                interval: 0
            };
            var a = OTTAnalytics.firstTime;
            OTTAnalytics.firstTime = false;
            if (OTTAnalytics.nice264Plugin) {
                OTTAnalytics.nice264Plugin.reset();
                OTTAnalytics.nice264Plugin = null
            }
            var c = false;
            switch (TVA.device) {
                case "lg":
                    OTTAnalytics.nice264Plugin = new Nice264Analytics("LGplayer", "totalch", "http://nqs.nice264.com/", j);
                    OTTAnalytics.nice264Plugin._errorSent = false;
                    OTTAnalytics.nice264Plugin._stopped = false;
                    OTTAnalytics.nice264Plugin.setPlayerStateCallback("TVA_Player.onPlayStateChange");
                    c = true;
                    if (a) {
                        Nice264Analytics.prototype._error = Nice264Analytics.prototype.error;
                        Nice264Analytics.prototype.error = function(w, v) {
                            try {
                                if (this._errorSent == true) {
                                    return
                                }
                                this._errorSent = true;
                                var u = "";
                                if (typeof v === "string" && v.length > 0) {
                                    u = encodeURIComponent(v);
                                    this.player.error = w;
                                    var x = Nice264AnalyticsError[w].message;
                                    Nice264AnalyticsError[w].message = x + u;
                                    this._error();
                                    Nice264AnalyticsError[w].message = x
                                } else {
                                    this._error()
                                }
                            } catch (t) {}
                        };
                        Nice264Analytics.prototype._stop = Nice264Analytics.prototype.stop;
                        Nice264Analytics.prototype.stop = function() {
                            if (this._stopped == true) {
                                return
                            }
                            this._stopped = true;
                            var e = this;
                            setTimeout(function() {
                                e._stop()
                            }, 200)
                        }
                    }
                    break;
                case "samsung":
                    OTTAnalytics.nice264Plugin = new Nice264Analytics("pluginPlayer", "totalch", "http://nqs.nice264.com/", j);
                    OTTAnalytics.nice264Plugin.setPlayerProgressCallback("TVA_Player.setCurrentTime");
                    if (TVA.year < 2012) {
                        TVA_Player.player.OnCurrentPlayTime = "OTTAnalytics.setCurrentTime"
                    }
                    c = true;
                    if (a) {
                        Nice264Analytics.prototype._error = Nice264Analytics.prototype.error;
                        Nice264Analytics.prototype.error = function(v, u) {
                            var t = "";
                            if (typeof u === "string") {
                                t = encodeURIComponent(u)
                            }
                            this._error({
                                id: v.id,
                                message: v.message + t
                            })
                        };
                        TVA_Player._stop = TVA_Player.stop;
                        TVA_Player.stop = function() {
                            TVA_Player._stop();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        };
                        TVA_Player._pause = TVA_Player.pause;
                        TVA_Player.pause = function(s) {
                            TVA_Player._pause(s);
                            if (s) {
                                if (OTTAnalytics.nice264Plugin) {
                                    OTTAnalytics.nice264Plugin.pause()
                                }
                            } else {
                                if (OTTAnalytics.nice264Plugin) {
                                    OTTAnalytics.nice264Plugin.resume()
                                }
                            }
                        };
                        TVA_Player._bufferingStart = TVA_Player.bufferingStart;
                        TVA_Player.bufferingStart = function() {
                            if (VideoPlayer.hasStarted(true) == true || OTTAnalytics.pendingJoin == 1) {
                                OTTAnalytics.bufferingBegin()
                            }
                            TVA_Player._bufferingStart()
                        };
                        TVA_Player._bufferingComplete = TVA_Player.bufferingComplete;
                        TVA_Player.bufferingComplete = function() {
                            if (VideoPlayer.hasStarted(true) == true || OTTAnalytics.pendingJoin == 1) {
                                OTTAnalytics.pendingJoin = 0;
                                OTTAnalytics.bufferingEnd()
                            }
                            TVA_Player._bufferingComplete()
                        };
                        TVA_Player._renderingComplete = TVA_Player.renderingComplete;
                        TVA_Player.renderingComplete = function() {
                            TVA_Player._renderingComplete();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        };
                        TVA_Player._onAuthenticationFailed = TVA_Player.onAuthenticationFailed;
                        TVA_Player.onAuthenticationFailed = function() {
                            TVA_Player._onAuthenticationFailed();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.AUTHENTICATION_FAILED);
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        };
                        TVA_Player._onConnectionFailed = TVA_Player.onConnectionFailed;
                        TVA_Player.onConnectionFailed = function() {
                            TVA_Player._onConnectionFailed();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.CONNECTION_FAILED);
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        };
                        TVA_Player._onNetworkDisconnected = TVA_Player.onNetworkDisconnected;
                        TVA_Player.onNetworkDisconnected = function() {
                            TVA_Player._onNetworkDisconnected();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.NETWORK_DISCONNECTED);
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        };
                        TVA_Player._onRenderError = TVA_Player.onRenderError;
                        TVA_Player.onRenderError = function() {
                            TVA_Player._onRenderError();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.RENDER_ERROR);
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        };
                        TVA_Player._onStreamNotFound = TVA_Player.onStreamNotFound;
                        TVA_Player.onStreamNotFound = function() {
                            TVA_Player._onStreamNotFound();
                            if (OTTAnalytics.nice264Plugin) {
                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.STREAM_NOT_FOUND);
                                OTTAnalytics.nice264Plugin.stop();
                                OTTAnalytics.nice264Plugin = null
                            }
                        }
                    }
                    break;
                case "ps3":
                    OTTAnalytics.nice264Plugin = new Nice264Analytics(window.platform.ver, "totalch", "http://nqs.nice264.com/", j);
                    c = true;
                    if (a) {
                        if (window.platform.ver == 0) {
                            TVA_Player._stop = TVA_Player.stop;
                            TVA_Player.stop = function() {
                                if (OTTAnalytics.nice264Plugin) {
                                    OTTAnalytics.nice264Plugin.stop();
                                    OTTAnalytics.nice264Plugin = null
                                }
                                TVA_Player._stop()
                            };
                            TVA_Player._deinit = TVA_Player.deinit;
                            TVA_Player.deinit = function() {
                                if (OTTAnalytics.nice264Plugin) {
                                    OTTAnalytics.nice264Plugin.stop();
                                    OTTAnalytics.nice264Plugin = null
                                }
                                TVA_Player._deinit()
                            };
                            TVA_Player._pause = TVA_Player.pause;
                            TVA_Player.pause = function(s) {
                                TVA_Player._pause(s);
                                if (s) {
                                    if (OTTAnalytics.nice264Plugin) {
                                        OTTAnalytics.nice264Plugin.pause()
                                    }
                                } else {
                                    if (OTTAnalytics.nice264Plugin) {
                                        OTTAnalytics.nice264Plugin.resume()
                                    }
                                }
                            };
                            TVA_Player.bufferingStart = function() {
                                if (VideoPlayer.hasStarted(true) == true || OTTAnalytics.pendingJoin == 1) {
                                    OTTAnalytics.bufferingBegin()
                                }
                            };
                            TVA_Player.bufferingComplete = function() {
                                if (VideoPlayer.hasStarted(true) == true || OTTAnalytics.pendingJoin == 1) {
                                    OTTAnalytics.pendingJoin = 0;
                                    OTTAnalytics.bufferingEnd()
                                }
                            }
                        } else {
                            window.platform._receiveCommandResponse = window.platform.receiveCommandResponse;
                            window.platform.receiveCommandResponse = function(v) {
                                try {
                                    var s = JSON.parse(v);
                                    var u = [];
                                    switch (s.command) {
                                        case "playerStatusChange":
                                            switch (s.playerState) {
                                                case "buffering":
                                                    if (VideoPlayer.hasStarted(true) == true) {
                                                        OTTAnalytics.bufferingBegin()
                                                    }
                                                    break;
                                                case "playing":
                                                    if (VideoPlayer.hasStarted(true) == true || OTTAnalytics.pendingJoin == 1) {
                                                        OTTAnalytics.pendingJoin = 0;
                                                        OTTAnalytics.bufferingEnd()
                                                    }
                                                    break
                                            }
                                            break;
                                        case "getPlaybackTime":
                                            if (OTTAnalytics.nice264Plugin) {
                                                OTTAnalytics.nice264Plugin.onCurrentPlayTime(s.elapsedTime)
                                            }
                                            break;
                                        case "playerError":
                                            if (OTTAnalytics.nice264Plugin) {
                                                for (k in s) {
                                                    if (s.hasOwnProperty(k)) {
                                                        u.push(s[k])
                                                    }
                                                }
                                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.RENDER_ERROR, u.join(":"));
                                                OTTAnalytics.nice264Plugin.stop();
                                                OTTAnalytics.nice264Plugin = null
                                            }
                                            break;
                                        case "playerStreamingError":
                                            if (OTTAnalytics.nice264Plugin) {
                                                for (k in s) {
                                                    if (s.hasOwnProperty(k)) {
                                                        u.push(s[k])
                                                    }
                                                }
                                                OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.CONNECTION_FAILED, u.join(":"));
                                                OTTAnalytics.nice264Plugin.stop();
                                                OTTAnalytics.nice264Plugin = null
                                            }
                                            break;
                                        case "networkStatusChange":
                                            if (s.newState == "disconnected") {
                                                if (OTTAnalytics.nice264Plugin) {
                                                    OTTAnalytics.nice264Plugin.error(Nice264AnalyticsError.NETWORK_DISCONNECTED);
                                                    OTTAnalytics.nice264Plugin.stop();
                                                    OTTAnalytics.nice264Plugin = null
                                                }
                                            }
                                            break
                                    }
                                } catch (t) {}
                                window.platform._receiveCommandResponse(v)
                            };
                            window.platform._sendCommand = window.platform.sendCommand;
                            window.platform.sendCommand = function(t) {
                                window.platform._sendCommand(t);
                                try {
                                    switch (t.command) {
                                        case "play":
                                            if (OTTAnalytics.nice264Plugin) {
                                                OTTAnalytics.nice264Plugin.resume()
                                            }
                                            break;
                                        case "pause":
                                            if (OTTAnalytics.nice264Plugin) {
                                                OTTAnalytics.nice264Plugin.synchronous = Main.isInBackground;
                                                OTTAnalytics.nice264Plugin.pause();
                                                OTTAnalytics.nice264Plugin.synchronous = false
                                            }
                                            break;
                                        case "stop":
                                            if (window.platform.videoPlayer.state != "") {
                                                if (OTTAnalytics.nice264Plugin) {
                                                    OTTAnalytics.nice264Plugin.stop();
                                                    OTTAnalytics.nice264Plugin = null
                                                }
                                            }
                                            break
                                    }
                                } catch (s) {}
                            }
                        }
                    }
                    break
            }
            if (!OTTAnalytics.nice264Plugin) {
                return
            }
            var m = null;
            var h = null;
            if (!b.isLive && (b.programId || b.eventId)) {
                h = DataStore.get(Type.Program, b.programId);
                var f = DataStore.get(Type.Event, b.eventId);
                if (f) {
                    m = DataStore.get(Type.Channel, f.channel)
                }
            } else {
                if (b.channelId) {
                    m = DataStore.get(Type.Channel, b.channelId)
                }
            }
            if (typeof OTTAnalytics.nice264Plugin.setLive !== "undefined") {
                OTTAnalytics.nice264Plugin.setLive(b.isLive)
            }
            var d = "";
            try {
                d = navigator.userAgent
            } catch (o) {
                d = ""
            }
            var q = [];
            if (m && m.abrev) {
                q.push(m.abrev)
            } else {
                if (m && m.name) {
                    q.push(m.name)
                }
            }
            if (b.isLive == false && h) {
                var i = "";
                if (h.title) {
                    i = "" + h.title
                }
                if (h.episodeTitle) {
                    var p = "" + h.episodeTitle;
                    if (p.toLowerCase().indexOf(i.toLowerCase()) == 0) {
                        i = p
                    } else {
                        if (p.length > 0) {
                            i += ":" + p
                        }
                    }
                }
                if (h && h.season) {
                    i += "(S." + h.season;
                    if (h.episodePartial) {
                        i += " E." + h.episodePartial
                    }
                    i += ")"
                } else {
                    if (h && h.episodePartial) {
                        i += "(E." + h.episodePartial + ")"
                    }
                }
                q.push(i)
            }
            q = q.join("|");
            var n = {
                content_metadata: {
                    title: q
                },
                quality: "HD",
                content_type: "movie",
                device: {
                    manufacturer: TVA.device,
                    type: TVA.OTT.DEVICETYPE,
                    year: TVA.year,
                    firmware: d
                },
                movie_id: b.assetId,
                filename: g.url
            };
            if (typeof OTTAnalytics.nice264Plugin.setTransactionCode !== "undefined") {
                OTTAnalytics.nice264Plugin.setTransactionCode(g.pbId)
            }
            if (typeof OTTAnalytics.nice264Plugin.setUsername !== "undefined") {
                OTTAnalytics.nice264Plugin.setUsername(this.username)
            }
            if (typeof OTTAnalytics.nice264Plugin.setVideoURL !== "undefined") {
                OTTAnalytics.nice264Plugin.setVideoURL(g.url)
            }
            if (typeof OTTAnalytics.nice264Plugin.setMetadata !== "undefined") {
                OTTAnalytics.nice264Plugin.setMetadata(n)
            }
            OTTAnalytics.pendingJoin = 1;
            var r = new Date();
            OTTAnalytics.nice264Plugin.bufferTimeBegin = r.getTime();
            if (c == true) {
                OTTAnalytics.nice264Plugin.isStartEventSent = true;
                OTTAnalytics.nice264Plugin.start()
            }
        } catch (l) {}
    },
    setCurrentTime: function(a) {
        TVA_Player.setCurrentTime(a);
        if (OTTAnalytics.nice264Plugin) {
            OTTAnalytics.nice264Plugin.assetPlayHead = a
        }
    },
    fillYouboraData: function(m, c) {
        OTTAnalytics.intentos = 0;
        if (OTTAnalytics.enabled == false && TVA.OTT.OTTBALANCER == false) {
            return
        }
        if (typeof youboraData === "undefined") {
            return
        }
        try {
            if (!SmartPlugin) {
                return
            }
            var p = OTTAnalytics.getCommunicationClass(true);
            if (!p) {
                Debug.err("No communication class")
            }
            var n = VideoPlayer.details;
            var g = VideoPlayer.initPlayerResponseVideo;
            youboraData.setHashTitle(true);
            youboraData.setEnableAnalytics(true);
            youboraData.setAccountCode(TVA.OTT.ACODE);
            youboraData.setUsername(OTTAnalytics.username);
            if (SmartPlugin.setUsername) {
                SmartPlugin.setUsername(OTTAnalytics.username)
            }
            if (SmartPlugin.bandwidth && SmartPlugin.bandwidth.username) {
                SmartPlugin.bandwidth.username = youboraData.getUsername()
            }
            youboraData.setTransaction(VideoPlayer.initPlayerResponseVideo.pbId);
            SmartPlugin.transactionCode = youboraData.getTransaction();
            youboraData.setLive(VideoPlayer.details.isLive);
            if (SmartPlugin.setLive) {
                SmartPlugin.setLive(VideoPlayer.details.isLive)
            }
            SmartPlugin.isLive = VideoPlayer.details.isLive;
            var t = null;
            var d = null;
            if (!n.isLive && (n.programId || n.eventId)) {
                d = DataStore.get(Type.Program, n.programId);
                var i = DataStore.get(Type.Event, n.eventId);
                if (i) {
                    t = DataStore.get(Type.Channel, i.channel)
                }
            } else {
                if (n.channelId) {
                    t = DataStore.get(Type.Channel, n.channelId)
                }
            }
            var l = "";
            try {
                l = navigator.userAgent
            } catch (b) {
                l = ""
            }
            var s = [];
            if (t && t.abrev) {
                s.push(t.abrev)
            } else {
                if (t && t.name) {
                    s.push(t.name)
                }
            }
            if (n.isLive == false && d) {
                var j = "";
                if (d.title) {
                    j = "" + d.title
                }
                if (d.episodeTitle) {
                    var h = "" + d.episodeTitle;
                    if (h.toLowerCase().indexOf(j.toLowerCase()) == 0) {
                        j = h
                    } else {
                        if (h.length > 0) {
                            j += ":" + h
                        }
                    }
                }
                if (d && d.season) {
                    j += "(S." + d.season;
                    if (d.episodePartial) {
                        j += " E." + d.episodePartial
                    }
                    j += ")"
                }
                s.push(j)
            }
            s = s.join("|");
            youboraData.setPropertyMetaTitle(s);
            youboraData.setPropertyDeviceManufacturer(TVA.device);
            youboraData.setPropertyDeviceType(TVA.OTT.DEVICETYPE);
            youboraData.setPropertyDeviceYear(TVA.year);
            youboraData.setPropertyDeviceFirmware(l);
            youboraData.setPropertyFileName(g.url);
            youboraData.setPropertyContentId(n.assetId);
            var q = Utils.now();
            var f = {
                balanceType: "balance",
                enabled: TVA.OTT.NICEBALANCER,
                service: "http://smartswitch.youbora.com/",
                zoneCode: "default",
                originCode: TVA.OTT.ORIGINCODE,
                niceNVA: q - (3600 * 1000),
                niceNVB: q + (3600 * 1000),
                token: TVA.OTT.NICETOKEN,
                niceTokenIp: null,
                rnd: q
            };
            f.token = OTTAnalytics.generateToken(f, g.url);
            if (typeof youboraData !== "undefined") {
                youboraData.setBalanceProperties(f)
            }
            if (TVA.OTT.OTTBALANCER) {
                try {
                    OTTAnalytics.intentos++;
                    OTTAnalytics.prepareOTTBalancer(m, c)
                } catch (a) {}
                return
            } else {
                if (OTTAnalytics.enabled == false) {
                    return
                } else {
                    if (TVA.OTT.NICEBALANCER) {
                        if (p) {
                            p.enableBalancer = true
                        }
                        if (SmartPlugin.playInfo && youboraData.balanceProperties) {
                            SmartPlugin.playInfo.zoneCode = youboraData.balanceProperties.zoneCode;
                            SmartPlugin.playInfo.originCode = youboraData.balanceProperties.originCode
                        }
                        if (TVA.OTT.NICEBALANCER) {
                            if (p) {
                                SmartPlugin.balancing = p.enableBalancer
                            } else {
                                SmartPlugin.balancing = true
                            }
                        } else {
                            if (p) {
                                p.enableBalancer = false
                            }
                            SmartPlugin.balancing = false
                        }
                        if (p) {}
                    }
                }
            }
        } catch (o) {}
        c(m);
        try {
            setTimeout(function() {
                Messenger.balancedUrl(m.url)
            }, 100)
        } catch (r) {}
    },
    generateToken: function(h, c) {
        var b = "";
        try {
            var d = TVA.OTT.ACODE;
            var a = "";
            var g = d + h.zoneCode + h.originCode + c + h.niceNVA + h.niceNVB + a;
            b = window.md5(g)
        } catch (f) {}
        return b
    },
    prepareOTTBalancer: function(c, b) {
        if (!c || !c.url) {
            return
        }
        var a = c.url;
        a = a.split("|");
        var d = OTTAnalytics.getResourcePath(a[0]);
        OTTAnalytics.getBalancedResource(d, function(i) {
            OTTAnalytics.balancedCallback = null;
            if (i != false) {
                try {
                    var f = a[0];
                    if (i["1"] && i["1"]["URL"]) {
                        a[0] = i["1"]["URL"]
                    } else {
                        if (i[1] && i[1]["URL"]) {
                            a[0] = i[1]["URL"]
                        }
                    }
                    if (f != a[0]) {} else {}
                    a = a.join("|");
                    c.url = a;
                    if (SmartPlugin) {
                        SmartPlugin.urlResource = c.url
                    }
                } catch (h) {}
            } else {}
            b(c);
            try {
                setTimeout(function() {
                    Messenger.balancedUrl(c.url, i)
                }, 100)
            } catch (g) {}
        })
    },
    getResourcePath: function(a) {
        return a
    },
    getBalancedResource: function(o, j) {
        var i = this;
        this.balancedCallback = j;
        if (typeof youboraData != "undefined") {
            var f = youboraData.getBalanceService();
            var g = youboraData.getBalanceType();
            var h = youboraData.getBalanceZoneCode();
            var b = youboraData.getBalanceOriginCode();
            var l = youboraData.getAccountCode();
            var c = youboraData.getBalanceToken();
            var a = youboraData.getBalanceNVA();
            var n = youboraData.getBalanceNVB();
            try {
                this.xmlHttp = new XMLHttpRequest();
                this.xmlHttp.context = this;
                var e = f + "?type=" + g + "&systemcode=" + l + "&zonecode=" + h + (b != "" ? ("&origincode=" + b) : "") + "&resource=" + encodeURIComponent(o) + "&live=" + (VideoPlayer.details && VideoPlayer.details.isLive ? "true" : "false") + "";
                var m = this;
                m.xmlHttp.addEventListener("load", function(r) {
                    if (m.xmlHttp) {
                        var u = r.target.response.toString();
                        var q = "";
                        var p = false;
                        try {
                            q = JSON.parse(u)
                        } catch (t) {
                            p = true
                        }
                        if (p == false) {
                            i.balancedCallback(q)
                        } else {
                            i.balancedCallback(false)
                        }
                        m.xmlHttp = null;
                        try {
                            clearTimeout(m.xmlHttp.readyStateChangeTimeout)
                        } catch (s) {}
                    }
                }, false);
                m.xmlHttp.onreadystatechange = function() {
                    if (m.xmlHttp) {
                        var p = 0;
                        if (m.xmlHttp.readyState == 1) {
                            p = 3 * 1000
                        } else {
                            if (m.xmlHttp && m.xmlHttp.readyState == 4) {
                                p = 200
                            }
                        }
                        if (p > 0) {
                            if (m.xmlHttp.readyStateChangeTimeout) {
                                try {
                                    clearTimeout(m.xmlHttp.readyStateChangeTimeout)
                                } catch (q) {}
                            }
                            m.xmlHttp.readyStateChangeTimeout = setTimeout(function() {
                                if (m.xmlHttp && m.xmlHttp.readyState == 4) {
                                    i.balancedCallback(false);
                                    m.xmlHttp = null
                                }
                            }, p)
                        }
                    }
                };
                this.xmlHttp.open("GET", e, true);
                this.xmlHttp.send()
            } catch (d) {}
        }
    }
};
