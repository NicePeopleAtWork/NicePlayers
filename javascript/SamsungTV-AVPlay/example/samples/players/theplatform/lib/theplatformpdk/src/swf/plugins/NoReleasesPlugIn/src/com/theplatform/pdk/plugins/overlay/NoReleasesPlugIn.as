package com.theplatform.pdk.plugins.overlay {	import com.theplatform.pdk.controllers.IViewController;	import com.theplatform.pdk.data.Feed;	import com.theplatform.pdk.data.LoadObject;	import com.theplatform.pdk.data.Padding;	import com.theplatform.pdk.data.TimeObject;	import com.theplatform.pdk.events.PdkEvent;	import com.theplatform.pdk.plugins.IPlugIn;	import com.theplatform.pdk.utils.Debug;	import com.theplatform.pdk.utils.PdkStringUtils;	import com.theplatform.pdk.views.ITextDisplayObject;		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;
	public class NoReleasesPlugIn extends Sprite implements IPlugIn	{		private var _controller:IViewController;		private var _message:String = "No releases found";		private var _feedErrorMessage:String = "There was an error loading the feed";		private var _textDO:ITextDisplayObject;		private var _lastFeed:Feed;				private var _componentArea:Rectangle;				public function NoReleasesPlugIn()		{			// Do any necessarily constructor logic here.  Note that when the plug-in is			// actually loaded, "initialize" below will be called, so typically all set-up			// logic will be in the "initialize" function		}				public function initialize(lo:LoadObject):void		{			// The LoadObject contains a reference to the controller.			_controller = lo.controller as IViewController;			// Use the vars property of the LoadObject to 			// collect the FlashVars from the canvas.             			if (lo.vars["message"])			{				_message = lo.vars["message"];			}			if (lo.vars["feedErrorMessage"])			{				_feedErrorMessage = lo.vars["feedErrorMessage"];			}			// Add your listener methods to the controller.			_controller.addEventListener(PdkEvent.OnRefreshReleaseModel, refreshReleaseModel);			_controller.addEventListener(PdkEvent.OnComponentSized, componentSized)			_controller.addEventListener(PdkEvent.OnPlugInsComplete, skinComplete);						_componentArea = _controller.getComponentSize();						// You can add traces to your plug-ins.  These traces will be sent			// to LogBook.  Note that any traces at a log level below the "logLevel"			// configured for the parent component won't be sent.			_controller.trace("Initialized- plug-in with message=[" + _message + "]", "NoReleasesPlugIn", Debug.INFO);		}                               						private function skinComplete(e:PdkEvent):void		{			_textDO = _controller.createITextDisplayObject("ReleaseListTitleFont");			this.visible = false;			_textDO.selectable = false;			// Try to grab the preferred font from the skin. 			_textDO.fontColor = _controller.getProperty("textColor") ? uint(_controller.getProperty("textColor")) : 0xFFFFFF;			_textDO.align = TextFormatAlign.CENTER;			 			this.addChild(_textDO as DisplayObject);			centerTextField();			if (_lastFeed)			{				writeMessage(_lastFeed);			}		}				private function componentSized(e:PdkEvent):void 		{			_componentArea = e.data as Rectangle			centerTextField();		}				//all of the possible plugins have loaded		private function refreshReleaseModel(e:PdkEvent):void		{			// Write the sample text into the overlay. 			_lastFeed = (e.data as Feed);			writeMessage(_lastFeed);		}				private function writeMessage(feed:Feed):void		{			if (!_textDO) return;//wait for the text to populate;			if (feed.isError)			{				_textDO.text = _feedErrorMessage;				this.visible = true;				_controller.trace("Displaying isError message", "NoReleasesPlugIn", Debug.INFO);			}			else if (feed.entries && feed.entries.length == 0)			{				_textDO.text =  _message;				this.visible = true;				_controller.trace("Displaying no results message", "NoReleasesPlugIn", Debug.INFO);			}			else			{				_textDO.text = "";				this.visible = false;				_controller.trace("Hidding message", "NoReleasesPlugIn", Debug.INFO);			}			centerTextField();		}		 				private function centerTextField():void 		{			if (_textDO)			{				_textDO.height = 25;				_textDO.x = (_componentArea.width - _textDO.width) / 2;				_textDO.y = (_componentArea.height - _textDO.height) / 2;			}		}			}}