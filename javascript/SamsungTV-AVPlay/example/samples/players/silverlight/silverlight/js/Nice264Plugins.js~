/*
 * Nice264 HTML5 Plugins package
 * Copyright (c) 2013 NicePeopleAtWork
 * Author: AdriÃ  Gil
 * Version: 2.0
 */

var Nice264AnalyticsEvents = {
    BUFFER_BEGIN: 1,
    BUFFER_END: 0,
    JOIN_SEND: 2
};

var Nice264PlayerEvents = new Array("buffering", "play", "pause", "ended", "error", "abort", "timeupdate", "canplaythrough");
/**
 * Plugin definition.
 * @param playerId
 * @param system
 * @param service
 * @param playInfo
 * @constructor
 */
function Nice264Analytics(playerId, system, service, playInfo)
{
    /**
     * Attributes.
     */
    this.playerId = playerId;
    this.system = youboraData.getAccountCode();
    this.service = youboraData.getService();
    this.playInfo = youboraData;

    // player reference
    this.player = null;
	
	//to obtain the resource plugin
	this.assetUrl = "http://stage.nws.nice264.com/vod_sec/1a5de0f046b7da621b3836097b6f1a97/179a925c03/NPAWPlug/SS_16_9_432p_1100_MP30_P1_0BF/81df075c8366169030ea.mp4";

    // configuration
    this.pluginVersion = "2.0.0._playready+silverlight";
    this.targetDevice = "Playready+Silverlight_VideoPlayer";
    this.outputFormat = "xml";
    this.xmlHttp = null;
    this.isXMLReceived = false;

    // events queue
    this.resourcesQueue = [];
    this.eventsQueue = [];
    this.eventsTimer = null;

    // events
    this.isStartEventSent = false;
    this.isJoinEventSent = false;
    this.isStopEventSent = false;
    this.isBufferRunning = false;
    this.isPauseEventSent = false;

    // properties
    this.assetMetadata = {};
    this.isLive = false;
    this.bufferTimeBegin = 0;
    this.joinTimeBegin = 0;
    this.joinTimeEnd = 0;

    // urls
    this.pamBufferUnderrunUrl = "";
    this.pamJoinTimeUrl = "";
    this.pamStartUrl = "";
    this.pamStopUrl = "";
    this.pamPauseUrl = "";
    this.pamResumeUrl = "";
    this.pamPingUrl = "";
    this.pamErrorUrl = "";

    // code
    this.pamCode = "";
    this.pamCodeOrig = "";
    this.pamCodeCounter = 0;

    // ping
    this.pamPingTime = 0;
    this.lastPingTime = 0;
    this.diffTime = 0;
    this.pingTimer = null;

    // buffer
    this.lastCurrentTime = 0;
    this.bufferTimer = null;
    this.bufferCounter = 0;

    /**
     * Initialization.
     */
    this.init();
}

/**
 * Plugin setup.
 */
Nice264Analytics.prototype.init = function()
{
    var context = this;
	this.player = document.getElementById(this.playerId); 
console.log(this.player);
    for (var i in Nice264PlayerEvents) {
		myPlayer.addEventListener(Nice264PlayerEvents[i], context.onPlayEvent);
	}

    this.xmlHttp = new XMLHttpRequest();
    this.xmlHttp.context = this;
    this.xmlHttp.addEventListener("load", function(httpEvent){ this.context.loadAnalytics(httpEvent); }, false);
    this.xmlHttp.open("GET", this.service + "/data?system=" + this.system + "&pluginVersion=" + this.pluginVersion + "&targetDevice=" + this.targetDevice + "&outputformat=" + this.outputFormat, false);
    this.xmlHttp.send();
};

/**
 * Plugin methods.
 */
Nice264Analytics.prototype.loadAnalytics = function(httpEvent)
{
    if (httpEvent.target.readyState == 4)
    {
        var response = httpEvent.target.responseXML;
        var pamUrl = response.getElementsByTagName("h")[0].childNodes[0].nodeValue;

        this.pamBufferUnderrunUrl = "http://" + pamUrl + "/bufferUnderrun";
        this.pamJoinTimeUrl = "http://" + pamUrl + "/joinTime";
        this.pamStartUrl = "http://" + pamUrl + "/start";
        this.pamStopUrl = "http://" + pamUrl + "/stop";
        this.pamPauseUrl = "http://" + pamUrl + "/pause";
        this.pamResumeUrl = "http://" + pamUrl + "/resume";
        this.pamPingUrl = "http://" + pamUrl + "/ping";
        this.pamErrorUrl = "http://" + pamUrl + "/error";

        this.pamCode = response.getElementsByTagName("c")[0].childNodes[0].nodeValue;
        this.pamCodeOrig = this.pamCode;
        this.pamPingTime = response.getElementsByTagName("pt")[0].childNodes[0].nodeValue * 1000;

        this.isXMLReceived = true;
    }
};

Nice264Analytics.prototype.sendAnalytics = function(url, data, hasResponse)
{
    //console.log("%%%%%%%%% sendAnalytics() to: " + url + data);

    this.xmlHttp = new XMLHttpRequest();
    this.xmlHttp.context = this;
    if (hasResponse)
    {
        this.xmlHttp.addEventListener("load", function(httpEvent){ this.context.parseAnalyticsResponse(httpEvent); }, false);
        this.xmlHttp.addEventListener("error", function(){ this.context.setPing(); }, false);
    }
    this.xmlHttp.open("GET", url + data, true);
    this.xmlHttp.send();
};

Nice264Analytics.prototype.parseAnalyticsResponse = function(httpEvent)
{
    if (httpEvent.target.readyState == 4)
    {
        var response = httpEvent.target.responseText;
        var d = new Date();

        if (response.length > 0 || response != "" || !typeof(undefined))
        {
            this.pamPingTime = response;
        }

        this.setPing();
        this.lastPingTime = d.getTime();
    }
};

Nice264Analytics.prototype.updateCode = function()
{
    this.pamCodeCounter++;
    this.pamCode = this.pamCodeOrig + "_" + this.pamCodeCounter;
};

Nice264Analytics.prototype.reset = function()
{
    this.isStopEventSent = false;
    this.isStartEventSent = false;
    this.isJoinEventSent = false;
    this.isBufferRunning = false;
    this.isPauseEventSent = false;
    this.bufferTimeBegin = 0;
    this.joinTimeBegin = 0;
    this.joinTimeEnd = 0;

    clearTimeout(this.pingTimer);
    this.pingTimer = null;
    this.lastPingTime = 0;
    this.diffTime = 0;

    clearTimeout(this.bufferTimer);

    this.updateCode();
};

/**
 * Plugin methods. Getters and Setters.
 */
Nice264Analytics.prototype.setPlayerStateCallback = function(callback)
{
    // console.log("CALLBACK = " + callback);
};

Nice264Analytics.prototype.setPing = function()
{
    var context = this;

    this.pingTimer = setTimeout(function(){ context.ping(); }, this.pamPingTime);
};

Nice264Analytics.prototype.setUsername = function(username)
{
    this.playInfo.username = username;
};

Nice264Analytics.prototype.setTransactionCode = function(trans)
{
    this.playInfo.transaction = trans;
};

Nice264Analytics.prototype.setLive = function(value)
{
    this.isLive = value;
};

Nice264Analytics.prototype.setMetadata = function(metadata)
{
    this.assetMetadata = metadata;
};

Nice264Analytics.prototype.getMetadata = function()
{
    var jsonObj = JSON.stringify(this.assetMetadata);
    var metadata = encodeURI(jsonObj);

    return metadata;
};

Nice264Analytics.prototype.setVideoURL = function(url)
{
    this.assetUrl = url;
};

Nice264Analytics.prototype.getVideoURL = function()
{
    return this.assetUrl;
};

Nice264Analytics.prototype.getBitrate = function()
{
    try
    {
        return 0;
    }
    catch (err)
    {
        return 0;
    }

    return 0;
};

/**
 * Plugin events. Analytics.
 */
Nice264Analytics.prototype.start = function()
{
    var d = new Date();

    var params = "?pluginVersion=" + this.pluginVersion +
        "&pingTime=" + this.pamPingTime +
        "&totalBytes=0" +
        "&referer=" + encodeURIComponent(window.location.href) +
        "&user=" + this.playInfo.username +
        "&properties=" + this.getMetadata() +
        "&live=" + this.isLive +
        "&transcode=" + this.playInfo.transaction +
        "&system=" + this.system +
        "&resource=" + this.getVideoURL() +//encodeURIComponent(this.player.data) +
        "&code=" + this.pamCode;

    this.sendAnalytics(this.pamStartUrl, params, false);

    this.setPing();
    this.lastPingTime = d.getTime();
};

Nice264Analytics.prototype.ping = function()
{
    var d = new Date();

    clearTimeout(this.pingTimer);
    this.pingTimer = null;

    if (this.lastPingTime != 0)
    {
        this.diffTime = d.getTime() - this.lastPingTime;
    }
    this.lastPingTime = d.getTime();

    var params = "?diffTime=" + this.diffTime +
        "&totalBytes=" + this.getBitrate() +
        "&pingTime=" + (this.pamPingTime / 1000) +
        "&dataType=0" +
        "&code=" + this.pamCode;

    this.sendAnalytics(this.pamPingUrl, params, true);
};

Nice264Analytics.prototype.join = function(bufferState)
{
    var d = new Date();
    var joinTimeTotal = 0;
    var params = null;

    if (bufferState == Nice264AnalyticsEvents.BUFFER_BEGIN)
    {
        this.joinTimeBegin = d.getTime();
    }
    else if (bufferState == Nice264AnalyticsEvents.BUFFER_END)
    {
        this.joinTimeEnd = d.getTime();

    } else if (bufferState == Nice264AnalyticsEvents.JOIN_SEND && !this.isJoinEventSent)
    {
        this.isJoinEventSent = true;

        joinTimeTotal = this.joinTimeEnd - this.joinTimeBegin;

        if (joinTimeTotal <= 0)
        {
            joinTimeTotal = 0;
        }

        params = "?time=" + joinTimeTotal +
            "&code=" + this.pamCode;

        this.sendAnalytics(this.pamJoinTimeUrl, params, false);
    }
};

Nice264Analytics.prototype.buffer = function(bufferState)
{
    var d = new Date();
    var bufferTimeEnd = 0;
    var bufferTimeTotal = 0;
    var params = null;

    if (bufferState == Nice264AnalyticsEvents.BUFFER_BEGIN)
    {
        this.bufferTimeBegin = d.getTime();
    }
    else if (bufferState == Nice264AnalyticsEvents.BUFFER_END)
    {
        bufferTimeEnd = d.getTime();
        bufferTimeTotal = bufferTimeEnd - this.bufferTimeBegin;

        params = "?time=" + this.player.currentTime +
            "&duration=" + bufferTimeTotal +
            "&code=" + this.pamCode;

        this.sendAnalytics(this.pamBufferUnderrunUrl, params, false);
    }
};

Nice264Analytics.prototype.resume = function()
{
    var params = "?code=" + this.pamCode;

    this.sendAnalytics(this.pamResumeUrl, params, false);
};

Nice264Analytics.prototype.pause = function()
{
    var params = "?code=" + this.pamCode;

    this.sendAnalytics(this.pamPauseUrl, params, false);
};

Nice264Analytics.prototype.stop = function()
{
    var params = "?diffTime=" + this.diffTime +
        "&code=" + this.pamCode;

    this.sendAnalytics(this.pamStopUrl, params, false);

    clearTimeout(this.pingTimer);
    this.pingTimer = null;

    this.reset();
};

Nice264Analytics.prototype.error = function()
{
    var params = "?errorCode=" + this.player.error +
        "&msg=" +
        "&code=" + this.pamCode +
		"&pluginVersion=" + this.pluginVersion +
        "&pingTime=" + this.pamPingTime +
        "&totalBytes=0" +
        "&referer=" + encodeURIComponent(window.location.href) +
        "&user=" + this.playInfo.username +
        "&properties=" + this.getMetadata() +
        "&live=" + this.isLive +
        "&transcode=" + this.playInfo.transaction +
        "&system=" + this.system +
        "&resource=" + this.getVideoURL() +//encodeURIComponent(this.player.data) +
        "&code=" + this.pamCode;

    this.sendAnalytics(this.pamErrorUrl, params, false);

    clearTimeout(this.pingTimer);
    this.pingTimer = null;
};

/**
 * Plugin events. Player.
 */
Nice264Analytics.prototype.onPlayEvent = function(e,arg1,arg2,arg3,arg4,arg5) 
{
	//console.log(e);
	console.log(e);
	console.log(this.player);
    switch (e.type) 
    {
        case "play":
            if (this.isStartEventSent)
            {	
                this.isPauseEventSent = false;
                nice264Plugin.resume();
            }
            else
            {	
                this.isStartEventSent = true;
                nice264Plugin.start();
            }

            if (this.isStartEventSent && !this.isJoinEventSent)
            {
                this.isBufferRunning = false;
                nice264Plugin.join(Nice264AnalyticsEvents.JOIN_SEND);
            }
            break;
        case "pause":
            //if (!this.isPauseEventSent)
            //{	
                //this.isPauseEventSent = true;
                nice264Plugin.pause();
            //}
            break;
        case "ended": //Stopped
            if (!this.isStopEventSent)
            {	
                this.isStopEventSent = true;
                nice264Plugin.stop();
            }
            break;
        case "error":
        case "abort":
			nice264Plugin.error();
            if (!this.isStopEventSent)
            {

                this.isStopEventSent = true;
                nice264Plugin.stop();
            }
            break;
        case "buffering":
            if (this.isJoinEventSent)
            {
                this.bufferCounter++;
                if (this.bufferCounter == 1 && this.isStartEventSent && !this.isPauseEventSent && !this.isBufferRunning)
                {
                    this.isBufferRunning = true;
                    nice264Plugin.buffer(Nice264AnalyticsEvents.BUFFER_BEGIN);
                }
            }

            // joinTime
            if (!this.isJoinEventSent && !this.isBufferRunning)
            {
                this.isBufferRunning = true;
                nice264Plugin.join(Nice264AnalyticsEvents.BUFFER_BEGIN);
            }

            break;
        case "canplaythrough":
            // joinTime
            //if (!this.isJoinEventSent && this.isBufferRunning)
            //{
                nice264Plugin.join(Nice264AnalyticsEvents.BUFFER_END);
            //}
            break;
        case "timeupdate":
            // buffer
            if (this.isJoinEventSent){
                if (this.bufferCounter > 1 && this.isStartEventSent && !this.isPauseEventSent && this.isBufferRunning)
                {
                    nice264Plugin.buffer(Nice264AnalyticsEvents.BUFFER_END);
                }
                this.bufferCounter = 0;
                this.isBufferRunning = false;
            }
            break;
    }
};

// TODO: add events queue logic
// TODO: plugin with AUTOPLAY
// TODO: plugin with PRELOAD
// TODO: multibitrate / multisource videos

// TODO: propagate user's + plugin events
// TODO: error handling
