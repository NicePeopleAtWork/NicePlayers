/**
 * Created for NicePeopleAtWork.
 * User: Miquel Fradera.
 * Date: 4/02/14
 * Time: 12:57
 */

var Nice264AnalyticsEvents = {
    BUFFER_BEGIN: 1,
    BUFFER_END: 0
};
/*var SmartPlugin = { 
    nice264Plugin: null,
    Init: function()  {  
        try
        {
            console.log(document);
            var video                   = document.getElementsByTagName("video")[0]
            var bandwidth               = {};

            SmartPlugin.nice264Plugin   = new Nice264Analytics ( video , youboraData.getAccountCode() , youboraData.getService() , bandwidth );
            
            SmartPlugin.nice264Plugin.setPlayerStateCallback("checkPlayState");
            SmartPlugin.nice264Plugin.setLive( youboraData.getLive() );
            SmartPlugin.nice264Plugin.setUsername( youboraData.getUsername() );
        }
        catch(err)
        {
            alert ( "Nice264Plugin :: Error while get video object" );
        }
    }
};*/
/**
 * Plugin definition.
 * @param playerId
 * @param system
 * @param service
 * @param playInfo
 */
function Nice264Analytics(playerId, system, service, playInfo)
{
    /**
     * Attributes.
     */
    this.playerId = playerId;
    this.system = system;
    this.service = service;
    this.playInfo = playInfo;
    this.bandwidth = playInfo;

    // player reference
    this.player = null;
    this.playStateCallback = "";

    // configuration
    this.pluginVersion = "2.2.1_philipstv";
    this.targetDevice = "Philips_InternetTV";

    // events
    this.isStartEventSent = false;
    this.isJoinEventSent = false;
    this.isStopEventSent = false;
    this.isBufferRunning = false;
    this.isPauseEventSent = false;

    // properties
    this.assetMetadata = {};
    this.isLive = false;
    this.bufferTimeBegin = 0;
  
    // code
    this.pamCode = "";
    this.pamCodeOrig = "";
    this.pamCodeCounter = 0;

    // ping
    this.pamPingTime = 0;
    this.lastPingTime = 0;
    this.diffTime = 0;
    this.pingTimer = null;

    //Communication interface
    this.communications ={};

    /**
     * Initialization.
     */
    this.init();
};

/**
 * Plugin setup.
 */
Nice264Analytics.prototype.init = function()
{

    var context = this;
    this.player = document.getElementById(this.playerId);
    this.player.onPlayStateChange = function(){ context.checkPlayState(); };
    console.log("Justo antes de crear el comm");
    this.communications = new YouboraCommunication(this.system , this.service ,  this.bandwidth , this.pluginVersion , this.targetDevice );
    this.pamPingTime = this.communications.getPingTime();
   
    
};


Nice264Analytics.prototype.updateCode = function()
{
    this.pamCodeCounter++;
    this.pamCode = this.pamCodeOrig + "_" + this.pamCodeCounter;
};

Nice264Analytics.prototype.reset = function()
{
    this.isStartEventSent = false;
    this.isJoinEventSent = false;
    this.isBufferRunning = false;
    this.isPauseEventSent = false;
    this.bufferTimeBegin = 0;

    clearTimeout(this.pingTimer);
    this.pingTimer = null;
    this.lastPingTime = 0;
    this.diffTime = 0;

    this.updateCode();
};

/**
 * Plugin methods. Getters and Setters.
 */
Nice264Analytics.prototype.setPlayerStateCallback = function(callback)
{
    this.playStateCallback = callback;
};

Nice264Analytics.prototype.setUsername = function(username)
{
    this.playInfo.username = username;
};

Nice264Analytics.prototype.setMetadata = function(metadata)
{
    this.assetMetadata = metadata;
};

Nice264Analytics.prototype.getMetadata = function()
{
    var jsonObj = JSON.stringify(this.assetMetadata);
    var metadata = encodeURI(jsonObj);

    return metadata;
};

Nice264Analytics.prototype.setLive = function(value)
{
    this.isLive = value;
};

Nice264Analytics.prototype.setTransactionCode = function(trans)
{
    this.playInfo.transaction = trans;
};

Nice264Analytics.prototype.getBitrate = function()
{
    try
    {
        var playInfo = this.player.mediaPlayInfo();
    }
    catch (err)
    {
		return -1;
    }
	//return playInfo.bitrateInstant;
};

Nice264Analytics.prototype.setPing = function()
{
    var context = this;
    this.pingTimer = setTimeout(function(){ context.ping(); }, this.pamPingTime);
};

/**
 * Plugin events. Analytics.
 */
Nice264Analytics.prototype.start = function()
{
    var d = new Date();

    console.log(this.player);
    try{
        this.communications.sendStart ( 0 , window.location.href , this.getMetadata() , this.isLive ,  this.resource, this.duration);
    }catch(err){
        console.log(err);
    }

    this.setPing();
    this.lastPingTime = d.getTime();
};

Nice264Analytics.prototype.ping = function()
{
    clearTimeout(this.pingTimer);
    try{
        this.communications.sendPingTotalBitrate(this.getBitrate());
        this.setPing();
    }catch(err){
        console.log(err);
    }
};

Nice264Analytics.prototype.buffer = function(bufferState)
{
    var d = new Date();
    var bufferTimeEnd = 0;
    var bufferTimeTotal = 0;
    var params = null;
    if (bufferState == Nice264AnalyticsEvents.BUFFER_BEGIN)
    {
        this.bufferTimeBegin = d.getTime();
    }
    else if (bufferState == Nice264AnalyticsEvents.BUFFER_END)
    {
        bufferTimeEnd = d.getTime();
        bufferTimeTotal = bufferTimeEnd - this.bufferTimeBegin;

        if (!this.isJoinEventSent)
        {
           
            this.isJoinEventSent = true;
            this.communications.sendJoin(bufferTimeTotal);
        }
        else
        {
            this.communications.sendBuffer(this.player.playPosition/1000 ,bufferTimeTotal );

        }
    }
};

Nice264Analytics.prototype.resume = function()
{

    this.communications.sendResume();

};

Nice264Analytics.prototype.pause = function()
{
     this.communications.sendPause();
};

Nice264Analytics.prototype.stop = function()
{
    this.communications.sendStop();

    clearTimeout(this.pingTimer);
    this.pingTimer = null;

    this.reset();
};

Nice264Analytics.prototype.error = function()
{

    this.communications.sendError(this.player.error,"");
    clearTimeout(this.pingTimer);
    this.pingTimer = null;
};

/**
 * Plugin events. Player.
 */
Nice264Analytics.prototype.checkPlayState = function()
{   
    //console.log(this.player.keys);
    switch (this.player.playState)
    {
        case 0:     // stopped
            if (!this.isStopEventSent)
            {
                this.isStopEventSent = true;
                this.stop();
            }
            break;
        case 1:     // playing
            if (this.isStopEventSent)
            {
                this.isStopEventSent = false;
            }

            if (!this.isStartEventSent)
            {
                this.isStartEventSent = true;
                this.start();
            }
            else if (this.isPauseEventSent)
            {
                this.isPauseEventSent = false;
                this.resume();
            }

            if (!this.isJoinEventSent && !this.isBufferRunning)
            {
                //this.buffer(Nice264AnalyticsEvents.BUFFER_BEGIN);
                this.buffer(Nice264AnalyticsEvents.BUFFER_END);
            }

            if (this.isBufferRunning)
            {
                this.isBufferRunning = false;
                this.buffer(Nice264AnalyticsEvents.BUFFER_END);
            }
            break;
        case 2:     // paused
            this.isPauseEventSent = true;
            this.pause();
            break;
        case 3:     // connecting
			if (!this.isJoinEventSent && !this.isBufferRunning)
            {
                this.buffer(Nice264AnalyticsEvents.BUFFER_BEGIN);
                //this.buffer(Nice264AnalyticsEvents.BUFFER_END);
            }
            break;
        case 4:     // buffering
            this.isBufferRunning = true;
            this.buffer(Nice264AnalyticsEvents.BUFFER_BEGIN);
            break;
        case 5:     // finished
            if (!this.isStopEventSent)
            {
                this.isStopEventSent = true;
                this.stop();
            }
            break;
        case 6:     // error
            this.error();
            if (!this.isStopEventSent)
            {
                this.isStopEventSent = true;
                this.stop();
            }
            break;
    }

    eval(this.playStateCallback + "()");
};

// TODO: add events queue logic
